{"version":3,"file":"core.js","names":["types","t","peek","ScopeManager","isIdentifier","node","name","undefined","Array","isArray","includes","sideEffects","callee","isMemberExpression","property","state","graph","addEdge","arguments","getCallee","isSequenceExpression","expressions","length","first","second","isNumericLiteral","value","isTSLib","scope","declaration","getDeclaration","isTSReexport","isCallExpression","exportsIdentifier","globalExportsIdentifier","object","findWildcardReexportStatement","identifierName","declarator","getParent","isVariableDeclarator","isVariableDeclaration","program","isProgram","body","find","statement","isExpressionStatement","expression","argument","isMethodWithSideEffect","methods","source","importAliases","get","some","method","getAffectedNodes","obj","isStringLiteral","addExport","isLazyInit","arg","isLogicalExpression","operator","left","right","isAssignmentExpression","visitors","ExpressionStatement","baseVisit","Function","unsubscribe","onVisit","descendant","params","forEach","param","isFunctionDeclaration","id","isFunctionExpression","Block","exportsDeclaration","directives","directive","Directive","TryStatement","handler","finalizer","block","CatchClause","IfStatement","consequent","test","WhileStatement","SwitchCase","SwitchStatement","cases","c","discriminant","ForStatement","init","update","child","ForInStatement","Terminatorless","isBreakStatement","isContinueStatement","closestFunctionNode","fnStack","ObjectExpression","context","push","properties","prop","isObjectMethod","key","isObjectProperty","isSpreadElement","pop","MemberExpression","visit","isLVal","declare","addReference","computed","has","imports","AssignmentExpression","VariableDeclarator","declared","meta","set","unregister","addDeclareHandler","identifier","from","delete","VariableDeclaration","kind","declarations","CallExpression","parent","scopeId","whereIsDeclared","firstArg","reexports","importTypes","local","startsWith","conditions","callback","affectedNode","SequenceExpression","identifierHandlers","keep","refer"],"sources":["../../src/langs/core.ts"],"sourcesContent":["import { types as t } from '@babel/core';\nimport type {\n  AssignmentExpression,\n  Block,\n  CallExpression,\n  CatchClause,\n  Directive,\n  ExpressionStatement,\n  ForInStatement,\n  ForStatement,\n  Function as FunctionNode,\n  Identifier,\n  IfStatement,\n  MemberExpression,\n  Node,\n  ObjectExpression,\n  SequenceExpression,\n  SwitchCase,\n  SwitchStatement,\n  Terminatorless,\n  TryStatement,\n  VariableDeclaration,\n  VariableDeclarator,\n  WhileStatement,\n} from '@babel/types';\n\nimport { peek } from '@linaria/babel-preset';\n\nimport type DepsGraph from '../DepsGraph';\nimport type GraphBuilderState from '../GraphBuilderState';\nimport ScopeManager from '../scope';\nimport type { IdentifierHandlers, Visitors } from '../types';\n\nfunction isIdentifier(\n  node: Node,\n  name?: string | string[]\n): node is Identifier {\n  return (\n    t.isIdentifier(node) &&\n    (name === undefined ||\n      (Array.isArray(name) ? name.includes(node.name) : node.name === name))\n  );\n}\n\ntype SideEffect = [\n  {\n    callee?: (child: CallExpression['callee']) => boolean;\n    arguments?: (child: CallExpression['arguments']) => boolean;\n  },\n  (node: CallExpression, state: GraphBuilderState) => void\n];\n\nconst sideEffects: SideEffect[] = [\n  [\n    // if the first argument of forEach is required, mark forEach as required\n    {\n      callee: (node) =>\n        t.isMemberExpression(node) &&\n        t.isIdentifier(node.property) &&\n        node.property.name === 'forEach',\n    },\n    (node, state) => state.graph.addEdge(node.arguments[0], node),\n  ],\n];\n\nfunction getCallee(node: CallExpression): Node {\n  if (\n    t.isSequenceExpression(node.callee) &&\n    node.callee.expressions.length === 2\n  ) {\n    const [first, second] = node.callee.expressions;\n    if (t.isNumericLiteral(first) && first.value === 0) {\n      return second;\n    }\n  }\n\n  return node.callee;\n}\n\nfunction isTSLib(node: t.Node, scope: ScopeManager) {\n  if (!t.isIdentifier(node)) {\n    return false;\n  }\n\n  const declaration = scope.getDeclaration(node);\n  return t.isIdentifier(declaration) && declaration.name === 'tslib_1';\n}\n\nfunction isTSReexport(\n  node: t.Node,\n  scope: ScopeManager\n): node is t.Node & { callee: { object: t.Identifier } } {\n  if (!t.isCallExpression(node)) {\n    return false;\n  }\n\n  const {\n    callee,\n    arguments: [, exportsIdentifier],\n  } = node;\n  if (\n    !t.isIdentifier(exportsIdentifier) ||\n    exportsIdentifier.name !== 'exports' ||\n    scope.getDeclaration(exportsIdentifier) !==\n      ScopeManager.globalExportsIdentifier\n  ) {\n    return false;\n  }\n\n  if (!t.isMemberExpression(callee)) {\n    return false;\n  }\n\n  const { object, property } = callee;\n  if (!t.isIdentifier(property) || property.name !== '__exportStar') {\n    return false;\n  }\n\n  return isTSLib(object, scope);\n}\n\nfunction findWildcardReexportStatement(\n  node: t.CallExpression,\n  identifierName: string,\n  graph: DepsGraph\n): t.Statement | null {\n  if (!t.isIdentifier(node.callee) || node.callee.name !== 'require')\n    return null;\n\n  const declarator = graph.getParent(node);\n  if (!t.isVariableDeclarator(declarator)) return null;\n\n  const declaration = graph.getParent(declarator);\n  if (!t.isVariableDeclaration(declaration)) return null;\n\n  const program = graph.getParent(declaration);\n  if (!t.isProgram(program)) return null;\n\n  // Our node is a correct export\n  // Let's check that we have something that looks like transpiled re-export\n  return (\n    program.body.find((statement) => {\n      /*\n       * We are looking for `Object.keys(_bar).forEach(â€¦)`\n       */\n\n      if (!t.isExpressionStatement(statement)) return false;\n\n      const { expression } = statement;\n      if (!t.isCallExpression(expression)) return false;\n\n      const { callee } = expression;\n      if (!t.isMemberExpression(callee)) return false;\n\n      const { object, property } = callee;\n\n      if (!isIdentifier(property, 'forEach')) return false;\n\n      if (!t.isCallExpression(object)) return false;\n\n      // `object` should be `Object.keys`\n      if (\n        !t.isMemberExpression(object.callee) ||\n        !isIdentifier(object.callee.object, 'Object') ||\n        !isIdentifier(object.callee.property, 'keys')\n      )\n        return false;\n\n      //\n      const [argument] = object.arguments;\n      return isIdentifier(argument, identifierName);\n    }) ?? null\n  );\n}\n\nfunction isMethodWithSideEffect(\n  callee: Node | null,\n  state: GraphBuilderState\n): boolean {\n  const methods = [\n    'assign',\n    'defineProperty',\n    'defineProperties',\n    'freeze',\n    'observe',\n  ];\n  if (\n    t.isMemberExpression(callee) &&\n    isIdentifier(callee.object, 'Object') &&\n    isIdentifier(callee.property, methods)\n  ) {\n    // It's something like Object.defineProperty\n    return true;\n  }\n\n  if (\n    t.isMemberExpression(callee) &&\n    isIdentifier(callee.property, 'default') &&\n    isIdentifier(callee.object)\n  ) {\n    // It looks like a call of imported method. Maybe it's a polyfill for Object's methods?\n    const declaration = state.scope.getDeclaration(callee.object);\n    if (!declaration || !isIdentifier(declaration)) return false;\n    const source = state.graph.importAliases.get(declaration);\n    return methods.some(\n      (method) => `@babel/runtime/helpers/${method}` === source\n    );\n  }\n\n  return false;\n}\n\n/*\n * Returns nodes which are implicitly affected by specified node\n */\nfunction getAffectedNodes(node: Node, state: GraphBuilderState): Node[] {\n  // FIXME: this method should be generalized\n  const callee = t.isCallExpression(node) ? getCallee(node) : null;\n  if (t.isCallExpression(node) && isMethodWithSideEffect(callee, state)) {\n    const [obj, property] = node.arguments;\n    if (!t.isIdentifier(obj)) {\n      return [];\n    }\n\n    if (\n      state.scope.getDeclaration(obj) !== ScopeManager.globalExportsIdentifier\n    ) {\n      return [node.arguments[0]];\n    }\n\n    if (t.isStringLiteral(property)) {\n      if (property.value === '__esModule') {\n        return [node.arguments[0]];\n      }\n\n      state.graph.addExport(property.value, node);\n    }\n  }\n\n  return [];\n}\n\n/*\n * In some cases (such as enums) babel uses CallExpression for object initializations\n * (function (Colors) {\n *   Colors[\"BLUE\"] = \"#27509A\";\n * })(Colors || (Colors = {}));\n */\nfunction isLazyInit(\n  statement: ExpressionStatement\n): statement is ExpressionStatement & {\n  expression: {\n    arguments: [{ right: AssignmentExpression }];\n  };\n} {\n  const { expression } = statement;\n  if (!t.isCallExpression(expression) || expression.arguments.length !== 1) {\n    return false;\n  }\n\n  const [arg] = expression.arguments;\n  if (!t.isLogicalExpression(arg) || arg.operator !== '||') {\n    return false;\n  }\n\n  const { left, right } = arg;\n  return t.isIdentifier(left) && t.isAssignmentExpression(right);\n}\n\nexport const visitors: Visitors = {\n  /*\n   * ExpressionStatement\n   * This is one of the rare cases when a child defines a dependency on a parent.\n   * Suppose we have a code like this:\n   * const fn = () => {\n   *   let a = 2;\n   *   a *= 2;\n   *   return a;\n   * };\n   *\n   * `a *= 2` here is an ExpressionStatement node which contains an expression AssignmentExpression `a *= 2`.\n   * The result of AssignmentExpression here depends on the fact of ExpressionStatement execution,\n   * that's why we need to mark the statement as a dependency of the expression.\n   * If we don't mark it, it will be cut as a useless statement.\n   */\n  ExpressionStatement(this: GraphBuilderState, node: ExpressionStatement) {\n    this.baseVisit(node);\n\n    this.graph.addEdge(node, node.expression);\n    this.graph.addEdge(node.expression, node);\n\n    if (isLazyInit(node)) {\n      this.graph.addEdge(node.expression.arguments[0].right, node);\n    }\n  },\n\n  /*\n   * FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod;\n   * Functions can be either a statement or an expression.\n   * That's why we need to disable default dependency resolving strategy for expressions by passing `ignoreDeps` flag.\n   * Every function must have a body. Without a body, it becomes invalid.\n   * In general, a body depends on parameters of a function.\n   * In real life, some of the parameters can be omitted, but it's not trivial to implement that type of tree shaking.\n   */\n  Function(this: GraphBuilderState, node: FunctionNode) {\n    const unsubscribe = this.onVisit((descendant) =>\n      this.graph.addEdge(node, descendant)\n    );\n    this.baseVisit(node, true); // ignoreDeps=true prevents default dependency resolving\n    unsubscribe();\n\n    this.graph.addEdge(node, node.body);\n\n    node.params.forEach((param) => this.graph.addEdge(node.body, param));\n    if (t.isFunctionDeclaration(node) && node.id) {\n      // `id` is an identifier which depends on the function declaration\n      this.graph.addEdge(node.id, node);\n    }\n\n    if (\n      t.isFunctionExpression(node) &&\n      node.id !== null &&\n      node.id !== undefined\n    ) {\n      // keep function name in expressions like `const a = function a();`\n      this.graph.addEdge(node, node.id);\n    }\n\n    if (t.isFunctionDeclaration(node) && node.id) {\n      this.graph.addEdge(node, node.id);\n    }\n  },\n\n  /*\n   * BlockStatement | Program\n   * The same situation as in ExpressionStatement: if one of the expressions is required, the block itself is also required.\n   * Whereas a block doesn't depend on its children.\n   * Example:\n   * 1. let c;\n   * 2. { // BlockStatement begin\n   * 3.   let a = 1;\n   * 4.   let b = 2;\n   * 5.   a++;\n   * 6.   a = c;\n   * 7. } // BlockStatement end\n   *\n   * If we want to evaluate the value of `c`, we need to evaluate lines 1, 3, 5 and 6,\n   * but we don't need line 4, even though it's a child of the block.\n   */\n  Block(this: GraphBuilderState, node: Block) {\n    this.baseVisit(node);\n\n    if (t.isProgram(node)) {\n      const exportsDeclaration = this.scope.getDeclaration('global:exports')!;\n      this.graph.addEdge(node, exportsDeclaration);\n      node.directives.forEach((directive) =>\n        this.graph.addEdge(node, directive)\n      );\n    }\n  },\n\n  Directive(this: GraphBuilderState, node: Directive) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.value);\n  },\n\n  /*\n   * TryStatement\n   * try { /* block *\\/ } catch() {/* handler *\\/} finalize {/* finalizer *\\/}\n   * `handler` and `finalizer` do not make sense without `block`\n   * `block` depends on the whole node.\n   */\n  TryStatement(this: GraphBuilderState, node: TryStatement) {\n    this.baseVisit(node);\n    [node.handler, node.finalizer].forEach((statement) => {\n      if (statement) {\n        this.graph.addEdge(node.block, statement);\n        this.graph.addEdge(statement, node.block);\n      }\n    });\n  },\n\n  CatchClause(this: GraphBuilderState, node: CatchClause) {\n    this.baseVisit(node);\n\n    this.graph.addEdge(node, node.body);\n  },\n\n  IfStatement(this: GraphBuilderState, node: IfStatement) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.consequent);\n    this.graph.addEdge(node, node.test);\n  },\n\n  /*\n   * WhileStatement\n   * Pretty simple behaviour here:\n   * â€¢ if body is required, the statement is required\n   * â€¢ if the statement is required, the condition is also required.\n   */\n  WhileStatement(this: GraphBuilderState, node: WhileStatement) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.test);\n  },\n\n  SwitchCase(this: GraphBuilderState, node: SwitchCase) {\n    this.baseVisit(node);\n    node.consequent.forEach((statement) => this.graph.addEdge(statement, node));\n    if (node.test) {\n      this.graph.addEdge(node, node.test);\n    }\n  },\n\n  SwitchStatement(this: GraphBuilderState, node: SwitchStatement) {\n    this.baseVisit(node);\n    node.cases.forEach((c) => this.graph.addEdge(c, node));\n    this.graph.addEdge(node, node.discriminant);\n  },\n\n  ForStatement(this: GraphBuilderState, node: ForStatement) {\n    this.baseVisit(node);\n\n    [node.init, node.test, node.update, node.body].forEach((child) => {\n      if (child) {\n        this.graph.addEdge(node, child);\n      }\n    });\n  },\n\n  /*\n   * ForInStatement\n   * for (const k in o) { body }\n   */\n  ForInStatement(this: GraphBuilderState, node: ForInStatement) {\n    this.baseVisit(node);\n\n    if (node.body) {\n      this.graph.addEdge(node, node.body);\n      this.graph.addEdge(node.body, node.left);\n    }\n\n    this.graph.addEdge(node.left, node.right);\n  },\n\n  /*\n   * BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldExpression | AwaitExpression\n   * All these nodes are required to evaluate the value of a function in which they are defined.\n   * Also, the value of these nodes depends on the argument if it is presented.\n   */\n  Terminatorless(this: GraphBuilderState, node: Terminatorless) {\n    this.baseVisit(node);\n\n    if (\n      !(t.isBreakStatement(node) || t.isContinueStatement(node)) &&\n      node.argument\n    ) {\n      this.graph.addEdge(node, node.argument);\n    }\n\n    const closestFunctionNode = peek(this.fnStack);\n    this.graph.addEdge(closestFunctionNode, node);\n  },\n\n  /*\n   * ObjectExpression\n   * Objects areâ€¦ complicated. Especially because similarly looking code can be either an expression or a pattern.\n   * In this case we work with an expression like:\n   * const obj = {\n   *   method() {}, // ObjectMethod\n   *   property: \"value\", // ObjectProperty\n   *   ...rest, // SpreadElement\n   * }\n   */\n  ObjectExpression(this: GraphBuilderState, node: ObjectExpression) {\n    this.context.push('expression');\n    this.baseVisit(node);\n    node.properties.forEach((prop) => {\n      this.graph.addEdge(node, prop);\n      if (t.isObjectMethod(prop)) {\n        this.graph.addEdge(prop, prop.key);\n        this.graph.addEdge(prop, prop.body);\n      } else if (t.isObjectProperty(prop)) {\n        this.graph.addEdge(prop, prop.key);\n        this.graph.addEdge(prop, prop.value);\n      } else if (t.isSpreadElement(prop)) {\n        this.graph.addEdge(prop, prop.argument);\n      }\n    });\n    this.context.pop();\n  },\n\n  /*\n   * MemberExpression\n   * It's about a simple expression like `obj.foo` or `obj['foo']`.\n   * In addition to default behaviour (an expression depends on all its children),\n   * we add a backward dependency from an object to a node for processing member\n   * expressions in assignments.\n   *\n   * Example:\n   * let obj = { a: 1 };\n   * obj.b = 2;\n   *\n   * If we try to evaluate `obj` without backward dependency,\n   * `obj.b = 2` will be cut and we will get just `{ a: 1 }`.\n   */\n  MemberExpression(this: GraphBuilderState, node: MemberExpression) {\n    if (this.visit(node.object, node, 'object') !== 'ignore') {\n      this.graph.addEdge(node, node.object);\n    }\n\n    this.context.push('expression');\n    if (this.visit(node.property, node, 'property') !== 'ignore') {\n      this.graph.addEdge(node, node.property);\n    }\n    this.context.pop();\n\n    this.graph.addEdge(node.object, node);\n\n    if (\n      isIdentifier(node.object, 'exports') &&\n      this.scope.getDeclaration(node.object) ===\n        ScopeManager.globalExportsIdentifier\n    ) {\n      // We treat `exports.something` and `exports['something']` as identifiers in the global scope\n      this.graph.addEdge(node, node.object);\n      this.graph.addEdge(node, node.property);\n\n      const isLVal = peek(this.context) === 'lval';\n      if (isLVal) {\n        this.scope.declare(node, false);\n      } else {\n        const declaration = this.scope.addReference(node);\n        this.graph.addEdge(node, declaration);\n      }\n\n      return;\n    }\n\n    if (\n      t.isIdentifier(node.object) &&\n      ((t.isIdentifier(node.property) && !node.computed) ||\n        t.isStringLiteral(node.property))\n    ) {\n      // It's simple `foo.bar` or `foo[\"bar\"]` expression. Is it a usage of a required library?\n      const declaration = this.scope.getDeclaration(node.object);\n      if (\n        t.isIdentifier(declaration) &&\n        this.graph.importAliases.has(declaration)\n      ) {\n        // It is. We can remember what exactly we use from it.\n        const source = this.graph.importAliases.get(declaration)!;\n        this.graph.imports.get(source)!.push(node.property);\n      }\n    }\n  },\n\n  /*\n   * AssignmentExpression\n   * `a = b`, `{ ...rest } = obj`, `obj.a = 3`, etc.\n   * It's not a declaration, it's just an assignment, but it affects\n   * the value of declared variable if the variable it mentioned in the left part.\n   * So, we apply some context-magic here in order to catch reference of variables in the left part.\n   * We switch the context to `lval` and continue traversing through the left branch.\n   * If we then meet some identifier, we mark it as a dependency of its declaration.\n   */\n  AssignmentExpression(this: GraphBuilderState, node: AssignmentExpression) {\n    this.context.push('lval');\n    this.visit<AssignmentExpression['left'], AssignmentExpression>(\n      node.left,\n      node,\n      'left'\n    );\n    this.context.pop();\n\n    this.visit(node.right, node, 'right');\n\n    // The value of an expression depends on the left part.\n    this.graph.addEdge(node, node.left);\n\n    // The left part of an assignment depends on the right part.\n    this.graph.addEdge(node.left, node.right);\n\n    // At the same time, the left part doesn't make any sense without the whole expression.\n    this.graph.addEdge(node.left, node);\n  },\n\n  /*\n   * VariableDeclarator\n   * It would be pretty simple if it weren't used to declare variables from other modules.\n   */\n  VariableDeclarator(this: GraphBuilderState, node: VariableDeclarator) {\n    /*\n     * declared is used for detecting external dependencies in cases like\n     * const { a, b, c } = require('module');\n     *\n     * We are remembering all declared variables in order to use it later in CallExpression visitor\n     */\n    const declared: Array<[Identifier, Identifier | null]> = [];\n    this.meta.set('declared', declared);\n    const unregister = this.scope.addDeclareHandler((identifier, from) =>\n      declared.push([identifier, from])\n    );\n    this.baseVisit(node);\n    this.meta.delete('declared');\n    unregister();\n\n    if (node.init) {\n      // If there is an initialization part, the identifier depends on it.\n      this.graph.addEdge(node.id, node.init);\n    }\n\n    // If we want to evaluate the value of a declared identifier,\n    // we need to evaluate the whole expression.\n    this.graph.addEdge(node.id, node);\n\n    // If a statement is required itself, an id is also required\n    this.graph.addEdge(node, node.id);\n  },\n\n  /*\n   * VariableDeclaration\n   * It's just a wrapper for group of VariableDeclarator.\n   * If one of the declarators is required, the wrapper itself is also required.\n   */\n  VariableDeclaration(this: GraphBuilderState, node: VariableDeclaration) {\n    this.meta.set('kind-of-declaration', node.kind);\n    this.baseVisit(node);\n    node.declarations.forEach((declaration) =>\n      this.graph.addEdge(declaration, node)\n    );\n    this.meta.delete('kind-of-declaration');\n  },\n\n  /*\n   * CallExpression\n   * Do you remember that we have already mentioned it in VariableDeclarator?\n   * It is a simple expression with default behaviour unless it is a `require`.\n   *\n   * Another tricky use case here is functions with side effects (e.g. `Object.defineProperty`).\n   */\n  CallExpression(\n    this: GraphBuilderState,\n    node: CallExpression,\n    parent: Node | null\n  ) {\n    this.baseVisit(node);\n\n    if (t.isIdentifier(node.callee) && node.callee.name === 'require') {\n      // It looks like a module import â€¦\n      const scopeId = this.scope.whereIsDeclared(node.callee);\n      if (scopeId && scopeId !== 'global') {\n        // â€¦ but it is just a user defined function\n        return;\n      }\n\n      const [firstArg] = node.arguments;\n      if (!t.isStringLiteral(firstArg)) {\n        // dynamic import? Maybe someday we can do something about it\n        return;\n      }\n\n      const { value: source } = firstArg;\n      const declared = this.meta.get('declared') as Array<\n        [Identifier, Identifier | null]\n      >;\n      if (!declared) {\n        // Is it a ts reexport?\n        // tslib_1.__exportStar(require(\"./Async\"), exports);\n        if (parent && isTSReexport(parent, this.scope)) {\n          if (!this.graph.imports.has(source)) {\n            this.graph.imports.set(source, []);\n          }\n\n          this.graph.addEdge(parent.callee.object, parent);\n          this.graph.reexports.push(parent.callee.object);\n          this.graph.importTypes.set(source, 'reexport');\n        }\n\n        // This is a standalone `require`\n        return;\n      }\n\n      // Define all declared variables as external dependencies.\n      declared.forEach(([local]) => {\n        // FIXME: var slugify = require('../slugify').default;\n        if (!this.graph.imports.has(source)) {\n          this.graph.imports.set(source, []);\n        }\n\n        if (\n          parent &&\n          t.isMemberExpression(parent) &&\n          t.isIdentifier(parent.property)\n        ) {\n          // An imported function is specified right here.\n          // eg. require('../slugify').default\n          this.graph.imports.get(source)!.push(parent.property);\n        } else {\n          if (\n            t.isCallExpression(parent) &&\n            t.isIdentifier(parent.callee) &&\n            typeof parent.callee.name === 'string'\n          ) {\n            if (parent.callee.name.startsWith('_interopRequireDefault')) {\n              this.graph.importTypes.set(source, 'default');\n            } else if (\n              parent.callee.name.startsWith('_interopRequireWildcard')\n            ) {\n              this.graph.importTypes.set(source, 'wildcard');\n            } else {\n              // What I've missed?\n            }\n          }\n\n          // Do we know the type of import?\n          if (!this.graph.importTypes.has(source)) {\n            // Is it a wildcard reexport? Let's check.\n            const statement = findWildcardReexportStatement(\n              node,\n              local.name,\n              this.graph\n            );\n            if (statement) {\n              this.graph.addEdge(local, statement);\n              this.graph.reexports.push(local);\n              this.graph.importTypes.set(source, 'reexport');\n            }\n          }\n\n          // The whole namespace was imported. We will know later, what exactly we need.\n          // eg. const slugify = require('../slugify');\n          this.graph.importAliases.set(local, source);\n        }\n      });\n\n      return;\n    }\n\n    sideEffects.forEach(([conditions, callback]) => {\n      if (\n        (conditions.callee && !conditions.callee(node.callee)) ||\n        (conditions.arguments && !conditions.arguments(node.arguments))\n      ) {\n        return;\n      }\n\n      callback(node, this);\n    });\n\n    getAffectedNodes(node, this).forEach((affectedNode) => {\n      this.graph.addEdge(affectedNode, node);\n      if (t.isIdentifier(affectedNode)) {\n        this.graph.addEdge(\n          this.scope.getDeclaration(affectedNode)!,\n          affectedNode\n        );\n      }\n    });\n  },\n\n  /*\n   * SequenceExpression\n   * It is a special case of expression in which the value of the whole\n   * expression depends only on the last subexpression in the list.\n   * The rest of the subexpressions can be omitted if they don't have dependent nodes.\n   *\n   * Example:\n   * const a = (1, 2, b = 3, 4, b + 2); // `a` will be equal 5\n   */\n  SequenceExpression(this: GraphBuilderState, node: SequenceExpression) {\n    // Sequence value depends on only last expression in the list\n    this.baseVisit(node, true);\n    if (node.expressions.length > 0) {\n      this.graph.addEdge(node, node.expressions[node.expressions.length - 1]);\n    }\n  },\n};\n\nexport const identifierHandlers: IdentifierHandlers = {\n  declare: [\n    ['CatchClause', 'param'],\n    ['Function', 'params'],\n    ['FunctionExpression', 'id'],\n    ['RestElement', 'argument'],\n    ['ThrowStatement', 'argument'],\n    ['VariableDeclarator', 'id'],\n  ],\n  keep: [['ObjectProperty', 'key']],\n  refer: [\n    ['ArrayExpression', 'elements'],\n    ['AssignmentExpression', 'left', 'right'],\n    ['BinaryExpression', 'left', 'right'],\n    ['CallExpression', 'arguments', 'callee'],\n    ['ConditionalExpression', 'test', 'consequent', 'alternate'],\n    ['ForInStatement', 'right'],\n    ['Function', 'body'],\n    ['IfStatement', 'test'],\n    ['LogicalExpression', 'left', 'right'],\n    ['NewExpression', 'arguments', 'callee'],\n    ['ObjectProperty', 'value'],\n    ['ReturnStatement', 'argument'],\n    ['SequenceExpression', 'expressions'],\n    ['SwitchStatement', 'discriminant'],\n    ['UnaryExpression', 'argument'],\n    ['UpdateExpression', 'argument'],\n    ['VariableDeclarator', 'init'],\n  ],\n};\n"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,aAA3B;AA0BA,SAASC,IAAT,QAAqB,uBAArB;AAIA,OAAOC,YAAP,MAAyB,UAAzB;;AAGA,SAASC,YAAT,CACEC,IADF,EAEEC,IAFF,EAGsB;EACpB,OACEL,CAAC,CAACG,YAAF,CAAeC,IAAf,MACCC,IAAI,KAAKC,SAAT,KACEC,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAI,CAACI,QAAL,CAAcL,IAAI,CAACC,IAAnB,CAAtB,GAAiDD,IAAI,CAACC,IAAL,KAAcA,IADjE,CADD,CADF;AAKD;;AAUD,MAAMK,WAAyB,GAAG,CAChC,CACE;AACA;EACEC,MAAM,EAAGP,IAAD,IACNJ,CAAC,CAACY,kBAAF,CAAqBR,IAArB,KACAJ,CAAC,CAACG,YAAF,CAAeC,IAAI,CAACS,QAApB,CADA,IAEAT,IAAI,CAACS,QAAL,CAAcR,IAAd,KAAuB;AAJ3B,CAFF,EAQE,CAACD,IAAD,EAAOU,KAAP,KAAiBA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBZ,IAAI,CAACa,SAAL,CAAe,CAAf,CAApB,EAAuCb,IAAvC,CARnB,CADgC,CAAlC;;AAaA,SAASc,SAAT,CAAmBd,IAAnB,EAA+C;EAC7C,IACEJ,CAAC,CAACmB,oBAAF,CAAuBf,IAAI,CAACO,MAA5B,KACAP,IAAI,CAACO,MAAL,CAAYS,WAAZ,CAAwBC,MAAxB,KAAmC,CAFrC,EAGE;IACA,MAAM,CAACC,KAAD,EAAQC,MAAR,IAAkBnB,IAAI,CAACO,MAAL,CAAYS,WAApC;;IACA,IAAIpB,CAAC,CAACwB,gBAAF,CAAmBF,KAAnB,KAA6BA,KAAK,CAACG,KAAN,KAAgB,CAAjD,EAAoD;MAClD,OAAOF,MAAP;IACD;EACF;;EAED,OAAOnB,IAAI,CAACO,MAAZ;AACD;;AAED,SAASe,OAAT,CAAiBtB,IAAjB,EAA+BuB,KAA/B,EAAoD;EAClD,IAAI,CAAC3B,CAAC,CAACG,YAAF,CAAeC,IAAf,CAAL,EAA2B;IACzB,OAAO,KAAP;EACD;;EAED,MAAMwB,WAAW,GAAGD,KAAK,CAACE,cAAN,CAAqBzB,IAArB,CAApB;EACA,OAAOJ,CAAC,CAACG,YAAF,CAAeyB,WAAf,KAA+BA,WAAW,CAACvB,IAAZ,KAAqB,SAA3D;AACD;;AAED,SAASyB,YAAT,CACE1B,IADF,EAEEuB,KAFF,EAGyD;EACvD,IAAI,CAAC3B,CAAC,CAAC+B,gBAAF,CAAmB3B,IAAnB,CAAL,EAA+B;IAC7B,OAAO,KAAP;EACD;;EAED,MAAM;IACJO,MADI;IAEJM,SAAS,EAAE,GAAGe,iBAAH;EAFP,IAGF5B,IAHJ;;EAIA,IACE,CAACJ,CAAC,CAACG,YAAF,CAAe6B,iBAAf,CAAD,IACAA,iBAAiB,CAAC3B,IAAlB,KAA2B,SAD3B,IAEAsB,KAAK,CAACE,cAAN,CAAqBG,iBAArB,MACE9B,YAAY,CAAC+B,uBAJjB,EAKE;IACA,OAAO,KAAP;EACD;;EAED,IAAI,CAACjC,CAAC,CAACY,kBAAF,CAAqBD,MAArB,CAAL,EAAmC;IACjC,OAAO,KAAP;EACD;;EAED,MAAM;IAAEuB,MAAF;IAAUrB;EAAV,IAAuBF,MAA7B;;EACA,IAAI,CAACX,CAAC,CAACG,YAAF,CAAeU,QAAf,CAAD,IAA6BA,QAAQ,CAACR,IAAT,KAAkB,cAAnD,EAAmE;IACjE,OAAO,KAAP;EACD;;EAED,OAAOqB,OAAO,CAACQ,MAAD,EAASP,KAAT,CAAd;AACD;;AAED,SAASQ,6BAAT,CACE/B,IADF,EAEEgC,cAFF,EAGErB,KAHF,EAIsB;EACpB,IAAI,CAACf,CAAC,CAACG,YAAF,CAAeC,IAAI,CAACO,MAApB,CAAD,IAAgCP,IAAI,CAACO,MAAL,CAAYN,IAAZ,KAAqB,SAAzD,EACE,OAAO,IAAP;EAEF,MAAMgC,UAAU,GAAGtB,KAAK,CAACuB,SAAN,CAAgBlC,IAAhB,CAAnB;EACA,IAAI,CAACJ,CAAC,CAACuC,oBAAF,CAAuBF,UAAvB,CAAL,EAAyC,OAAO,IAAP;EAEzC,MAAMT,WAAW,GAAGb,KAAK,CAACuB,SAAN,CAAgBD,UAAhB,CAApB;EACA,IAAI,CAACrC,CAAC,CAACwC,qBAAF,CAAwBZ,WAAxB,CAAL,EAA2C,OAAO,IAAP;EAE3C,MAAMa,OAAO,GAAG1B,KAAK,CAACuB,SAAN,CAAgBV,WAAhB,CAAhB;EACA,IAAI,CAAC5B,CAAC,CAAC0C,SAAF,CAAYD,OAAZ,CAAL,EAA2B,OAAO,IAAP,CAXP,CAapB;EACA;;EACA,OACEA,OAAO,CAACE,IAAR,CAAaC,IAAb,CAAmBC,SAAD,IAAe;IAC/B;AACN;AACA;IAEM,IAAI,CAAC7C,CAAC,CAAC8C,qBAAF,CAAwBD,SAAxB,CAAL,EAAyC,OAAO,KAAP;IAEzC,MAAM;MAAEE;IAAF,IAAiBF,SAAvB;IACA,IAAI,CAAC7C,CAAC,CAAC+B,gBAAF,CAAmBgB,UAAnB,CAAL,EAAqC,OAAO,KAAP;IAErC,MAAM;MAAEpC;IAAF,IAAaoC,UAAnB;IACA,IAAI,CAAC/C,CAAC,CAACY,kBAAF,CAAqBD,MAArB,CAAL,EAAmC,OAAO,KAAP;IAEnC,MAAM;MAAEuB,MAAF;MAAUrB;IAAV,IAAuBF,MAA7B;IAEA,IAAI,CAACR,YAAY,CAACU,QAAD,EAAW,SAAX,CAAjB,EAAwC,OAAO,KAAP;IAExC,IAAI,CAACb,CAAC,CAAC+B,gBAAF,CAAmBG,MAAnB,CAAL,EAAiC,OAAO,KAAP,CAjBF,CAmB/B;;IACA,IACE,CAAClC,CAAC,CAACY,kBAAF,CAAqBsB,MAAM,CAACvB,MAA5B,CAAD,IACA,CAACR,YAAY,CAAC+B,MAAM,CAACvB,MAAP,CAAcuB,MAAf,EAAuB,QAAvB,CADb,IAEA,CAAC/B,YAAY,CAAC+B,MAAM,CAACvB,MAAP,CAAcE,QAAf,EAAyB,MAAzB,CAHf,EAKE,OAAO,KAAP,CAzB6B,CA2B/B;;IACA,MAAM,CAACmC,QAAD,IAAad,MAAM,CAACjB,SAA1B;IACA,OAAOd,YAAY,CAAC6C,QAAD,EAAWZ,cAAX,CAAnB;EACD,CA9BD,KA8BM,IA/BR;AAiCD;;AAED,SAASa,sBAAT,CACEtC,MADF,EAEEG,KAFF,EAGW;EACT,MAAMoC,OAAO,GAAG,CACd,QADc,EAEd,gBAFc,EAGd,kBAHc,EAId,QAJc,EAKd,SALc,CAAhB;;EAOA,IACElD,CAAC,CAACY,kBAAF,CAAqBD,MAArB,KACAR,YAAY,CAACQ,MAAM,CAACuB,MAAR,EAAgB,QAAhB,CADZ,IAEA/B,YAAY,CAACQ,MAAM,CAACE,QAAR,EAAkBqC,OAAlB,CAHd,EAIE;IACA;IACA,OAAO,IAAP;EACD;;EAED,IACElD,CAAC,CAACY,kBAAF,CAAqBD,MAArB,KACAR,YAAY,CAACQ,MAAM,CAACE,QAAR,EAAkB,SAAlB,CADZ,IAEAV,YAAY,CAACQ,MAAM,CAACuB,MAAR,CAHd,EAIE;IACA;IACA,MAAMN,WAAW,GAAGd,KAAK,CAACa,KAAN,CAAYE,cAAZ,CAA2BlB,MAAM,CAACuB,MAAlC,CAApB;IACA,IAAI,CAACN,WAAD,IAAgB,CAACzB,YAAY,CAACyB,WAAD,CAAjC,EAAgD,OAAO,KAAP;IAChD,MAAMuB,MAAM,GAAGrC,KAAK,CAACC,KAAN,CAAYqC,aAAZ,CAA0BC,GAA1B,CAA8BzB,WAA9B,CAAf;IACA,OAAOsB,OAAO,CAACI,IAAR,CACJC,MAAD,IAAa,0BAAyBA,MAAO,EAAjC,KAAuCJ,MAD9C,CAAP;EAGD;;EAED,OAAO,KAAP;AACD;AAED;AACA;AACA;;;AACA,SAASK,gBAAT,CAA0BpD,IAA1B,EAAsCU,KAAtC,EAAwE;EACtE;EACA,MAAMH,MAAM,GAAGX,CAAC,CAAC+B,gBAAF,CAAmB3B,IAAnB,IAA2Bc,SAAS,CAACd,IAAD,CAApC,GAA6C,IAA5D;;EACA,IAAIJ,CAAC,CAAC+B,gBAAF,CAAmB3B,IAAnB,KAA4B6C,sBAAsB,CAACtC,MAAD,EAASG,KAAT,CAAtD,EAAuE;IACrE,MAAM,CAAC2C,GAAD,EAAM5C,QAAN,IAAkBT,IAAI,CAACa,SAA7B;;IACA,IAAI,CAACjB,CAAC,CAACG,YAAF,CAAesD,GAAf,CAAL,EAA0B;MACxB,OAAO,EAAP;IACD;;IAED,IACE3C,KAAK,CAACa,KAAN,CAAYE,cAAZ,CAA2B4B,GAA3B,MAAoCvD,YAAY,CAAC+B,uBADnD,EAEE;MACA,OAAO,CAAC7B,IAAI,CAACa,SAAL,CAAe,CAAf,CAAD,CAAP;IACD;;IAED,IAAIjB,CAAC,CAAC0D,eAAF,CAAkB7C,QAAlB,CAAJ,EAAiC;MAC/B,IAAIA,QAAQ,CAACY,KAAT,KAAmB,YAAvB,EAAqC;QACnC,OAAO,CAACrB,IAAI,CAACa,SAAL,CAAe,CAAf,CAAD,CAAP;MACD;;MAEDH,KAAK,CAACC,KAAN,CAAY4C,SAAZ,CAAsB9C,QAAQ,CAACY,KAA/B,EAAsCrB,IAAtC;IACD;EACF;;EAED,OAAO,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwD,UAAT,CACEf,SADF,EAME;EACA,MAAM;IAAEE;EAAF,IAAiBF,SAAvB;;EACA,IAAI,CAAC7C,CAAC,CAAC+B,gBAAF,CAAmBgB,UAAnB,CAAD,IAAmCA,UAAU,CAAC9B,SAAX,CAAqBI,MAArB,KAAgC,CAAvE,EAA0E;IACxE,OAAO,KAAP;EACD;;EAED,MAAM,CAACwC,GAAD,IAAQd,UAAU,CAAC9B,SAAzB;;EACA,IAAI,CAACjB,CAAC,CAAC8D,mBAAF,CAAsBD,GAAtB,CAAD,IAA+BA,GAAG,CAACE,QAAJ,KAAiB,IAApD,EAA0D;IACxD,OAAO,KAAP;EACD;;EAED,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAkBJ,GAAxB;EACA,OAAO7D,CAAC,CAACG,YAAF,CAAe6D,IAAf,KAAwBhE,CAAC,CAACkE,sBAAF,CAAyBD,KAAzB,CAA/B;AACD;;AAED,OAAO,MAAME,QAAkB,GAAG;EAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmB,CAA0BhE,IAA1B,EAAqD;IACtE,KAAKiE,SAAL,CAAejE,IAAf;IAEA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC2C,UAA9B;IACA,KAAKhC,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC2C,UAAxB,EAAoC3C,IAApC;;IAEA,IAAIwD,UAAU,CAACxD,IAAD,CAAd,EAAsB;MACpB,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC2C,UAAL,CAAgB9B,SAAhB,CAA0B,CAA1B,EAA6BgD,KAAhD,EAAuD7D,IAAvD;IACD;EACF,CAzB+B;;EA2BhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkE,QAAQ,CAA0BlE,IAA1B,EAA8C;IACpD,MAAMmE,WAAW,GAAG,KAAKC,OAAL,CAAcC,UAAD,IAC/B,KAAK1D,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBqE,UAAzB,CADkB,CAApB;IAGA,KAAKJ,SAAL,CAAejE,IAAf,EAAqB,IAArB,EAJoD,CAIxB;;IAC5BmE,WAAW;IAEX,KAAKxD,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACuC,IAA9B;IAEAvC,IAAI,CAACsE,MAAL,CAAYC,OAAZ,CAAqBC,KAAD,IAAW,KAAK7D,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAACuC,IAAxB,EAA8BiC,KAA9B,CAA/B;;IACA,IAAI5E,CAAC,CAAC6E,qBAAF,CAAwBzE,IAAxB,KAAiCA,IAAI,CAAC0E,EAA1C,EAA8C;MAC5C;MACA,KAAK/D,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC0E,EAAxB,EAA4B1E,IAA5B;IACD;;IAED,IACEJ,CAAC,CAAC+E,oBAAF,CAAuB3E,IAAvB,KACAA,IAAI,CAAC0E,EAAL,KAAY,IADZ,IAEA1E,IAAI,CAAC0E,EAAL,KAAYxE,SAHd,EAIE;MACA;MACA,KAAKS,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC0E,EAA9B;IACD;;IAED,IAAI9E,CAAC,CAAC6E,qBAAF,CAAwBzE,IAAxB,KAAiCA,IAAI,CAAC0E,EAA1C,EAA8C;MAC5C,KAAK/D,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC0E,EAA9B;IACD;EACF,CA9D+B;;EAgEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,KAAK,CAA0B5E,IAA1B,EAAuC;IAC1C,KAAKiE,SAAL,CAAejE,IAAf;;IAEA,IAAIJ,CAAC,CAAC0C,SAAF,CAAYtC,IAAZ,CAAJ,EAAuB;MACrB,MAAM6E,kBAAkB,GAAG,KAAKtD,KAAL,CAAWE,cAAX,CAA0B,gBAA1B,CAA3B;MACA,KAAKd,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyB6E,kBAAzB;MACA7E,IAAI,CAAC8E,UAAL,CAAgBP,OAAhB,CAAyBQ,SAAD,IACtB,KAAKpE,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyB+E,SAAzB,CADF;IAGD;EACF,CA1F+B;;EA4FhCC,SAAS,CAA0BhF,IAA1B,EAA2C;IAClD,KAAKiE,SAAL,CAAejE,IAAf;IACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACqB,KAA9B;EACD,CA/F+B;;EAiGhC;AACF;AACA;AACA;AACA;AACA;EACE4D,YAAY,CAA0BjF,IAA1B,EAA8C;IACxD,KAAKiE,SAAL,CAAejE,IAAf;IACA,CAACA,IAAI,CAACkF,OAAN,EAAelF,IAAI,CAACmF,SAApB,EAA+BZ,OAA/B,CAAwC9B,SAAD,IAAe;MACpD,IAAIA,SAAJ,EAAe;QACb,KAAK9B,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAACoF,KAAxB,EAA+B3C,SAA/B;QACA,KAAK9B,KAAL,CAAWC,OAAX,CAAmB6B,SAAnB,EAA8BzC,IAAI,CAACoF,KAAnC;MACD;IACF,CALD;EAMD,CA/G+B;;EAiHhCC,WAAW,CAA0BrF,IAA1B,EAA6C;IACtD,KAAKiE,SAAL,CAAejE,IAAf;IAEA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACuC,IAA9B;EACD,CArH+B;;EAuHhC+C,WAAW,CAA0BtF,IAA1B,EAA6C;IACtD,KAAKiE,SAAL,CAAejE,IAAf;IACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACuF,UAA9B;IACA,KAAK5E,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACwF,IAA9B;EACD,CA3H+B;;EA6HhC;AACF;AACA;AACA;AACA;AACA;EACEC,cAAc,CAA0BzF,IAA1B,EAAgD;IAC5D,KAAKiE,SAAL,CAAejE,IAAf;IACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACwF,IAA9B;EACD,CAtI+B;;EAwIhCE,UAAU,CAA0B1F,IAA1B,EAA4C;IACpD,KAAKiE,SAAL,CAAejE,IAAf;IACAA,IAAI,CAACuF,UAAL,CAAgBhB,OAAhB,CAAyB9B,SAAD,IAAe,KAAK9B,KAAL,CAAWC,OAAX,CAAmB6B,SAAnB,EAA8BzC,IAA9B,CAAvC;;IACA,IAAIA,IAAI,CAACwF,IAAT,EAAe;MACb,KAAK7E,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACwF,IAA9B;IACD;EACF,CA9I+B;;EAgJhCG,eAAe,CAA0B3F,IAA1B,EAAiD;IAC9D,KAAKiE,SAAL,CAAejE,IAAf;IACAA,IAAI,CAAC4F,KAAL,CAAWrB,OAAX,CAAoBsB,CAAD,IAAO,KAAKlF,KAAL,CAAWC,OAAX,CAAmBiF,CAAnB,EAAsB7F,IAAtB,CAA1B;IACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC8F,YAA9B;EACD,CApJ+B;;EAsJhCC,YAAY,CAA0B/F,IAA1B,EAA8C;IACxD,KAAKiE,SAAL,CAAejE,IAAf;IAEA,CAACA,IAAI,CAACgG,IAAN,EAAYhG,IAAI,CAACwF,IAAjB,EAAuBxF,IAAI,CAACiG,MAA5B,EAAoCjG,IAAI,CAACuC,IAAzC,EAA+CgC,OAA/C,CAAwD2B,KAAD,IAAW;MAChE,IAAIA,KAAJ,EAAW;QACT,KAAKvF,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBkG,KAAzB;MACD;IACF,CAJD;EAKD,CA9J+B;;EAgKhC;AACF;AACA;AACA;EACEC,cAAc,CAA0BnG,IAA1B,EAAgD;IAC5D,KAAKiE,SAAL,CAAejE,IAAf;;IAEA,IAAIA,IAAI,CAACuC,IAAT,EAAe;MACb,KAAK5B,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACuC,IAA9B;MACA,KAAK5B,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAACuC,IAAxB,EAA8BvC,IAAI,CAAC4D,IAAnC;IACD;;IAED,KAAKjD,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC4D,IAAxB,EAA8B5D,IAAI,CAAC6D,KAAnC;EACD,CA7K+B;;EA+KhC;AACF;AACA;AACA;AACA;EACEuC,cAAc,CAA0BpG,IAA1B,EAAgD;IAC5D,KAAKiE,SAAL,CAAejE,IAAf;;IAEA,IACE,EAAEJ,CAAC,CAACyG,gBAAF,CAAmBrG,IAAnB,KAA4BJ,CAAC,CAAC0G,mBAAF,CAAsBtG,IAAtB,CAA9B,KACAA,IAAI,CAAC4C,QAFP,EAGE;MACA,KAAKjC,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC4C,QAA9B;IACD;;IAED,MAAM2D,mBAAmB,GAAG1G,IAAI,CAAC,KAAK2G,OAAN,CAAhC;IACA,KAAK7F,KAAL,CAAWC,OAAX,CAAmB2F,mBAAnB,EAAwCvG,IAAxC;EACD,CAhM+B;;EAkMhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyG,gBAAgB,CAA0BzG,IAA1B,EAAkD;IAChE,KAAK0G,OAAL,CAAaC,IAAb,CAAkB,YAAlB;IACA,KAAK1C,SAAL,CAAejE,IAAf;IACAA,IAAI,CAAC4G,UAAL,CAAgBrC,OAAhB,CAAyBsC,IAAD,IAAU;MAChC,KAAKlG,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyB6G,IAAzB;;MACA,IAAIjH,CAAC,CAACkH,cAAF,CAAiBD,IAAjB,CAAJ,EAA4B;QAC1B,KAAKlG,KAAL,CAAWC,OAAX,CAAmBiG,IAAnB,EAAyBA,IAAI,CAACE,GAA9B;QACA,KAAKpG,KAAL,CAAWC,OAAX,CAAmBiG,IAAnB,EAAyBA,IAAI,CAACtE,IAA9B;MACD,CAHD,MAGO,IAAI3C,CAAC,CAACoH,gBAAF,CAAmBH,IAAnB,CAAJ,EAA8B;QACnC,KAAKlG,KAAL,CAAWC,OAAX,CAAmBiG,IAAnB,EAAyBA,IAAI,CAACE,GAA9B;QACA,KAAKpG,KAAL,CAAWC,OAAX,CAAmBiG,IAAnB,EAAyBA,IAAI,CAACxF,KAA9B;MACD,CAHM,MAGA,IAAIzB,CAAC,CAACqH,eAAF,CAAkBJ,IAAlB,CAAJ,EAA6B;QAClC,KAAKlG,KAAL,CAAWC,OAAX,CAAmBiG,IAAnB,EAAyBA,IAAI,CAACjE,QAA9B;MACD;IACF,CAXD;IAYA,KAAK8D,OAAL,CAAaQ,GAAb;EACD,CA5N+B;;EA8NhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,gBAAgB,CAA0BnH,IAA1B,EAAkD;IAChE,IAAI,KAAKoH,KAAL,CAAWpH,IAAI,CAAC8B,MAAhB,EAAwB9B,IAAxB,EAA8B,QAA9B,MAA4C,QAAhD,EAA0D;MACxD,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC8B,MAA9B;IACD;;IAED,KAAK4E,OAAL,CAAaC,IAAb,CAAkB,YAAlB;;IACA,IAAI,KAAKS,KAAL,CAAWpH,IAAI,CAACS,QAAhB,EAA0BT,IAA1B,EAAgC,UAAhC,MAAgD,QAApD,EAA8D;MAC5D,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACS,QAA9B;IACD;;IACD,KAAKiG,OAAL,CAAaQ,GAAb;IAEA,KAAKvG,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC8B,MAAxB,EAAgC9B,IAAhC;;IAEA,IACED,YAAY,CAACC,IAAI,CAAC8B,MAAN,EAAc,SAAd,CAAZ,IACA,KAAKP,KAAL,CAAWE,cAAX,CAA0BzB,IAAI,CAAC8B,MAA/B,MACEhC,YAAY,CAAC+B,uBAHjB,EAIE;MACA;MACA,KAAKlB,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC8B,MAA9B;MACA,KAAKnB,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACS,QAA9B;MAEA,MAAM4G,MAAM,GAAGxH,IAAI,CAAC,KAAK6G,OAAN,CAAJ,KAAuB,MAAtC;;MACA,IAAIW,MAAJ,EAAY;QACV,KAAK9F,KAAL,CAAW+F,OAAX,CAAmBtH,IAAnB,EAAyB,KAAzB;MACD,CAFD,MAEO;QACL,MAAMwB,WAAW,GAAG,KAAKD,KAAL,CAAWgG,YAAX,CAAwBvH,IAAxB,CAApB;QACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBwB,WAAzB;MACD;;MAED;IACD;;IAED,IACE5B,CAAC,CAACG,YAAF,CAAeC,IAAI,CAAC8B,MAApB,MACElC,CAAC,CAACG,YAAF,CAAeC,IAAI,CAACS,QAApB,KAAiC,CAACT,IAAI,CAACwH,QAAxC,IACC5H,CAAC,CAAC0D,eAAF,CAAkBtD,IAAI,CAACS,QAAvB,CAFF,CADF,EAIE;MACA;MACA,MAAMe,WAAW,GAAG,KAAKD,KAAL,CAAWE,cAAX,CAA0BzB,IAAI,CAAC8B,MAA/B,CAApB;;MACA,IACElC,CAAC,CAACG,YAAF,CAAeyB,WAAf,KACA,KAAKb,KAAL,CAAWqC,aAAX,CAAyByE,GAAzB,CAA6BjG,WAA7B,CAFF,EAGE;QACA;QACA,MAAMuB,MAAM,GAAG,KAAKpC,KAAL,CAAWqC,aAAX,CAAyBC,GAAzB,CAA6BzB,WAA7B,CAAf;QACA,KAAKb,KAAL,CAAW+G,OAAX,CAAmBzE,GAAnB,CAAuBF,MAAvB,EAAgC4D,IAAhC,CAAqC3G,IAAI,CAACS,QAA1C;MACD;IACF;EACF,CA7R+B;;EA+RhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkH,oBAAoB,CAA0B3H,IAA1B,EAAsD;IACxE,KAAK0G,OAAL,CAAaC,IAAb,CAAkB,MAAlB;IACA,KAAKS,KAAL,CACEpH,IAAI,CAAC4D,IADP,EAEE5D,IAFF,EAGE,MAHF;IAKA,KAAK0G,OAAL,CAAaQ,GAAb;IAEA,KAAKE,KAAL,CAAWpH,IAAI,CAAC6D,KAAhB,EAAuB7D,IAAvB,EAA6B,OAA7B,EATwE,CAWxE;;IACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC4D,IAA9B,EAZwE,CAcxE;;IACA,KAAKjD,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC4D,IAAxB,EAA8B5D,IAAI,CAAC6D,KAAnC,EAfwE,CAiBxE;;IACA,KAAKlD,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC4D,IAAxB,EAA8B5D,IAA9B;EACD,CA3T+B;;EA6ThC;AACF;AACA;AACA;EACE4H,kBAAkB,CAA0B5H,IAA1B,EAAoD;IACpE;AACJ;AACA;AACA;AACA;AACA;IACI,MAAM6H,QAAgD,GAAG,EAAzD;IACA,KAAKC,IAAL,CAAUC,GAAV,CAAc,UAAd,EAA0BF,QAA1B;IACA,MAAMG,UAAU,GAAG,KAAKzG,KAAL,CAAW0G,iBAAX,CAA6B,CAACC,UAAD,EAAaC,IAAb,KAC9CN,QAAQ,CAAClB,IAAT,CAAc,CAACuB,UAAD,EAAaC,IAAb,CAAd,CADiB,CAAnB;IAGA,KAAKlE,SAAL,CAAejE,IAAf;IACA,KAAK8H,IAAL,CAAUM,MAAV,CAAiB,UAAjB;IACAJ,UAAU;;IAEV,IAAIhI,IAAI,CAACgG,IAAT,EAAe;MACb;MACA,KAAKrF,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC0E,EAAxB,EAA4B1E,IAAI,CAACgG,IAAjC;IACD,CAnBmE,CAqBpE;IACA;;;IACA,KAAKrF,KAAL,CAAWC,OAAX,CAAmBZ,IAAI,CAAC0E,EAAxB,EAA4B1E,IAA5B,EAvBoE,CAyBpE;;IACA,KAAKW,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAAC0E,EAA9B;EACD,CA5V+B;;EA8VhC;AACF;AACA;AACA;AACA;EACE2D,mBAAmB,CAA0BrI,IAA1B,EAAqD;IACtE,KAAK8H,IAAL,CAAUC,GAAV,CAAc,qBAAd,EAAqC/H,IAAI,CAACsI,IAA1C;IACA,KAAKrE,SAAL,CAAejE,IAAf;IACAA,IAAI,CAACuI,YAAL,CAAkBhE,OAAlB,CAA2B/C,WAAD,IACxB,KAAKb,KAAL,CAAWC,OAAX,CAAmBY,WAAnB,EAAgCxB,IAAhC,CADF;IAGA,KAAK8H,IAAL,CAAUM,MAAV,CAAiB,qBAAjB;EACD,CA1W+B;;EA4WhC;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,cAAc,CAEZxI,IAFY,EAGZyI,MAHY,EAIZ;IACA,KAAKxE,SAAL,CAAejE,IAAf;;IAEA,IAAIJ,CAAC,CAACG,YAAF,CAAeC,IAAI,CAACO,MAApB,KAA+BP,IAAI,CAACO,MAAL,CAAYN,IAAZ,KAAqB,SAAxD,EAAmE;MACjE;MACA,MAAMyI,OAAO,GAAG,KAAKnH,KAAL,CAAWoH,eAAX,CAA2B3I,IAAI,CAACO,MAAhC,CAAhB;;MACA,IAAImI,OAAO,IAAIA,OAAO,KAAK,QAA3B,EAAqC;QACnC;QACA;MACD;;MAED,MAAM,CAACE,QAAD,IAAa5I,IAAI,CAACa,SAAxB;;MACA,IAAI,CAACjB,CAAC,CAAC0D,eAAF,CAAkBsF,QAAlB,CAAL,EAAkC;QAChC;QACA;MACD;;MAED,MAAM;QAAEvH,KAAK,EAAE0B;MAAT,IAAoB6F,QAA1B;MACA,MAAMf,QAAQ,GAAG,KAAKC,IAAL,CAAU7E,GAAV,CAAc,UAAd,CAAjB;;MAGA,IAAI,CAAC4E,QAAL,EAAe;QACb;QACA;QACA,IAAIY,MAAM,IAAI/G,YAAY,CAAC+G,MAAD,EAAS,KAAKlH,KAAd,CAA1B,EAAgD;UAC9C,IAAI,CAAC,KAAKZ,KAAL,CAAW+G,OAAX,CAAmBD,GAAnB,CAAuB1E,MAAvB,CAAL,EAAqC;YACnC,KAAKpC,KAAL,CAAW+G,OAAX,CAAmBK,GAAnB,CAAuBhF,MAAvB,EAA+B,EAA/B;UACD;;UAED,KAAKpC,KAAL,CAAWC,OAAX,CAAmB6H,MAAM,CAAClI,MAAP,CAAcuB,MAAjC,EAAyC2G,MAAzC;UACA,KAAK9H,KAAL,CAAWkI,SAAX,CAAqBlC,IAArB,CAA0B8B,MAAM,CAAClI,MAAP,CAAcuB,MAAxC;UACA,KAAKnB,KAAL,CAAWmI,WAAX,CAAuBf,GAAvB,CAA2BhF,MAA3B,EAAmC,UAAnC;QACD,CAXY,CAab;;;QACA;MACD,CAjCgE,CAmCjE;;;MACA8E,QAAQ,CAACtD,OAAT,CAAiB,CAAC,CAACwE,KAAD,CAAD,KAAa;QAC5B;QACA,IAAI,CAAC,KAAKpI,KAAL,CAAW+G,OAAX,CAAmBD,GAAnB,CAAuB1E,MAAvB,CAAL,EAAqC;UACnC,KAAKpC,KAAL,CAAW+G,OAAX,CAAmBK,GAAnB,CAAuBhF,MAAvB,EAA+B,EAA/B;QACD;;QAED,IACE0F,MAAM,IACN7I,CAAC,CAACY,kBAAF,CAAqBiI,MAArB,CADA,IAEA7I,CAAC,CAACG,YAAF,CAAe0I,MAAM,CAAChI,QAAtB,CAHF,EAIE;UACA;UACA;UACA,KAAKE,KAAL,CAAW+G,OAAX,CAAmBzE,GAAnB,CAAuBF,MAAvB,EAAgC4D,IAAhC,CAAqC8B,MAAM,CAAChI,QAA5C;QACD,CARD,MAQO;UACL,IACEb,CAAC,CAAC+B,gBAAF,CAAmB8G,MAAnB,KACA7I,CAAC,CAACG,YAAF,CAAe0I,MAAM,CAAClI,MAAtB,CADA,IAEA,OAAOkI,MAAM,CAAClI,MAAP,CAAcN,IAArB,KAA8B,QAHhC,EAIE;YACA,IAAIwI,MAAM,CAAClI,MAAP,CAAcN,IAAd,CAAmB+I,UAAnB,CAA8B,wBAA9B,CAAJ,EAA6D;cAC3D,KAAKrI,KAAL,CAAWmI,WAAX,CAAuBf,GAAvB,CAA2BhF,MAA3B,EAAmC,SAAnC;YACD,CAFD,MAEO,IACL0F,MAAM,CAAClI,MAAP,CAAcN,IAAd,CAAmB+I,UAAnB,CAA8B,yBAA9B,CADK,EAEL;cACA,KAAKrI,KAAL,CAAWmI,WAAX,CAAuBf,GAAvB,CAA2BhF,MAA3B,EAAmC,UAAnC;YACD,CAJM,MAIA,CACL;YACD;UACF,CAfI,CAiBL;;;UACA,IAAI,CAAC,KAAKpC,KAAL,CAAWmI,WAAX,CAAuBrB,GAAvB,CAA2B1E,MAA3B,CAAL,EAAyC;YACvC;YACA,MAAMN,SAAS,GAAGV,6BAA6B,CAC7C/B,IAD6C,EAE7C+I,KAAK,CAAC9I,IAFuC,EAG7C,KAAKU,KAHwC,CAA/C;;YAKA,IAAI8B,SAAJ,EAAe;cACb,KAAK9B,KAAL,CAAWC,OAAX,CAAmBmI,KAAnB,EAA0BtG,SAA1B;cACA,KAAK9B,KAAL,CAAWkI,SAAX,CAAqBlC,IAArB,CAA0BoC,KAA1B;cACA,KAAKpI,KAAL,CAAWmI,WAAX,CAAuBf,GAAvB,CAA2BhF,MAA3B,EAAmC,UAAnC;YACD;UACF,CA9BI,CAgCL;UACA;;;UACA,KAAKpC,KAAL,CAAWqC,aAAX,CAAyB+E,GAAzB,CAA6BgB,KAA7B,EAAoChG,MAApC;QACD;MACF,CAlDD;MAoDA;IACD;;IAEDzC,WAAW,CAACiE,OAAZ,CAAoB,CAAC,CAAC0E,UAAD,EAAaC,QAAb,CAAD,KAA4B;MAC9C,IACGD,UAAU,CAAC1I,MAAX,IAAqB,CAAC0I,UAAU,CAAC1I,MAAX,CAAkBP,IAAI,CAACO,MAAvB,CAAvB,IACC0I,UAAU,CAACpI,SAAX,IAAwB,CAACoI,UAAU,CAACpI,SAAX,CAAqBb,IAAI,CAACa,SAA1B,CAF5B,EAGE;QACA;MACD;;MAEDqI,QAAQ,CAAClJ,IAAD,EAAO,IAAP,CAAR;IACD,CATD;IAWAoD,gBAAgB,CAACpD,IAAD,EAAO,IAAP,CAAhB,CAA6BuE,OAA7B,CAAsC4E,YAAD,IAAkB;MACrD,KAAKxI,KAAL,CAAWC,OAAX,CAAmBuI,YAAnB,EAAiCnJ,IAAjC;;MACA,IAAIJ,CAAC,CAACG,YAAF,CAAeoJ,YAAf,CAAJ,EAAkC;QAChC,KAAKxI,KAAL,CAAWC,OAAX,CACE,KAAKW,KAAL,CAAWE,cAAX,CAA0B0H,YAA1B,CADF,EAEEA,YAFF;MAID;IACF,CARD;EASD,CAze+B;;EA2ehC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,CAA0BpJ,IAA1B,EAAoD;IACpE;IACA,KAAKiE,SAAL,CAAejE,IAAf,EAAqB,IAArB;;IACA,IAAIA,IAAI,CAACgB,WAAL,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B,KAAKN,KAAL,CAAWC,OAAX,CAAmBZ,IAAnB,EAAyBA,IAAI,CAACgB,WAAL,CAAiBhB,IAAI,CAACgB,WAAL,CAAiBC,MAAjB,GAA0B,CAA3C,CAAzB;IACD;EACF;;AA1f+B,CAA3B;AA6fP,OAAO,MAAMoI,kBAAsC,GAAG;EACpD/B,OAAO,EAAE,CACP,CAAC,aAAD,EAAgB,OAAhB,CADO,EAEP,CAAC,UAAD,EAAa,QAAb,CAFO,EAGP,CAAC,oBAAD,EAAuB,IAAvB,CAHO,EAIP,CAAC,aAAD,EAAgB,UAAhB,CAJO,EAKP,CAAC,gBAAD,EAAmB,UAAnB,CALO,EAMP,CAAC,oBAAD,EAAuB,IAAvB,CANO,CAD2C;EASpDgC,IAAI,EAAE,CAAC,CAAC,gBAAD,EAAmB,KAAnB,CAAD,CAT8C;EAUpDC,KAAK,EAAE,CACL,CAAC,iBAAD,EAAoB,UAApB,CADK,EAEL,CAAC,sBAAD,EAAyB,MAAzB,EAAiC,OAAjC,CAFK,EAGL,CAAC,kBAAD,EAAqB,MAArB,EAA6B,OAA7B,CAHK,EAIL,CAAC,gBAAD,EAAmB,WAAnB,EAAgC,QAAhC,CAJK,EAKL,CAAC,uBAAD,EAA0B,MAA1B,EAAkC,YAAlC,EAAgD,WAAhD,CALK,EAML,CAAC,gBAAD,EAAmB,OAAnB,CANK,EAOL,CAAC,UAAD,EAAa,MAAb,CAPK,EAQL,CAAC,aAAD,EAAgB,MAAhB,CARK,EASL,CAAC,mBAAD,EAAsB,MAAtB,EAA8B,OAA9B,CATK,EAUL,CAAC,eAAD,EAAkB,WAAlB,EAA+B,QAA/B,CAVK,EAWL,CAAC,gBAAD,EAAmB,OAAnB,CAXK,EAYL,CAAC,iBAAD,EAAoB,UAApB,CAZK,EAaL,CAAC,oBAAD,EAAuB,aAAvB,CAbK,EAcL,CAAC,iBAAD,EAAoB,cAApB,CAdK,EAeL,CAAC,iBAAD,EAAoB,UAApB,CAfK,EAgBL,CAAC,kBAAD,EAAqB,UAArB,CAhBK,EAiBL,CAAC,oBAAD,EAAuB,MAAvB,CAjBK;AAV6C,CAA/C"}