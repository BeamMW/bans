{"version":3,"file":"types.js","names":[],"sources":["../src/types.ts"],"sourcesContent":["import type { Aliases, Node } from '@babel/types';\n\nimport type { VisitorKeys } from '@linaria/babel-preset';\n\nexport type NodeOfType<T> = Extract<Node, { type: T }>;\n\nexport type NodeType = Node['type'] | keyof Aliases;\n\nexport type VisitorAction = 'ignore' | void;\n\nexport type Visitor<TNode extends Node> = <TParent extends Node>(\n  node: TNode,\n  parent: TParent | null,\n  parentKey: VisitorKeys<TParent> | null,\n  listIdx: number | null\n) => VisitorAction;\n\nexport type Visitors = { [TMethod in NodeType]?: Visitor<NodeOfType<TMethod>> };\n\nexport type IdentifierHandlerType = 'declare' | 'keep' | 'refer';\n\nexport type IdentifierHandlers = {\n  [key in IdentifierHandlerType]: [NodeType, ...string[]][];\n};\n"],"mappings":""}