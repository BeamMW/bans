{"version":3,"sources":["../src/DepsGraph.ts"],"names":["types","t","resolveNode","addEdge","a","b","dependencies","has","get","edges","push","add","set","Set","dependents","DepsGraph","processQueue","actionQueue","length","action","resolvedA","resolvedB","call","getAllReferences","id","name","split","declaration","scope","getDeclaration","allReferences","Array","from","filter","i","isIdentifier","constructor","Map","WeakMap","dependent","dependency","addExport","node","existed","exports","addParent","parent","parents","getParent","getDependenciesByBinding","includes","getDependentsByBinding","findDependencies","like","shallowEqual","map","findDependents","getDependencies","nodes","reduced","forEach","n","getLeaf","getLeaves","only","values"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport ScopeManager, { PromisedNode, resolveNode } from './scope';\n\ntype Action = (this: DepsGraph, a: t.Node, b: t.Node) => void;\n\nfunction addEdge(this: DepsGraph, a: t.Node, b: t.Node) {\n  if (this.dependencies.has(a) && this.dependencies.get(a)!.has(b)) {\n    // edge has been already added∂ƒ\n    return;\n  }\n\n  this.edges.push([a, b]);\n  if (this.dependencies.has(a)) {\n    this.dependencies.get(a)!.add(b);\n  } else {\n    this.dependencies.set(a, new Set([b]));\n  }\n\n  if (this.dependents.has(b)) {\n    this.dependents.get(b)!.add(a);\n  } else {\n    this.dependents.set(b, new Set([a]));\n  }\n}\n\nexport default class DepsGraph {\n  public readonly imports: Map<string, (t.Identifier | t.StringLiteral)[]> =\n    new Map();\n  public readonly importAliases: Map<t.Identifier, string> = new Map();\n  public readonly importTypes: Map<\n    string,\n    'wildcard' | 'default' | 'reexport'\n  > = new Map();\n  public readonly reexports: Array<t.Identifier> = [];\n\n  protected readonly parents: WeakMap<t.Node, t.Node> = new WeakMap();\n  protected readonly edges: Array<[t.Node, t.Node]> = [];\n  protected readonly exports: Map<string, t.Node> = new Map();\n  protected readonly dependencies: Map<t.Node, Set<t.Node>> = new Map();\n  protected readonly dependents: Map<t.Node, Set<t.Node>> = new Map();\n\n  private actionQueue: Array<\n    [Action, t.Node | PromisedNode, t.Node | PromisedNode]\n  > = [];\n\n  private processQueue() {\n    if (this.actionQueue.length === 0) {\n      return;\n    }\n\n    for (const [action, a, b] of this.actionQueue) {\n      const resolvedA = resolveNode(a);\n      const resolvedB = resolveNode(b);\n      if (resolvedA && resolvedB) {\n        action.call(this, resolvedA, resolvedB);\n      }\n    }\n\n    this.actionQueue = [];\n  }\n\n  private getAllReferences(id: string): (t.Identifier | t.MemberExpression)[] {\n    const [, name] = id.split(':');\n    const declaration = this.scope.getDeclaration(id)!;\n    const allReferences: (t.Identifier | t.MemberExpression)[] = [\n      ...Array.from(this.dependencies.get(declaration) || []),\n      ...Array.from(this.dependents.get(declaration) || []),\n    ].filter((i) => t.isIdentifier(i) && i.name === name) as t.Identifier[];\n    allReferences.push(declaration);\n    return allReferences;\n  }\n\n  constructor(protected scope: ScopeManager) {}\n\n  addEdge(dependent: t.Node | PromisedNode, dependency: t.Node | PromisedNode) {\n    this.actionQueue.push([addEdge, dependent, dependency]);\n  }\n\n  addExport(name: string, node: t.Node) {\n    const existed = this.exports.get(name);\n    if (existed) {\n      // Sometimes export can be defined more than once and in that case we have to keep all export statements\n      this.addEdge(node, existed);\n    }\n\n    this.exports.set(name, node);\n  }\n\n  addParent(node: t.Node, parent: t.Node) {\n    this.parents.set(node, parent);\n  }\n\n  getParent(node: t.Node): t.Node | undefined {\n    return this.parents.get(node);\n  }\n\n  getDependenciesByBinding(id: string) {\n    this.processQueue();\n    const allReferences = this.getAllReferences(id);\n    const dependencies = [];\n    for (let [a, b] of this.edges) {\n      if (t.isIdentifier(a) && allReferences.includes(a)) {\n        dependencies.push(b);\n      }\n    }\n\n    return dependencies;\n  }\n\n  getDependentsByBinding(id: string) {\n    this.processQueue();\n    const allReferences = this.getAllReferences(id);\n    const dependents = [];\n    for (let [a, b] of this.edges) {\n      if (t.isIdentifier(b) && allReferences.includes(b)) {\n        dependents.push(a);\n      }\n    }\n\n    return dependents;\n  }\n\n  findDependencies(like: Object) {\n    this.processQueue();\n    return this.edges\n      .filter(([a]) => t.shallowEqual(a, like))\n      .map(([, b]) => b);\n  }\n\n  findDependents(like: object) {\n    this.processQueue();\n    return this.edges\n      .filter(([, b]) => t.shallowEqual(b, like))\n      .map(([a]) => a);\n  }\n\n  getDependencies(nodes: t.Node[]) {\n    this.processQueue();\n    const reduced: t.Node[] = [];\n    nodes.forEach((n) =>\n      reduced.push(...Array.from(this.dependencies.get(n) || []))\n    );\n    return reduced;\n  }\n\n  getLeaf(name: string): t.Node | undefined {\n    return this.exports.get(name);\n  }\n\n  getLeaves(only: string[] | null): Array<t.Node | undefined> {\n    this.processQueue();\n    return only\n      ? only.map((name) => this.getLeaf(name))\n      : Array.from(this.exports.values());\n  }\n}\n"],"file":"DepsGraph.js"}