{"version":3,"file":"graphBuilder.js","names":["types","t","isNode","getVisitorKeys","GraphBuilderState","getVisitors","ScopeManager","isVoid","node","isUnaryExpression","operator","isTSExporterCall","isCallExpression","arguments","length","isIdentifier","callee","name","GraphBuilder","build","root","graph","constructor","rootNode","visit","isExportsIdentifier","scope","getDeclaration","globalExportsIdentifier","isMemberExpression","property","object","globalModuleIdentifier","isExportsAssignment","isAssignmentExpression","left","baseVisit","ignoreDeps","dependencies","isExpression","keys","forEach","key","subNode","Array","isArray","i","child","push","dep","addEdge","callbacks","callback","parent","parentKey","listIdx","addParent","right","isStringLiteral","isObjectExpression","properties","prop","isObjectProperty","value","addExport","nameNode","identifier","isVariableDeclaration","declarations","declaration","isVariableDeclarator","init","currentAssignmentExpression","addedExport","edgesToAdd","edge","isScopable","isFunction","new","isProgram","fnStack","visitors","action","visitor","shift","method","bind","isStatement","pop","dispose"],"sources":["../src/graphBuilder.ts"],"sourcesContent":["import { types as t } from '@babel/core';\nimport type { AssignmentExpression, Node } from '@babel/types';\n\nimport { isNode, getVisitorKeys } from '@linaria/babel-preset';\nimport type { VisitorKeys } from '@linaria/babel-preset';\n\nimport type DepsGraph from './DepsGraph';\nimport GraphBuilderState from './GraphBuilderState';\nimport { getVisitors } from './Visitors';\nimport ScopeManager from './scope';\nimport type { VisitorAction, Visitor } from './types';\n\nconst isVoid = (node: Node): boolean =>\n  t.isUnaryExpression(node) && node.operator === 'void';\n\nfunction isTSExporterCall(\n  node: Node\n): node is t.CallExpression & { arguments: [t.StringLiteral, t.Identifier] } {\n  if (!t.isCallExpression(node) || node.arguments.length !== 2) {\n    return false;\n  }\n\n  // FIXME: more precisely check\n  return !(!t.isIdentifier(node.callee) || node.callee.name !== 'exporter');\n}\n\nclass GraphBuilder extends GraphBuilderState {\n  static build(root: Node): DepsGraph {\n    return new GraphBuilder(root).graph;\n  }\n\n  constructor(rootNode: Node) {\n    super();\n\n    this.visit(rootNode, null, null, null);\n  }\n\n  private isExportsIdentifier(node: Node) {\n    if (t.isIdentifier(node)) {\n      return (\n        this.scope.getDeclaration(node) === ScopeManager.globalExportsIdentifier\n      );\n    }\n\n    if (t.isMemberExpression(node)) {\n      return (\n        t.isIdentifier(node.property) &&\n        node.property.name === 'exports' &&\n        t.isIdentifier(node.object) &&\n        this.scope.getDeclaration(node.object) ===\n          ScopeManager.globalModuleIdentifier\n      );\n    }\n\n    return false;\n  }\n\n  private isExportsAssignment(node: Node): node is AssignmentExpression {\n    if (\n      node &&\n      t.isAssignmentExpression(node) &&\n      t.isMemberExpression(node.left)\n    ) {\n      if (this.isExportsIdentifier(node.left)) {\n        // This is a default export like `module.exports = 42`\n        return true;\n      }\n\n      if (this.isExportsIdentifier(node.left.object)) {\n        // This is a named export like `module.exports.a = 42` or `exports.a = 42`\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /*\n   * Implements a default behaviour for AST-nodes:\n   * • visits every child;\n   * • if the current node is an Expression node, adds all its children as dependencies.\n   *\n   * eg. BinaryExpression has children `left` and `right`,\n   * both of them are required for evaluating the value of the expression\n   */\n  baseVisit<TNode extends Node>(node: TNode, ignoreDeps = false) {\n    const dependencies: t.Node[] = [];\n    const isExpression = t.isExpression(node);\n    const keys = getVisitorKeys(node);\n    keys.forEach((key) => {\n      // Ignore all types\n      if (key === 'typeArguments' || key === 'typeParameters') {\n        return;\n      }\n\n      const subNode = node[key as keyof TNode];\n\n      if (Array.isArray(subNode)) {\n        for (let i = 0; i < subNode.length; i++) {\n          const child = subNode[i];\n          if (child && this.visit(child, node, key, i) !== 'ignore') {\n            dependencies.push(child);\n          }\n        }\n      } else if (\n        isNode(subNode) &&\n        this.visit(subNode, node, key) !== 'ignore'\n      ) {\n        dependencies.push(subNode);\n      }\n    });\n\n    if (isExpression && !ignoreDeps) {\n      dependencies.forEach((dep) => this.graph.addEdge(node, dep));\n    }\n\n    this.callbacks.forEach((callback) => callback(node));\n  }\n\n  visit<TNode extends Node, TParent extends Node>(\n    node: TNode,\n    parent: TParent | null,\n    parentKey: VisitorKeys<TParent> | null,\n    listIdx: number | null = null\n  ): VisitorAction {\n    if (parent) {\n      this.graph.addParent(node, parent);\n    }\n\n    if (\n      this.isExportsAssignment(node) &&\n      !this.isExportsAssignment(node.right) &&\n      !isVoid(node.right)\n    ) {\n      if (\n        t.isMemberExpression(node.left) &&\n        (t.isIdentifier(node.left.property) ||\n          t.isStringLiteral(node.left.property))\n      ) {\n        if (\n          t.isIdentifier(node.left.object) &&\n          node.left.object.name === 'module'\n        ) {\n          // It's a batch or default export\n          if (t.isObjectExpression(node.right)) {\n            // Batch export is a very particular case.\n            // Each property of the assigned object is independent named export.\n            // We also need to specify all dependencies and call `visit` for every value.\n            this.visit(\n              node.left,\n              node,\n              'left' as VisitorKeys<TNode & AssignmentExpression>\n            );\n            node.right.properties.forEach((prop) => {\n              if (t.isObjectProperty(prop) && t.isIdentifier(prop.key)) {\n                this.visit(prop.value, prop, 'value');\n                this.graph.addExport(prop.key.name, prop);\n                this.graph.addEdge(prop, node.right);\n                this.graph.addEdge(prop, prop.key);\n                this.graph.addEdge(prop.key, prop.value);\n              }\n            });\n\n            this.graph.addEdge(node.right, node);\n            this.graph.addEdge(node, node.left);\n          } else {\n            this.graph.addExport('default', node);\n            this.graph.addEdge(node, node.left);\n          }\n          // Regardless of whether the node.right is an object expression, this may also be the default export\n          this.graph.addExport('default', node);\n        } else {\n          // it can be either `exports.name` or `exports[\"name\"]`\n          const nameNode = node.left.property;\n          this.graph.addExport(\n            t.isStringLiteral(nameNode) ? nameNode.value : nameNode.name,\n            node\n          );\n        }\n      }\n    } else if (isTSExporterCall(node)) {\n      const [name, identifier] = node.arguments;\n      this.graph.addExport(name.value, node);\n      this.graph.addEdge(node, identifier);\n    } else if (t.isVariableDeclaration(node)) {\n      // We might be assigning to the exports, eg. `var Padding = exports.Padding = ...`\n      // or it might be a sequence and look like var foo = 1, var Name = exports.name = ...\n      node.declarations.forEach((declaration) => {\n        if (\n          t.isVariableDeclarator(declaration) &&\n          t.isAssignmentExpression(declaration.init)\n        ) {\n          let currentAssignmentExpression: t.Expression = declaration.init;\n          let addedExport = false;\n          const edgesToAdd = [];\n\n          // loop through the assignments looking for possible exports\n          while (t.isAssignmentExpression(currentAssignmentExpression)) {\n            edgesToAdd.push(currentAssignmentExpression);\n            if (\n              this.isExportsAssignment(currentAssignmentExpression) &&\n              t.isMemberExpression(currentAssignmentExpression.left) &&\n              (t.isIdentifier(currentAssignmentExpression.left.property) ||\n                t.isStringLiteral(currentAssignmentExpression.left.property))\n            ) {\n              const nameNode = currentAssignmentExpression.left.property;\n              this.graph.addExport(\n                t.isStringLiteral(nameNode) ? nameNode.value : nameNode.name,\n                node\n              );\n              addedExport = true;\n              edgesToAdd.push(declaration);\n              edgesToAdd.push(currentAssignmentExpression.left);\n              edgesToAdd.push(currentAssignmentExpression.right);\n            }\n\n            currentAssignmentExpression = currentAssignmentExpression.right;\n          }\n          if (addedExport) {\n            edgesToAdd.forEach((edge) => {\n              this.graph.addEdge(node, edge);\n            });\n          }\n        }\n      });\n    }\n\n    const isScopable = t.isScopable(node);\n    const isFunction = t.isFunction(node);\n\n    if (isScopable) this.scope.new(t.isProgram(node) || t.isFunction(node));\n    if (isFunction) this.fnStack.push(node);\n\n    const visitors = getVisitors(node);\n    let action: VisitorAction;\n    if (visitors.length > 0) {\n      let visitor: Visitor<TNode> | undefined;\n      // eslint-disable-next-line no-cond-assign\n      while (!action && (visitor = visitors.shift())) {\n        const method: Visitor<TNode> = visitor.bind(this);\n        action = method(node, parent, parentKey, listIdx);\n      }\n    } else {\n      this.baseVisit(node);\n    }\n\n    if (parent && action !== 'ignore' && t.isStatement(node)) {\n      // Statement always depends on its parent\n      this.graph.addEdge(node, parent);\n    }\n\n    if (isFunction) this.fnStack.pop();\n    if (isScopable) this.scope.dispose();\n\n    return action;\n  }\n}\n\nexport default GraphBuilder.build;\n"],"mappings":"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"}