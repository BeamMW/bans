{"version":3,"file":"dumpNode.js","names":["types","t","hooks","Identifier","node","name","BinaryExpression","operator","NumericLiteral","value","StringLiteral","isNode","obj","dumpNode","alive","level","idx","result","prefix","repeat","type","hook","has","keys","VISITOR_KEYS","forEach","key","subNode","toString","Array","isArray","i","length","child"],"sources":["../src/dumpNode.ts"],"sourcesContent":["import { types as t } from '@babel/core';\nimport type {\n  BinaryExpression,\n  Identifier,\n  Node,\n  NumericLiteral,\n  StringLiteral,\n} from '@babel/types';\n\ntype Hooks = {\n  [T in Node['type']]?: (node: Node & { type: T }) => string | number;\n};\n\nconst hooks: Hooks = {\n  Identifier: (node: Identifier) => node.name,\n  BinaryExpression: (node: BinaryExpression) => node.operator,\n  NumericLiteral: (node: NumericLiteral) => node.value,\n  StringLiteral: (node: StringLiteral) => node.value,\n};\n\nfunction isNode(obj: unknown): obj is Node {\n  return !!obj;\n}\n\nexport default function dumpNode<T extends Node>(\n  node: T,\n  alive: Set<Node> | null = null,\n  level = 0,\n  idx: number | null = null\n) {\n  let result = level === 0 ? '\\n' : '';\n  const prefix =\n    level === 0\n      ? ''\n      : `${'| '.repeat(level - 1)}${idx === null ? '|' : idx}${\n          (idx || 0) < 10 ? '=' : ''\n        }`;\n\n  const { type } = node;\n  const hook = hooks[type] as ((node: T) => string | number) | undefined;\n  result += `${prefix}${type}${hook ? hook(node) : ''}`;\n\n  if (alive) {\n    result += alive.has(node) ? ' ✅' : ' ❌';\n  }\n\n  result += '\\n';\n  const keys = t.VISITOR_KEYS[type] as Array<keyof T>;\n  keys.forEach((key) => {\n    const subNode = node[key];\n\n    result += `${'| '.repeat(level)}|-${key.toString()}\\n`;\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (child) result += dumpNode(child, alive, level + 2, i);\n      }\n    } else if (isNode(subNode)) {\n      result += dumpNode(subNode, alive, level + 2);\n    }\n  });\n\n  return result;\n}\n"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,aAA3B;AAaA,MAAMC,KAAY,GAAG;EACnBC,UAAU,EAAGC,IAAD,IAAsBA,IAAI,CAACC,IADpB;EAEnBC,gBAAgB,EAAGF,IAAD,IAA4BA,IAAI,CAACG,QAFhC;EAGnBC,cAAc,EAAGJ,IAAD,IAA0BA,IAAI,CAACK,KAH5B;EAInBC,aAAa,EAAGN,IAAD,IAAyBA,IAAI,CAACK;AAJ1B,CAArB;;AAOA,SAASE,MAAT,CAAgBC,GAAhB,EAA2C;EACzC,OAAO,CAAC,CAACA,GAAT;AACD;;AAED,eAAe,SAASC,QAAT,CACbT,IADa,EAEbU,KAAuB,GAAG,IAFb,EAGbC,KAAK,GAAG,CAHK,EAIbC,GAAkB,GAAG,IAJR,EAKb;EACA,IAAIC,MAAM,GAAGF,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqB,EAAlC;EACA,MAAMG,MAAM,GACVH,KAAK,KAAK,CAAV,GACI,EADJ,GAEK,GAAE,KAAKI,MAAL,CAAYJ,KAAK,GAAG,CAApB,CAAuB,GAAEC,GAAG,KAAK,IAAR,GAAe,GAAf,GAAqBA,GAAI,GACnD,CAACA,GAAG,IAAI,CAAR,IAAa,EAAb,GAAkB,GAAlB,GAAwB,EACzB,EALP;EAOA,MAAM;IAAEI;EAAF,IAAWhB,IAAjB;EACA,MAAMiB,IAAI,GAAGnB,KAAK,CAACkB,IAAD,CAAlB;EACAH,MAAM,IAAK,GAAEC,MAAO,GAAEE,IAAK,GAAEC,IAAI,GAAGA,IAAI,CAACjB,IAAD,CAAP,GAAgB,EAAG,EAApD;;EAEA,IAAIU,KAAJ,EAAW;IACTG,MAAM,IAAIH,KAAK,CAACQ,GAAN,CAAUlB,IAAV,IAAkB,IAAlB,GAAyB,IAAnC;EACD;;EAEDa,MAAM,IAAI,IAAV;EACA,MAAMM,IAAI,GAAGtB,CAAC,CAACuB,YAAF,CAAeJ,IAAf,CAAb;EACAG,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;IACpB,MAAMC,OAAO,GAAGvB,IAAI,CAACsB,GAAD,CAApB;IAEAT,MAAM,IAAK,GAAE,KAAKE,MAAL,CAAYJ,KAAZ,CAAmB,KAAIW,GAAG,CAACE,QAAJ,EAAe,IAAnD;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;MAC1B,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;QACvC,MAAME,KAAK,GAAGN,OAAO,CAACI,CAAD,CAArB;QACA,IAAIE,KAAJ,EAAWhB,MAAM,IAAIJ,QAAQ,CAACoB,KAAD,EAAQnB,KAAR,EAAeC,KAAK,GAAG,CAAvB,EAA0BgB,CAA1B,CAAlB;MACZ;IACF,CALD,MAKO,IAAIpB,MAAM,CAACgB,OAAD,CAAV,EAAqB;MAC1BV,MAAM,IAAIJ,QAAQ,CAACc,OAAD,EAAUb,KAAV,EAAiBC,KAAK,GAAG,CAAzB,CAAlB;IACD;EACF,CAZD;EAcA,OAAOE,MAAP;AACD"}