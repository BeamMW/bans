import { types as t } from '@babel/core';
const hooks = {
  Identifier: node => node.name,
  BinaryExpression: node => node.operator,
  NumericLiteral: node => node.value,
  StringLiteral: node => node.value
};

function isNode(obj) {
  return !!obj;
}

export default function dumpNode(node, alive = null, level = 0, idx = null) {
  let result = level === 0 ? '\n' : '';
  const prefix = level === 0 ? '' : `${'| '.repeat(level - 1)}${idx === null ? '|' : idx}${(idx || 0) < 10 ? '=' : ''}`;
  const {
    type
  } = node;
  const hook = hooks[type];
  result += `${prefix}${type}${hook ? hook(node) : ''}`;

  if (alive) {
    result += alive.has(node) ? ' ✅' : ' ❌';
  }

  result += '\n';
  const keys = t.VISITOR_KEYS[type];
  keys.forEach(key => {
    const subNode = node[key];
    result += `${'| '.repeat(level)}|-${key.toString()}\n`;

    if (Array.isArray(subNode)) {
      for (let i = 0; i < subNode.length; i++) {
        const child = subNode[i];
        if (child) result += dumpNode(child, alive, level + 2, i);
      }
    } else if (isNode(subNode)) {
      result += dumpNode(subNode, alive, level + 2);
    }
  });
  return result;
}
//# sourceMappingURL=dumpNode.js.map