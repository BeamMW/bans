{"version":3,"file":"scope.js","names":["types","t","invariant","ResolvedNode","Symbol","functionScopes","WeakSet","PromisedNode","is","obj","identifier","resolveNode","getExportName","node","isMemberExpression","type","object","property","isIdentifier","name","isStringLiteral","value","scopeIds","WeakMap","getId","scope","scopeId","get","globalIdentifiers","Set","ScopeManager","globalExportsIdentifier","globalModuleIdentifier","nextId","stack","map","Map","handlers","declarations","global","constructor","new","declare","isFunction","add","set","unshift","dispose","disposed","shift","delete","identifierOrMemberExpression","isHoistable","from","memberExp","has","idName","slice","find","s","promise","Array","forEach","handler","addReference","id","whereIsDeclared","undefined","getDeclaration","identifierOrMemberExpOrName","addDeclareHandler","push","filter","h"],"sources":["../src/scope.ts"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport { types as t } from '@babel/core';\nimport invariant from 'ts-invariant';\n\ntype Scope = Map<string, Set<t.Identifier | t.MemberExpression>>;\n\nexport type ScopeId = number | 'global' | 'exports';\nexport type DeclareHandler = (\n  identifier: t.Identifier,\n  from: t.Identifier | null\n) => void;\n\nconst ResolvedNode = Symbol('ResolvedNode');\nconst functionScopes = new WeakSet<Scope>();\n\nexport class PromisedNode<T = t.Node> {\n  static is<TNode>(obj: unknown): obj is PromisedNode<TNode> {\n    return typeof obj === 'object' && obj !== null && ResolvedNode in obj;\n  }\n\n  [ResolvedNode]: T | undefined;\n\n  get identifier(): T | undefined {\n    return this[ResolvedNode];\n  }\n}\n\nexport const resolveNode = <T = t.Node>(\n  obj: T | PromisedNode<T> | undefined\n): T | undefined => (PromisedNode.is<T>(obj) ? obj.identifier : obj);\n\nconst getExportName = (node: t.Node): string => {\n  invariant(\n    t.isMemberExpression(node),\n    `getExportName expects MemberExpression but received ${node.type}`\n  );\n\n  const { object, property } = node;\n  invariant(\n    t.isIdentifier(object) && object.name === 'exports',\n    \"getExportName expects a member expression with 'exports'\"\n  );\n  invariant(\n    t.isIdentifier(property) || t.isStringLiteral(property),\n    'getExportName supports only identifiers and literals as names of exported values'\n  );\n\n  const name = t.isIdentifier(property) ? property.name : property.value;\n  return `exports.${name}`;\n};\n\nconst scopeIds = new WeakMap<Scope, ScopeId>();\nconst getId = (scope: Scope, identifier: t.Identifier | string): string => {\n  const scopeId = scopeIds.get(scope);\n  return `${scopeId}:${\n    typeof identifier === 'string' ? identifier : identifier.name\n  }`;\n};\n\nconst globalIdentifiers = new Set(['exports', 'module']);\n\nexport default class ScopeManager {\n  public static globalExportsIdentifier = t.identifier('exports');\n\n  public static globalModuleIdentifier = t.identifier('module');\n\n  private nextId = 0;\n\n  private readonly stack: Array<Scope> = [];\n\n  private readonly map: Map<ScopeId, Scope> = new Map();\n\n  private readonly handlers: Map<ScopeId, Array<DeclareHandler>> = new Map();\n\n  private readonly declarations: Map<\n    string,\n    t.Identifier | t.MemberExpression | PromisedNode<t.Identifier>\n  > = new Map();\n\n  private get global(): Scope {\n    return this.map.get('global')!;\n  }\n\n  constructor() {\n    this.new(true, 'global');\n    this.declare(ScopeManager.globalExportsIdentifier, false);\n    this.declare(ScopeManager.globalModuleIdentifier, false);\n  }\n\n  // eslint-disable-next-line no-plusplus\n  new(isFunction: boolean, scopeId: ScopeId = this.nextId++): Scope {\n    const scope: Scope = new Map();\n    if (isFunction) {\n      functionScopes.add(scope);\n    }\n\n    scopeIds.set(scope, scopeId);\n    this.map.set(scopeId, scope);\n    this.handlers.set(scopeId, []);\n    this.stack.unshift(scope);\n    return scope;\n  }\n\n  dispose(): Scope | undefined {\n    const disposed = this.stack.shift();\n    if (disposed) {\n      this.map.delete(scopeIds.get(disposed)!);\n    }\n\n    return disposed;\n  }\n\n  declare(\n    identifierOrMemberExpression: t.Identifier | t.MemberExpression,\n    isHoistable: boolean,\n    from: t.Identifier | null = null,\n    stack = 0\n  ): void {\n    if (t.isMemberExpression(identifierOrMemberExpression)) {\n      // declare receives MemberExpression only if it's `exports.something` expression\n      const memberExp = identifierOrMemberExpression;\n      const name = getExportName(memberExp);\n      if (!this.global.has(name)) {\n        this.global.set(name, new Set());\n      }\n\n      // There can be a few `export.foo = …` statements, but we need only the last one\n      this.declarations.set(getId(this.global, name), memberExp);\n      this.global.get(name)!.add(memberExp);\n      return;\n    }\n\n    const identifier = identifierOrMemberExpression;\n    const idName = identifier.name;\n    const scope = this.stack\n      .slice(stack)\n      .find((s) => !isHoistable || functionScopes.has(s))!;\n    if (this.global.has(idName) && !globalIdentifiers.has(idName)) {\n      // It's probably a declaration of a previous referenced identifier\n      // Let's use naïve implementation of hoisting\n      const promise = this.declarations.get(\n        getId(this.global, identifier)\n      )! as PromisedNode<t.Identifier>;\n      promise[ResolvedNode] = identifier;\n      scope.set(\n        idName,\n        new Set([identifier, ...Array.from(this.global.get(idName)!)])\n      );\n      this.global.delete(idName);\n    } else {\n      scope.set(idName, new Set([identifier]));\n    }\n\n    this.declarations.set(getId(scope, identifier), identifier);\n    const handlers = this.handlers.get(scopeIds.get(scope)!)!;\n    handlers.forEach((handler) => handler(identifier, from));\n  }\n\n  addReference(\n    identifierOrMemberExpression: t.Identifier | t.MemberExpression\n  ): t.Identifier | t.MemberExpression | PromisedNode {\n    const name = t.isIdentifier(identifierOrMemberExpression)\n      ? identifierOrMemberExpression.name\n      : getExportName(identifierOrMemberExpression);\n    const scope = this.stack.find((s) => s.has(name)) ?? this.global;\n    const id = getId(scope, name);\n    if (scope === this.global && !scope.has(name)) {\n      scope.set(name, new Set());\n      this.declarations.set(id, new PromisedNode());\n    }\n\n    scope.get(name)!.add(identifierOrMemberExpression);\n    return this.declarations.get(id)!;\n  }\n\n  whereIsDeclared(identifier: t.Identifier): ScopeId | undefined {\n    const { name } = identifier;\n    const scope = this.stack.find(\n      (s) => s.has(name) && s.get(name)!.has(identifier)\n    );\n    if (scope) {\n      return scopeIds.get(scope);\n    }\n\n    if (this.global.has(name)) {\n      return 'global';\n    }\n\n    return undefined;\n  }\n\n  getDeclaration(\n    identifierOrMemberExpOrName: t.Identifier | t.MemberExpression | string\n  ): t.Identifier | t.MemberExpression | undefined {\n    let name: string;\n    if (typeof identifierOrMemberExpOrName === 'string') {\n      name = identifierOrMemberExpOrName;\n    } else if (t.isMemberExpression(identifierOrMemberExpOrName)) {\n      name = getId(this.global, getExportName(identifierOrMemberExpOrName));\n    } else {\n      const scopeId = this.whereIsDeclared(identifierOrMemberExpOrName);\n      if (scopeId === undefined) {\n        return undefined;\n      }\n\n      name = getId(this.map.get(scopeId)!, identifierOrMemberExpOrName);\n    }\n\n    return resolveNode(this.declarations.get(name));\n  }\n\n  addDeclareHandler(handler: DeclareHandler): () => void {\n    const scopeId = scopeIds.get(this.stack[0])!;\n    this.handlers.get(scopeId)!.push(handler);\n    return () => {\n      const handlers = this.handlers.get(scopeId)!.filter((h) => h !== handler);\n      this.handlers.set(scopeId, handlers);\n    };\n  }\n}\n"],"mappings":"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"}