import { types as t } from '@babel/core';
import ScopeManager, { PromisedNode } from './scope';
export default class DepsGraph {
    protected scope: ScopeManager;
    readonly imports: Map<string, (t.Identifier | t.StringLiteral)[]>;
    readonly importAliases: Map<t.Identifier, string>;
    readonly importTypes: Map<string, 'wildcard' | 'default' | 'reexport'>;
    readonly reexports: Array<t.Identifier>;
    protected readonly parents: WeakMap<t.Node, t.Node>;
    protected readonly edges: Array<[t.Node, t.Node]>;
    protected readonly exports: Map<string, t.Node>;
    protected readonly dependencies: Map<t.Node, Set<t.Node>>;
    protected readonly dependents: Map<t.Node, Set<t.Node>>;
    private actionQueue;
    private processQueue;
    private getAllReferences;
    constructor(scope: ScopeManager);
    addEdge(dependent: t.Node | PromisedNode, dependency: t.Node | PromisedNode): void;
    addExport(name: string, node: t.Node): void;
    addParent(node: t.Node, parent: t.Node): void;
    getParent(node: t.Node): t.Node | undefined;
    getDependenciesByBinding(id: string): t.Node[];
    getDependentsByBinding(id: string): t.Node[];
    findDependencies(like: Object): t.Node[];
    findDependents(like: object): t.Node[];
    getDependencies(nodes: t.Node[]): t.Node[];
    getLeaf(name: string): t.Node | undefined;
    getLeaves(only: string[] | null): Array<t.Node | undefined>;
}
