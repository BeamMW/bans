"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@babel/core");

var _babelPreset = require("@linaria/babel-preset");

var _GraphBuilderState = _interopRequireDefault(require("./GraphBuilderState"));

var _Visitors = require("./Visitors");

var _scope = _interopRequireDefault(require("./scope"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isVoid = node => _core.types.isUnaryExpression(node) && node.operator === 'void';

class GraphBuilder extends _GraphBuilderState.default {
  static build(root) {
    return new GraphBuilder(root).graph;
  }

  constructor(rootNode) {
    super();
    this.visit(rootNode, null, null, null);
  }

  isExportsIdentifier(node) {
    if (_core.types.isIdentifier(node)) {
      return this.scope.getDeclaration(node) === _scope.default.globalExportsIdentifier;
    }

    if (_core.types.isMemberExpression(node)) {
      return _core.types.isIdentifier(node.property) && node.property.name === 'exports' && _core.types.isIdentifier(node.object) && this.scope.getDeclaration(node.object) === _scope.default.globalModuleIdentifier;
    }

    return false;
  }

  isExportsAssigment(node) {
    if (node && _core.types.isAssignmentExpression(node) && _core.types.isMemberExpression(node.left)) {
      if (this.isExportsIdentifier(node.left)) {
        // This is a default export like `module.exports = 42`
        return true;
      }

      if (this.isExportsIdentifier(node.left.object)) {
        // This is a named export like `module.exports.a = 42` or `exports.a = 42`
        return true;
      }
    }

    return false;
  }

  isTSExporterCall(node) {
    if (!_core.types.isCallExpression(node) || node.arguments.length !== 2) {
      return false;
    } // FIXME: more precisely check


    return !(!_core.types.isIdentifier(node.callee) || node.callee.name !== 'exporter');
  }
  /*
   * Implements a default behaviour for AST-nodes:
   * • visits every child;
   * • if the current node is an Expression node, adds all its children as dependencies.
   *
   * eg. BinaryExpression has children `left` and `right`,
   * both of them are required for evaluating the value of the expression
   */


  baseVisit(node, ignoreDeps = false) {
    const dependencies = [];

    const isExpression = _core.types.isExpression(node);

    const keys = (0, _babelPreset.getVisitorKeys)(node);

    for (const key of keys) {
      // Ignore all types
      if (key === 'typeArguments' || key === 'typeParameters') {
        continue;
      }

      const subNode = node[key];

      if (Array.isArray(subNode)) {
        for (let i = 0; i < subNode.length; i++) {
          const child = subNode[i];

          if (child && this.visit(child, node, key, i) !== 'ignore') {
            dependencies.push(child);
          }
        }
      } else if ((0, _babelPreset.isNode)(subNode) && this.visit(subNode, node, key) !== 'ignore') {
        dependencies.push(subNode);
      }
    }

    if (isExpression && !ignoreDeps) {
      dependencies.forEach(dep => this.graph.addEdge(node, dep));
    }

    this.callbacks.forEach(callback => callback(node));
  }

  visit(node, parent, parentKey, listIdx = null) {
    if (parent) {
      this.graph.addParent(node, parent);
    }

    if (this.isExportsAssigment(node) && !this.isExportsAssigment(node.right) && !isVoid(node.right)) {
      if (_core.types.isMemberExpression(node.left) && (_core.types.isIdentifier(node.left.property) || _core.types.isStringLiteral(node.left.property))) {
        if (_core.types.isIdentifier(node.left.object) && node.left.object.name === 'module') {
          // It's a batch or default export
          if (_core.types.isObjectExpression(node.right)) {
            // Batch export is a very particular case.
            // Each property of the assigned object is independent named export.
            // We also need to specify all dependencies and call `visit` for every value.
            this.visit(node.left, node, 'left');
            node.right.properties.forEach(prop => {
              if (_core.types.isObjectProperty(prop) && _core.types.isIdentifier(prop.key)) {
                this.visit(prop.value, prop, 'value');
                this.graph.addExport(prop.key.name, prop);
                this.graph.addEdge(prop, node.right);
                this.graph.addEdge(prop, prop.key);
                this.graph.addEdge(prop.key, prop.value);
              }
            });
            this.graph.addEdge(node.right, node);
            this.graph.addEdge(node, node.left); // We have done all the required work, so stop here

            return;
          } else {
            this.graph.addExport('default', node);
          }
        } else {
          // it can be either `exports.name` or `exports["name"]`
          const nameNode = node.left.property;
          this.graph.addExport(_core.types.isStringLiteral(nameNode) ? nameNode.value : nameNode.name, node);
        }
      }
    } else if (this.isTSExporterCall(node)) {
      const [name, identifier] = node.arguments;
      this.graph.addExport(name.value, node);
      this.graph.addEdge(node, identifier);
    }

    const isScopable = _core.types.isScopable(node);

    const isFunction = _core.types.isFunction(node);

    if (isScopable) this.scope.new(_core.types.isProgram(node) || _core.types.isFunction(node));
    if (isFunction) this.fnStack.push(node);
    const visitors = (0, _Visitors.getVisitors)(node);
    let action;

    if (visitors.length > 0) {
      let visitor;

      while (!action && (visitor = visitors.shift())) {
        action = visitor.call(this, node, parent, parentKey, listIdx);
      }
    } else {
      this.baseVisit(node);
    }

    if (parent && action !== 'ignore' && _core.types.isStatement(node)) {
      // Statement always depends on its parent
      this.graph.addEdge(node, parent);
    }

    if (isFunction) this.fnStack.pop();
    if (isScopable) this.scope.dispose();
    return action;
  }

}

var _default = GraphBuilder.build;
exports.default = _default;
//# sourceMappingURL=graphBuilder.js.map