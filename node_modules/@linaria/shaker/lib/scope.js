"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveNode = exports.default = exports.PromisedNode = void 0;

var _core = require("@babel/core");

var _tsInvariant = _interopRequireDefault(require("ts-invariant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line max-classes-per-file
const ResolvedNode = Symbol('ResolvedNode');
const functionScopes = new WeakSet();

class PromisedNode {
  static is(obj) {
    return typeof obj === 'object' && obj !== null && ResolvedNode in obj;
  }

  get identifier() {
    return this[ResolvedNode];
  }

}

exports.PromisedNode = PromisedNode;

const resolveNode = obj => PromisedNode.is(obj) ? obj.identifier : obj;

exports.resolveNode = resolveNode;

const getExportName = node => {
  (0, _tsInvariant.default)(_core.types.isMemberExpression(node), `getExportName expects MemberExpression but received ${node.type}`);
  const {
    object,
    property
  } = node;
  (0, _tsInvariant.default)(_core.types.isIdentifier(object) && object.name === 'exports', "getExportName expects a member expression with 'exports'");
  (0, _tsInvariant.default)(_core.types.isIdentifier(property) || _core.types.isStringLiteral(property), 'getExportName supports only identifiers and literals as names of exported values');
  const name = _core.types.isIdentifier(property) ? property.name : property.value;
  return `exports.${name}`;
};

const scopeIds = new WeakMap();

const getId = (scope, identifier) => {
  const scopeId = scopeIds.get(scope);
  return `${scopeId}:${typeof identifier === 'string' ? identifier : identifier.name}`;
};

const globalIdentifiers = new Set(['exports', 'module']);

class ScopeManager {
  static globalExportsIdentifier = _core.types.identifier('exports');
  static globalModuleIdentifier = _core.types.identifier('module');
  nextId = 0;
  stack = [];
  map = new Map();
  handlers = new Map();
  declarations = new Map();

  get global() {
    return this.map.get('global');
  }

  constructor() {
    this.new(true, 'global');
    this.declare(ScopeManager.globalExportsIdentifier, false);
    this.declare(ScopeManager.globalModuleIdentifier, false);
  } // eslint-disable-next-line no-plusplus


  new(isFunction, scopeId = this.nextId++) {
    const scope = new Map();

    if (isFunction) {
      functionScopes.add(scope);
    }

    scopeIds.set(scope, scopeId);
    this.map.set(scopeId, scope);
    this.handlers.set(scopeId, []);
    this.stack.unshift(scope);
    return scope;
  }

  dispose() {
    const disposed = this.stack.shift();

    if (disposed) {
      this.map.delete(scopeIds.get(disposed));
    }

    return disposed;
  }

  declare(identifierOrMemberExpression, isHoistable, from = null, stack = 0) {
    if (_core.types.isMemberExpression(identifierOrMemberExpression)) {
      // declare receives MemberExpression only if it's `exports.something` expression
      const memberExp = identifierOrMemberExpression;
      const name = getExportName(memberExp);

      if (!this.global.has(name)) {
        this.global.set(name, new Set());
      } // There can be a few `export.foo = …` statements, but we need only the last one


      this.declarations.set(getId(this.global, name), memberExp);
      this.global.get(name).add(memberExp);
      return;
    }

    const identifier = identifierOrMemberExpression;
    const idName = identifier.name;
    const scope = this.stack.slice(stack).find(s => !isHoistable || functionScopes.has(s));

    if (this.global.has(idName) && !globalIdentifiers.has(idName)) {
      // It's probably a declaration of a previous referenced identifier
      // Let's use naïve implementation of hoisting
      const promise = this.declarations.get(getId(this.global, identifier));
      promise[ResolvedNode] = identifier;
      scope.set(idName, new Set([identifier, ...Array.from(this.global.get(idName))]));
      this.global.delete(idName);
    } else {
      scope.set(idName, new Set([identifier]));
    }

    this.declarations.set(getId(scope, identifier), identifier);
    const handlers = this.handlers.get(scopeIds.get(scope));
    handlers.forEach(handler => handler(identifier, from));
  }

  addReference(identifierOrMemberExpression) {
    var _this$stack$find;

    const name = _core.types.isIdentifier(identifierOrMemberExpression) ? identifierOrMemberExpression.name : getExportName(identifierOrMemberExpression);
    const scope = (_this$stack$find = this.stack.find(s => s.has(name))) !== null && _this$stack$find !== void 0 ? _this$stack$find : this.global;
    const id = getId(scope, name);

    if (scope === this.global && !scope.has(name)) {
      scope.set(name, new Set());
      this.declarations.set(id, new PromisedNode());
    }

    scope.get(name).add(identifierOrMemberExpression);
    return this.declarations.get(id);
  }

  whereIsDeclared(identifier) {
    const {
      name
    } = identifier;
    const scope = this.stack.find(s => s.has(name) && s.get(name).has(identifier));

    if (scope) {
      return scopeIds.get(scope);
    }

    if (this.global.has(name)) {
      return 'global';
    }

    return undefined;
  }

  getDeclaration(identifierOrMemberExpOrName) {
    let name;

    if (typeof identifierOrMemberExpOrName === 'string') {
      name = identifierOrMemberExpOrName;
    } else if (_core.types.isMemberExpression(identifierOrMemberExpOrName)) {
      name = getId(this.global, getExportName(identifierOrMemberExpOrName));
    } else {
      const scopeId = this.whereIsDeclared(identifierOrMemberExpOrName);

      if (scopeId === undefined) {
        return undefined;
      }

      name = getId(this.map.get(scopeId), identifierOrMemberExpOrName);
    }

    return resolveNode(this.declarations.get(name));
  }

  addDeclareHandler(handler) {
    const scopeId = scopeIds.get(this.stack[0]);
    this.handlers.get(scopeId).push(handler);
    return () => {
      const handlers = this.handlers.get(scopeId).filter(h => h !== handler);
      this.handlers.set(scopeId, handlers);
    };
  }

}

exports.default = ScopeManager;
//# sourceMappingURL=scope.js.map