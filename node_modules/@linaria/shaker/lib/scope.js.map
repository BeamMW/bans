{"version":3,"sources":["../src/scope.ts"],"names":["ResolvedNode","Symbol","functionScopes","WeakSet","PromisedNode","is","obj","identifier","resolveNode","getExportName","node","t","isMemberExpression","type","object","property","isIdentifier","name","isStringLiteral","value","scopeIds","WeakMap","getId","scope","scopeId","get","globalIdentifiers","Set","ScopeManager","global","map","constructor","Map","new","declare","globalExportsIdentifier","globalModuleIdentifier","isFunction","nextId","add","set","handlers","stack","unshift","dispose","disposed","shift","delete","identifierOrMemberExpression","isHoistable","from","memberExp","has","declarations","idName","slice","find","s","promise","Array","forEach","handler","addReference","id","whereIsDeclared","undefined","getDeclaration","identifierOrMemberExpOrName","addDeclareHandler","push","filter","h"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport invariant from 'ts-invariant';\n\ntype Scope = Map<string, Set<t.Identifier | t.MemberExpression>>;\n\nexport type ScopeId = number | 'global' | 'exports';\nexport type DeclareHandler = (\n  identifier: t.Identifier,\n  from: t.Identifier | null\n) => void;\n\nconst ResolvedNode = Symbol('ResolvedNode');\nconst functionScopes = new WeakSet<Scope>();\n\nexport class PromisedNode<T = t.Node> {\n  static is<TNode>(obj: any): obj is PromisedNode<TNode> {\n    return obj && ResolvedNode in obj;\n  }\n\n  [ResolvedNode]: T | undefined;\n\n  get identifier(): T | undefined {\n    return this[ResolvedNode];\n  }\n}\n\nexport const resolveNode = <T = t.Node>(\n  obj: T | PromisedNode<T> | undefined\n): T | undefined => (PromisedNode.is<T>(obj) ? obj.identifier : obj);\n\nconst getExportName = (node: t.Node): string => {\n  invariant(\n    t.isMemberExpression(node),\n    `getExportName expects MemberExpression but received ${node.type}`\n  );\n\n  const { object, property } = node;\n  invariant(\n    t.isIdentifier(object) && object.name === 'exports',\n    `getExportName expects a member expression with 'exports'`\n  );\n  invariant(\n    t.isIdentifier(property) || t.isStringLiteral(property),\n    `getExportName supports only identifiers and literals as names of exported values`\n  );\n\n  const name = t.isIdentifier(property) ? property.name : property.value;\n  return `exports.${name}`;\n};\n\nconst scopeIds = new WeakMap<Scope, ScopeId>();\nconst getId = (scope: Scope, identifier: t.Identifier | string): string => {\n  const scopeId = scopeIds.get(scope);\n  return `${scopeId}:${\n    typeof identifier === 'string' ? identifier : identifier.name\n  }`;\n};\n\nconst globalIdentifiers = new Set(['exports', 'module']);\n\nexport default class ScopeManager {\n  public static globalExportsIdentifier = t.identifier('exports');\n  public static globalModuleIdentifier = t.identifier('module');\n  private nextId = 0;\n  private readonly stack: Array<Scope> = [];\n  private readonly map: Map<ScopeId, Scope> = new Map();\n  private readonly handlers: Map<ScopeId, Array<DeclareHandler>> = new Map();\n  private readonly declarations: Map<\n    string,\n    t.Identifier | t.MemberExpression | PromisedNode<t.Identifier>\n  > = new Map();\n\n  private get global(): Scope {\n    return this.map.get('global')!;\n  }\n\n  constructor() {\n    this.new(true, 'global');\n    this.declare(ScopeManager.globalExportsIdentifier, false);\n    this.declare(ScopeManager.globalModuleIdentifier, false);\n  }\n\n  new(isFunction: boolean, scopeId: ScopeId = this.nextId++): Scope {\n    const scope: Scope = new Map();\n    if (isFunction) {\n      functionScopes.add(scope);\n    }\n\n    scopeIds.set(scope, scopeId);\n    this.map.set(scopeId, scope);\n    this.handlers.set(scopeId, []);\n    this.stack.unshift(scope);\n    return scope;\n  }\n\n  dispose(): Scope | undefined {\n    const disposed = this.stack.shift();\n    if (disposed) {\n      this.map.delete(scopeIds.get(disposed)!);\n    }\n\n    return disposed;\n  }\n\n  declare(\n    identifierOrMemberExpression: t.Identifier | t.MemberExpression,\n    isHoistable: boolean,\n    from: t.Identifier | null = null,\n    stack = 0\n  ): void {\n    if (t.isMemberExpression(identifierOrMemberExpression)) {\n      // declare receives MemberExpression only if it's `exports.something` expression\n      const memberExp = identifierOrMemberExpression;\n      const name = getExportName(memberExp);\n      if (!this.global.has(name)) {\n        this.global.set(name, new Set());\n      }\n\n      // There can be a few `export.foo = …` statements, but we need only the last one\n      this.declarations.set(getId(this.global, name), memberExp);\n      this.global.get(name)!.add(memberExp);\n      return;\n    }\n\n    const identifier = identifierOrMemberExpression;\n    const idName = identifier.name;\n    const scope = this.stack\n      .slice(stack)\n      .find((s) => !isHoistable || functionScopes.has(s))!;\n    if (this.global.has(idName) && !globalIdentifiers.has(idName)) {\n      // It's probably a declaration of a previous referenced identifier\n      // Let's use naïve implementation of hoisting\n      const promise = this.declarations.get(\n        getId(this.global, identifier)\n      )! as PromisedNode<t.Identifier>;\n      promise[ResolvedNode] = identifier;\n      scope.set(\n        idName,\n        new Set([identifier, ...Array.from(this.global.get(idName)!)])\n      );\n      this.global.delete(idName);\n    } else {\n      scope.set(idName, new Set([identifier]));\n    }\n\n    this.declarations.set(getId(scope, identifier), identifier);\n    const handlers = this.handlers.get(scopeIds.get(scope)!)!;\n    handlers.forEach((handler) => handler(identifier, from));\n  }\n\n  addReference(\n    identifierOrMemberExpression: t.Identifier | t.MemberExpression\n  ): t.Identifier | t.MemberExpression | PromisedNode {\n    const name = t.isIdentifier(identifierOrMemberExpression)\n      ? identifierOrMemberExpression.name\n      : getExportName(identifierOrMemberExpression);\n    const scope = this.stack.find((s) => s.has(name)) ?? this.global;\n    const id = getId(scope, name);\n    if (scope === this.global && !scope.has(name)) {\n      scope.set(name, new Set());\n      this.declarations.set(id, new PromisedNode());\n    }\n\n    scope.get(name)!.add(identifierOrMemberExpression);\n    return this.declarations.get(id)!;\n  }\n\n  whereIsDeclared(identifier: t.Identifier): ScopeId | undefined {\n    const name = identifier.name;\n    const scope = this.stack.find(\n      (s) => s.has(name) && s.get(name)!.has(identifier)\n    );\n    if (scope) {\n      return scopeIds.get(scope);\n    }\n\n    if (this.global.has(name)) {\n      return 'global';\n    }\n\n    return undefined;\n  }\n\n  getDeclaration(\n    identifierOrMemberExpOrName: t.Identifier | t.MemberExpression | string\n  ): t.Identifier | t.MemberExpression | undefined {\n    let name: string;\n    if (typeof identifierOrMemberExpOrName === 'string') {\n      name = identifierOrMemberExpOrName;\n    } else if (t.isMemberExpression(identifierOrMemberExpOrName)) {\n      name = getId(this.global, getExportName(identifierOrMemberExpOrName));\n    } else {\n      const scopeId = this.whereIsDeclared(identifierOrMemberExpOrName);\n      if (scopeId === undefined) {\n        return undefined;\n      }\n\n      name = getId(this.map.get(scopeId)!, identifierOrMemberExpOrName);\n    }\n\n    return resolveNode(this.declarations.get(name));\n  }\n\n  addDeclareHandler(handler: DeclareHandler): () => void {\n    const scopeId = scopeIds.get(this.stack[0])!;\n    this.handlers.get(scopeId)!.push(handler);\n    return () => {\n      const handlers = this.handlers.get(scopeId)!.filter((h) => h !== handler);\n      this.handlers.set(scopeId, handlers);\n    };\n  }\n}\n"],"file":"scope.js"}