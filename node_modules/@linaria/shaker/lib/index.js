"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _generator = _interopRequireDefault(require("@babel/generator"));

var _core = require("@babel/core");

var _logger = require("@linaria/logger");

var _babelPreset = require("@linaria/babel-preset");

var _shaker = _interopRequireDefault(require("./shaker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function prepareForShake(filename, options, code) {
  const transformOptions = (0, _babelPreset.buildOptions)(filename, options);
  transformOptions.ast = true;
  transformOptions.presets.unshift([require.resolve('@babel/preset-env'), {
    targets: 'ie 11',
    // we need this plugin so we list it explicitly, explanation in `packages/extractor/src/index`
    include: ['@babel/plugin-transform-template-literals']
  }]);
  transformOptions.presets.unshift([require.resolve('@linaria/preeval'), options]);
  transformOptions.plugins.unshift(require.resolve('babel-plugin-transform-react-remove-prop-types'));
  transformOptions.plugins.unshift([require.resolve('@babel/plugin-transform-runtime'), {
    useESModules: false
  }]);
  (0, _logger.debug)('evaluator:shaker:transform', `Transform ${filename} with options ${JSON.stringify(transformOptions, null, 2)}`);
  const transformed = (0, _core.transformSync)(code, transformOptions);

  if (transformed === null || !transformed.ast) {
    throw new Error(`${filename} cannot be transformed`);
  }

  return transformed.ast.program;
}

const shaker = (filename, options, text, only = null) => {
  const [shaken, imports] = (0, _shaker.default)(prepareForShake(filename, options, text), only);
  (0, _logger.debug)('evaluator:shaker:generate', `Generate shaken source code ${filename}`);
  const {
    code: shakenCode
  } = (0, _generator.default)(shaken);
  return [shakenCode, imports];
};

var _default = shaker;
exports.default = _default;
//# sourceMappingURL=index.js.map