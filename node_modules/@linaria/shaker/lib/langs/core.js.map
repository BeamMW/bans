{"version":3,"sources":["../../src/langs/core.ts"],"names":["isIdentifier","node","name","t","undefined","Array","isArray","includes","sideEffects","callee","isMemberExpression","property","state","graph","addEdge","arguments","getCallee","isSequenceExpression","expressions","length","first","second","isNumericLiteral","value","isTSLib","scope","declaration","getDeclaration","isTSReexport","isCallExpression","exportsIdentifier","ScopeManager","globalExportsIdentifier","object","findWildcardReexportStatement","identifierName","declarator","getParent","isVariableDeclarator","isVariableDeclaration","program","isProgram","body","find","statement","isExpressionStatement","expression","argument","getAffectedNodes","obj","isStringLiteral","addExport","isLazyInit","arg","isLogicalExpression","operator","left","right","isAssignmentExpression","visitors","ExpressionStatement","baseVisit","Function","unsubscribe","onVisit","descendant","params","forEach","param","isFunctionDeclaration","id","isFunctionExpression","Block","exportsDeclaration","directives","directive","Directive","TryStatement","handler","finalizer","block","CatchClause","IfStatement","consequent","test","WhileStatement","SwitchCase","SwitchStatement","cases","c","discriminant","ForStatement","init","update","child","ForInStatement","Terminatorless","isBreakStatement","isContinueStatement","closestFunctionNode","fnStack","ObjectExpression","context","push","properties","prop","isObjectMethod","key","isObjectProperty","isSpreadElement","pop","MemberExpression","visit","isLVal","declare","addReference","computed","importAliases","has","source","get","imports","AssignmentExpression","VariableDeclarator","declared","meta","set","unregister","addDeclareHandler","identifier","from","delete","VariableDeclaration","kind","declarations","CallExpression","parent","scopeId","whereIsDeclared","firstArg","reexports","importTypes","local","_imported","startsWith","conditions","callback","affectedNode","SequenceExpression","identifierHandlers","keep","refer"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport type {\n  AssignmentExpression,\n  Block,\n  CallExpression,\n  CatchClause,\n  Directive,\n  ExpressionStatement,\n  ForInStatement,\n  ForStatement,\n  Function,\n  Identifier,\n  IfStatement,\n  MemberExpression,\n  Node,\n  ObjectExpression,\n  SequenceExpression,\n  SwitchCase,\n  SwitchStatement,\n  Terminatorless,\n  TryStatement,\n  VariableDeclaration,\n  VariableDeclarator,\n  WhileStatement,\n} from '@babel/types';\n\nimport { peek } from '@linaria/babel-preset';\nimport type { IdentifierHandlers, Visitors } from '../types';\nimport GraphBuilderState from '../GraphBuilderState';\nimport ScopeManager from '../scope';\nimport DepsGraph from '../DepsGraph';\n\nfunction isIdentifier(\n  node: Node,\n  name?: string | string[]\n): node is Identifier {\n  return (\n    t.isIdentifier(node) &&\n    (name === undefined ||\n      (Array.isArray(name) ? name.includes(node.name) : node.name === name))\n  );\n}\n\ntype SideEffect = [\n  {\n    callee?: (child: CallExpression['callee']) => boolean;\n    arguments?: (child: CallExpression['arguments']) => boolean;\n  },\n  (node: CallExpression, state: GraphBuilderState) => void\n];\n\nconst sideEffects: SideEffect[] = [\n  [\n    // if the first argument of forEach is required, mark forEach as required\n    {\n      callee: (node) =>\n        t.isMemberExpression(node) &&\n        t.isIdentifier(node.property) &&\n        node.property.name === 'forEach',\n    },\n    (node, state) => state.graph.addEdge(node.arguments[0], node),\n  ],\n];\n\nfunction getCallee(node: CallExpression): Node {\n  if (\n    t.isSequenceExpression(node.callee) &&\n    node.callee.expressions.length === 2\n  ) {\n    const [first, second] = node.callee.expressions;\n    if (t.isNumericLiteral(first) && first.value === 0) {\n      return second;\n    }\n  }\n\n  return node.callee;\n}\n\nfunction isTSLib(node: t.Node, scope: ScopeManager) {\n  if (!t.isIdentifier(node)) {\n    return false;\n  }\n\n  const declaration = scope.getDeclaration(node);\n  return t.isIdentifier(declaration) && declaration.name === 'tslib_1';\n}\n\nfunction isTSReexport(\n  node: t.Node,\n  scope: ScopeManager\n): node is t.Node & { callee: { object: t.Identifier } } {\n  if (!t.isCallExpression(node)) {\n    return false;\n  }\n\n  const {\n    callee,\n    arguments: [, exportsIdentifier],\n  } = node;\n  if (\n    !t.isIdentifier(exportsIdentifier) ||\n    exportsIdentifier.name !== 'exports' ||\n    scope.getDeclaration(exportsIdentifier) !==\n      ScopeManager.globalExportsIdentifier\n  ) {\n    return false;\n  }\n\n  if (!t.isMemberExpression(callee)) {\n    return false;\n  }\n\n  const { object, property } = callee;\n  if (!t.isIdentifier(property) || property.name !== '__exportStar') {\n    return false;\n  }\n\n  return isTSLib(object, scope);\n}\n\nfunction findWildcardReexportStatement(\n  node: t.CallExpression,\n  identifierName: string,\n  graph: DepsGraph\n): t.Statement | null {\n  if (!t.isIdentifier(node.callee) || node.callee.name !== 'require')\n    return null;\n\n  const declarator = graph.getParent(node);\n  if (!t.isVariableDeclarator(declarator)) return null;\n\n  const declaration = graph.getParent(declarator);\n  if (!t.isVariableDeclaration(declaration)) return null;\n\n  const program = graph.getParent(declaration);\n  if (!t.isProgram(program)) return null;\n\n  // Our node is a correct export\n  // Let's check that we have something that looks like transpiled re-export\n  return (\n    program.body.find((statement) => {\n      /*\n       * We are looking for `Object.keys(_bar).forEach(…)`\n       */\n\n      if (!t.isExpressionStatement(statement)) return false;\n\n      const expression = statement.expression;\n      if (!t.isCallExpression(expression)) return false;\n\n      const callee = expression.callee;\n      if (!t.isMemberExpression(callee)) return false;\n\n      const { object, property } = callee;\n\n      if (!isIdentifier(property, 'forEach')) return false;\n\n      if (!t.isCallExpression(object)) return false;\n\n      // `object` should be `Object.keys`\n      if (\n        !t.isMemberExpression(object.callee) ||\n        !isIdentifier(object.callee.object, 'Object') ||\n        !isIdentifier(object.callee.property, 'keys')\n      )\n        return false;\n\n      //\n      const [argument] = object.arguments;\n      return isIdentifier(argument, identifierName);\n    }) ?? null\n  );\n}\n\n/*\n * Returns nodes which are implicitly affected by specified node\n */\nfunction getAffectedNodes(node: Node, state: GraphBuilderState): Node[] {\n  // FIXME: this method should be generalized\n  const callee = t.isCallExpression(node) ? getCallee(node) : null;\n  if (\n    t.isCallExpression(node) &&\n    t.isMemberExpression(callee) &&\n    isIdentifier(callee.object, 'Object') &&\n    isIdentifier(callee.property, [\n      'assign',\n      'defineProperty',\n      'defineProperties',\n      'freeze',\n      'observe',\n    ])\n  ) {\n    const [obj, property] = node.arguments;\n    if (!t.isIdentifier(obj)) {\n      return [];\n    }\n\n    if (\n      state.scope.getDeclaration(obj) !== ScopeManager.globalExportsIdentifier\n    ) {\n      return [node.arguments[0]];\n    }\n\n    if (t.isStringLiteral(property)) {\n      if (property.value === '__esModule') {\n        return [node.arguments[0]];\n      }\n\n      state.graph.addExport(property.value, node);\n    }\n  }\n\n  return [];\n}\n\n/*\n * In some cases (such as enums) babel uses CallExpression for object initializations\n * (function (Colors) {\n *   Colors[\"BLUE\"] = \"#27509A\";\n * })(Colors || (Colors = {}));\n */\nfunction isLazyInit(\n  statement: ExpressionStatement\n): statement is ExpressionStatement & {\n  expression: {\n    arguments: [{ right: AssignmentExpression }];\n  };\n} {\n  const { expression } = statement;\n  if (!t.isCallExpression(expression) || expression.arguments.length !== 1) {\n    return false;\n  }\n\n  const [arg] = expression.arguments;\n  if (!t.isLogicalExpression(arg) || arg.operator !== '||') {\n    return false;\n  }\n\n  const { left, right } = arg;\n  return t.isIdentifier(left) && t.isAssignmentExpression(right);\n}\n\nexport const visitors: Visitors = {\n  /*\n   * ExpressionStatement\n   * This is one of the rare cases when a child defines a dependency on a parent.\n   * Suppose we have a code like this:\n   * const fn = () => {\n   *   let a = 2;\n   *   a *= 2;\n   *   return a;\n   * };\n   *\n   * `a *= 2` here is an ExpressionStatement node which contains an expression AssignmentExpression `a *= 2`.\n   * The result of AssignmentExpression here depends on the fact of ExpressionStatement execution,\n   * that's why we need to mark the statement as a dependency of the expression.\n   * If we don't mark it, it will be cut as a useless statement.\n   */\n  ExpressionStatement(this: GraphBuilderState, node: ExpressionStatement) {\n    this.baseVisit(node);\n\n    this.graph.addEdge(node, node.expression);\n    this.graph.addEdge(node.expression, node);\n\n    if (isLazyInit(node)) {\n      this.graph.addEdge(node.expression.arguments[0].right, node);\n    }\n  },\n\n  /*\n   * FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod;\n   * Functions can be either a statement or an expression.\n   * That's why we need to disable default dependency resolving strategy for expressions by passing `ignoreDeps` flag.\n   * Every function must have a body. Without a body, it becomes invalid.\n   * In general, a body depends on parameters of a function.\n   * In real life, some of the parameters can be omitted, but it's not trivial to implement that type of tree shaking.\n   */\n  Function(this: GraphBuilderState, node: Function) {\n    const unsubscribe = this.onVisit((descendant) =>\n      this.graph.addEdge(node, descendant)\n    );\n    this.baseVisit(node, true); // ignoreDeps=true prevents default dependency resolving\n    unsubscribe();\n\n    this.graph.addEdge(node, node.body);\n\n    node.params.forEach((param) => this.graph.addEdge(node.body, param));\n    if (t.isFunctionDeclaration(node) && node.id) {\n      // `id` is an identifier which depends on the function declaration\n      this.graph.addEdge(node.id, node);\n    }\n\n    if (\n      t.isFunctionExpression(node) &&\n      node.id !== null &&\n      node.id !== undefined\n    ) {\n      // keep function name in expressions like `const a = function a();`\n      this.graph.addEdge(node, node.id);\n    }\n\n    if (t.isFunctionDeclaration(node) && node.id) {\n      this.graph.addEdge(node, node.id);\n    }\n  },\n\n  /*\n   * BlockStatement | Program\n   * The same situation as in ExpressionStatement: if one of the expressions is required, the block itself is also required.\n   * Whereas a block doesn't depend on its children.\n   * Example:\n   * 1. let c;\n   * 2. { // BlockStatement begin\n   * 3.   let a = 1;\n   * 4.   let b = 2;\n   * 5.   a++;\n   * 6.   a = c;\n   * 7. } // BlockStatement end\n   *\n   * If we want to evaluate the value of `c`, we need to evaluate lines 1, 3, 5 and 6,\n   * but we don't need line 4, even though it's a child of the block.\n   */\n  Block(this: GraphBuilderState, node: Block) {\n    this.baseVisit(node);\n\n    if (t.isProgram(node)) {\n      const exportsDeclaration = this.scope.getDeclaration('global:exports')!;\n      this.graph.addEdge(node, exportsDeclaration);\n      node.directives.forEach((directive) =>\n        this.graph.addEdge(node, directive)\n      );\n    }\n  },\n\n  Directive(this: GraphBuilderState, node: Directive) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.value);\n  },\n\n  /*\n   * TryStatement\n   * try { /* block *\\/ } catch() {/* handler *\\/} finalize {/* finalizer *\\/}\n   * `handler` and `finalizer` do not make sense without `block`\n   * `block` depends on the whole node.\n   */\n  TryStatement(this: GraphBuilderState, node: TryStatement) {\n    this.baseVisit(node);\n    [node.handler, node.finalizer].forEach((statement) => {\n      if (statement) {\n        this.graph.addEdge(node.block, statement);\n        this.graph.addEdge(statement, node.block);\n      }\n    });\n  },\n\n  CatchClause(this: GraphBuilderState, node: CatchClause) {\n    this.baseVisit(node);\n\n    this.graph.addEdge(node, node.body);\n  },\n\n  IfStatement(this: GraphBuilderState, node: IfStatement) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.consequent);\n    this.graph.addEdge(node, node.test);\n  },\n\n  /*\n   * WhileStatement\n   * Pretty simple behaviour here:\n   * • if body is required, the statement is required\n   * • if the statement is required, the condition is also required.\n   */\n  WhileStatement(this: GraphBuilderState, node: WhileStatement) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.test);\n  },\n\n  SwitchCase(this: GraphBuilderState, node: SwitchCase) {\n    this.baseVisit(node);\n    node.consequent.forEach((statement) => this.graph.addEdge(statement, node));\n    if (node.test) {\n      this.graph.addEdge(node, node.test);\n    }\n  },\n\n  SwitchStatement(this: GraphBuilderState, node: SwitchStatement) {\n    this.baseVisit(node);\n    node.cases.forEach((c) => this.graph.addEdge(c, node));\n    this.graph.addEdge(node, node.discriminant);\n  },\n\n  ForStatement(this: GraphBuilderState, node: ForStatement) {\n    this.baseVisit(node);\n\n    [node.init, node.test, node.update, node.body].forEach((child) => {\n      if (child) {\n        this.graph.addEdge(node, child);\n      }\n    });\n  },\n\n  /*\n   * ForInStatement\n   * for (const k in o) { body }\n   */\n  ForInStatement(this: GraphBuilderState, node: ForInStatement) {\n    this.baseVisit(node);\n\n    if (node.body) {\n      this.graph.addEdge(node, node.body);\n      this.graph.addEdge(node.body, node.left);\n    }\n\n    this.graph.addEdge(node.left, node.right);\n  },\n\n  /*\n   * BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldExpression | AwaitExpression\n   * All these nodes are required to evaluate the value of a function in which they are defined.\n   * Also, the value of these nodes depends on the argument if it is presented.\n   */\n  Terminatorless(this: GraphBuilderState, node: Terminatorless) {\n    this.baseVisit(node);\n\n    if (\n      !(t.isBreakStatement(node) || t.isContinueStatement(node)) &&\n      node.argument\n    ) {\n      this.graph.addEdge(node, node.argument);\n    }\n\n    const closestFunctionNode = peek(this.fnStack);\n    this.graph.addEdge(closestFunctionNode, node);\n  },\n\n  /*\n   * ObjectExpression\n   * Objects are… complicated. Especially because similarly looking code can be either an expression or a pattern.\n   * In this case we work with an expression like:\n   * const obj = {\n   *   method() {}, // ObjectMethod\n   *   property: \"value\", // ObjectProperty\n   *   ...rest, // SpreadElement\n   * }\n   */\n  ObjectExpression(this: GraphBuilderState, node: ObjectExpression) {\n    this.context.push('expression');\n    this.baseVisit(node);\n    node.properties.forEach((prop) => {\n      this.graph.addEdge(node, prop);\n      if (t.isObjectMethod(prop)) {\n        this.graph.addEdge(prop, prop.key);\n        this.graph.addEdge(prop, prop.body);\n      } else if (t.isObjectProperty(prop)) {\n        this.graph.addEdge(prop, prop.key);\n        this.graph.addEdge(prop, prop.value);\n      } else if (t.isSpreadElement(prop)) {\n        this.graph.addEdge(prop, prop.argument);\n      }\n    });\n    this.context.pop();\n  },\n\n  /*\n   * MemberExpression\n   * It's about a simple expression like `obj.foo` or `obj['foo']`.\n   * In addition to default behaviour (an expression depends on all its children),\n   * we add a backward dependency from an object to a node for processing member\n   * expressions in assignments.\n   *\n   * Example:\n   * let obj = { a: 1 };\n   * obj.b = 2;\n   *\n   * If we try to evaluate `obj` without backward dependency,\n   * `obj.b = 2` will be cut and we will get just `{ a: 1 }`.\n   */\n  MemberExpression(this: GraphBuilderState, node: MemberExpression) {\n    if (this.visit(node.object, node, 'object') !== 'ignore') {\n      this.graph.addEdge(node, node.object);\n    }\n\n    this.context.push('expression');\n    if (this.visit(node.property, node, 'property') !== 'ignore') {\n      this.graph.addEdge(node, node.property);\n    }\n    this.context.pop();\n\n    this.graph.addEdge(node.object, node);\n\n    if (\n      isIdentifier(node.object, 'exports') &&\n      this.scope.getDeclaration(node.object) ===\n        ScopeManager.globalExportsIdentifier\n    ) {\n      // We treat `exports.something` and `exports['something']` as identifiers in the global scope\n      this.graph.addEdge(node, node.object);\n      this.graph.addEdge(node, node.property);\n\n      const isLVal = peek(this.context) === 'lval';\n      if (isLVal) {\n        this.scope.declare(node, false);\n      } else {\n        const declaration = this.scope.addReference(node);\n        this.graph.addEdge(node, declaration);\n      }\n\n      return;\n    }\n\n    if (\n      t.isIdentifier(node.object) &&\n      ((t.isIdentifier(node.property) && !node.computed) ||\n        t.isStringLiteral(node.property))\n    ) {\n      // It's simple `foo.bar` or `foo[\"bar\"]` expression. Is it a usage of a required library?\n      const declaration = this.scope.getDeclaration(node.object);\n      if (\n        t.isIdentifier(declaration) &&\n        this.graph.importAliases.has(declaration)\n      ) {\n        // It is. We can remember what exactly we use from it.\n        const source = this.graph.importAliases.get(declaration)!;\n        this.graph.imports.get(source)!.push(node.property);\n      }\n    }\n  },\n\n  /*\n   * AssignmentExpression\n   * `a = b`, `{ ...rest } = obj`, `obj.a = 3`, etc.\n   * It's not a declaration, it's just an assignment, but it affects\n   * the value of declared variable if the variable it mentioned in the left part.\n   * So, we apply some context-magic here in order to catch reference of variables in the left part.\n   * We switch the context to `lval` and continue traversing through the left branch.\n   * If we then meet some identifier, we mark it as a dependency of its declaration.\n   */\n  AssignmentExpression(this: GraphBuilderState, node: AssignmentExpression) {\n    this.context.push('lval');\n    this.visit<AssignmentExpression['left'], AssignmentExpression>(\n      node.left,\n      node,\n      'left'\n    );\n    this.context.pop();\n\n    this.visit(node.right, node, 'right');\n\n    // The value of an expression depends on the left part.\n    this.graph.addEdge(node, node.left);\n\n    // The left part of an assignment depends on the right part.\n    this.graph.addEdge(node.left, node.right);\n\n    // At the same time, the left part doesn't make any sense without the whole expression.\n    this.graph.addEdge(node.left, node);\n  },\n\n  /*\n   * VariableDeclarator\n   * It would be pretty simple if it weren't used to declare variables from other modules.\n   */\n  VariableDeclarator(this: GraphBuilderState, node: VariableDeclarator) {\n    /*\n     * declared is used for detecting external dependencies in cases like\n     * const { a, b, c } = require('module');\n     *\n     * We are remembering all declared variables in order to use it later in CallExpression visitor\n     */\n    const declared: Array<[Identifier, Identifier | null]> = [];\n    this.meta.set('declared', declared);\n    const unregister = this.scope.addDeclareHandler((identifier, from) =>\n      declared.push([identifier, from])\n    );\n    this.baseVisit(node);\n    this.meta.delete('declared');\n    unregister();\n\n    if (node.init) {\n      // If there is an initialization part, the identifier depends on it.\n      this.graph.addEdge(node.id, node.init);\n    }\n\n    // If we want to evaluate the value of a declared identifier,\n    // we need to evaluate the whole expression.\n    this.graph.addEdge(node.id, node);\n\n    // If a statement is required itself, an id is also required\n    this.graph.addEdge(node, node.id);\n  },\n\n  /*\n   * VariableDeclaration\n   * It's just a wrapper for group of VariableDeclarator.\n   * If one of the declarators is required, the wrapper itself is also required.\n   */\n  VariableDeclaration(this: GraphBuilderState, node: VariableDeclaration) {\n    this.meta.set('kind-of-declaration', node.kind);\n    this.baseVisit(node);\n    node.declarations.forEach((declaration) =>\n      this.graph.addEdge(declaration, node)\n    );\n    this.meta.delete('kind-of-declaration');\n  },\n\n  /*\n   * CallExpression\n   * Do you remember that we have already mentioned it in VariableDeclarator?\n   * It is a simple expression with default behaviour unless it is a `require`.\n   *\n   * Another tricky use case here is functions with side effects (e.g. `Object.defineProperty`).\n   */\n  CallExpression(\n    this: GraphBuilderState,\n    node: CallExpression,\n    parent: Node | null\n  ) {\n    this.baseVisit(node);\n\n    if (t.isIdentifier(node.callee) && node.callee.name === 'require') {\n      // It looks like a module import …\n      const scopeId = this.scope.whereIsDeclared(node.callee);\n      if (scopeId && scopeId !== 'global') {\n        // … but it is just a user defined function\n        return;\n      }\n\n      const [firstArg] = node.arguments;\n      if (!t.isStringLiteral(firstArg)) {\n        // dynamic import? Maybe someday we can do something about it\n        return;\n      }\n\n      const { value: source } = firstArg;\n      const declared = this.meta.get('declared') as Array<\n        [Identifier, Identifier | null]\n      >;\n      if (!declared) {\n        // Is it a ts reexport?\n        // tslib_1.__exportStar(require(\"./Async\"), exports);\n        if (parent && isTSReexport(parent, this.scope)) {\n          if (!this.graph.imports.has(source)) {\n            this.graph.imports.set(source, []);\n          }\n\n          this.graph.addEdge(parent.callee.object, parent);\n          this.graph.reexports.push(parent.callee.object);\n          this.graph.importTypes.set(source, 'reexport');\n        }\n\n        // This is a standalone `require`\n        return;\n      }\n\n      // Define all declared variables as external dependencies.\n      declared.forEach(([local, _imported]) =>\n        // FIXME: var slugify = require('../slugify').default;\n        {\n          if (!this.graph.imports.has(source)) {\n            this.graph.imports.set(source, []);\n          }\n\n          if (\n            parent &&\n            t.isMemberExpression(parent) &&\n            t.isIdentifier(parent.property)\n          ) {\n            // An imported function is specified right here.\n            // eg. require('../slugify').default\n            this.graph.imports.get(source)!.push(parent.property);\n          } else {\n            if (\n              t.isCallExpression(parent) &&\n              t.isIdentifier(parent.callee) &&\n              typeof parent.callee.name === 'string'\n            ) {\n              if (parent.callee.name.startsWith('_interopRequireDefault')) {\n                this.graph.importTypes.set(source, 'default');\n              } else if (\n                parent.callee.name.startsWith('_interopRequireWildcard')\n              ) {\n                this.graph.importTypes.set(source, 'wildcard');\n              } else {\n                // What I've missed?\n              }\n            }\n\n            // Do we know the type of import?\n            if (!this.graph.importTypes.has(source)) {\n              // Is it a wildcard reexport? Let's check.\n              const statement = findWildcardReexportStatement(\n                node,\n                local.name,\n                this.graph\n              );\n              if (statement) {\n                this.graph.addEdge(local, statement);\n                this.graph.reexports.push(local);\n                this.graph.importTypes.set(source, 'reexport');\n              }\n            }\n\n            // The whole namespace was imported. We will know later, what exactly we need.\n            // eg. const slugify = require('../slugify');\n            this.graph.importAliases.set(local, source);\n          }\n        }\n      );\n\n      return;\n    }\n\n    sideEffects.forEach(([conditions, callback]) => {\n      if (\n        (conditions.callee && !conditions.callee(node.callee)) ||\n        (conditions.arguments && !conditions.arguments(node.arguments))\n      ) {\n        return;\n      }\n\n      return callback(node, this);\n    });\n\n    getAffectedNodes(node, this).forEach((affectedNode) => {\n      this.graph.addEdge(affectedNode, node);\n      if (t.isIdentifier(affectedNode)) {\n        this.graph.addEdge(\n          this.scope.getDeclaration(affectedNode)!,\n          affectedNode\n        );\n      }\n    });\n  },\n\n  /*\n   * SequenceExpression\n   * It is a special case of expression in which the value of the whole\n   * expression depends only on the last subexpression in the list.\n   * The rest of the subexpressions can be omitted if they don't have dependent nodes.\n   *\n   * Example:\n   * const a = (1, 2, b = 3, 4, b + 2); // `a` will be equal 5\n   */\n  SequenceExpression(this: GraphBuilderState, node: SequenceExpression) {\n    // Sequence value depends on only last expression in the list\n    this.baseVisit(node, true);\n    if (node.expressions.length > 0) {\n      this.graph.addEdge(node, node.expressions[node.expressions.length - 1]);\n    }\n  },\n};\n\nexport const identifierHandlers: IdentifierHandlers = {\n  declare: [\n    ['CatchClause', 'param'],\n    ['Function', 'params'],\n    ['FunctionExpression', 'id'],\n    ['RestElement', 'argument'],\n    ['ThrowStatement', 'argument'],\n    ['VariableDeclarator', 'id'],\n  ],\n  keep: [['ObjectProperty', 'key']],\n  refer: [\n    ['ArrayExpression', 'elements'],\n    ['AssignmentExpression', 'left', 'right'],\n    ['BinaryExpression', 'left', 'right'],\n    ['CallExpression', 'arguments', 'callee'],\n    ['ConditionalExpression', 'test', 'consequent', 'alternate'],\n    ['ForInStatement', 'right'],\n    ['Function', 'body'],\n    ['IfStatement', 'test'],\n    ['LogicalExpression', 'left', 'right'],\n    ['NewExpression', 'arguments', 'callee'],\n    ['ObjectProperty', 'value'],\n    ['ReturnStatement', 'argument'],\n    ['SequenceExpression', 'expressions'],\n    ['SwitchStatement', 'discriminant'],\n    ['UnaryExpression', 'argument'],\n    ['UpdateExpression', 'argument'],\n    ['VariableDeclarator', 'init'],\n  ],\n};\n"],"file":"core.js"}