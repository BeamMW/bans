import type { CallExpression, Expression, ObjectExpression, SourceLocation } from '@babel/types';
import type { StyledMeta } from '@linaria/core';
import type { ProcessorParams } from '@linaria/core/processors/BaseProcessor';
import BaseProcessor from '@linaria/core/processors/BaseProcessor';
import type { Rules, WrappedNode, IInterpolation, ValueCache } from '@linaria/core/processors/types';
export declare function hasMeta(value: unknown): value is StyledMeta;
export interface IProps {
    atomic?: boolean;
    class?: string;
    name: string;
    vars?: Record<string, Expression[]>;
}
export default class StyledProcessor extends BaseProcessor {
    component: WrappedNode;
    constructor(...args: ProcessorParams);
    addInterpolation(node: Expression, source: string): string;
    extractRules(valueCache: ValueCache, cssText: string, loc?: SourceLocation | null): [Rules, string];
    getRuntimeReplacement(classes: string, uniqInterpolations: IInterpolation[]): [Expression, boolean];
    get asSelector(): string;
    protected get tagExpressionArgument(): Expression;
    protected get tagExpression(): CallExpression;
    get valueSource(): string;
    protected getProps(classes: string, uniqInterpolations: IInterpolation[]): IProps;
    protected getTagComponentProps(props: IProps): ObjectExpression;
    protected getVariableId(value: string): string;
}
