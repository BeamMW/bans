{"version":3,"sources":["../src/eval-cache.ts"],"names":["createHash","debug","fileHashes","Map","evalCache","fileKeys","hash","text","update","digest","lastText","lastHash","memoizedHash","toKey","filename","exports","length","join","clear","clearForFile","keys","get","key","delete","set","has","textHash","undefined","value","push"],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\nimport { debug } from '@linaria/logger';\n\nconst fileHashes = new Map<string, string>();\nconst evalCache = new Map<string, any>();\nconst fileKeys = new Map<string, string[]>();\n\nconst hash = (text: string) => createHash('sha1').update(text).digest('base64');\n\nlet lastText: string = '';\nlet lastHash: string = hash(lastText);\n\nconst memoizedHash: typeof hash = (text) => {\n  if (lastText !== text) {\n    lastHash = hash(text);\n    lastText = text;\n  }\n\n  return lastHash;\n};\n\nconst toKey = (filename: string, exports: string[]) =>\n  exports.length > 0 ? `${filename}:${exports.join(',')}` : filename;\n\nexport const clear = () => {\n  fileHashes.clear();\n  evalCache.clear();\n  fileKeys.clear();\n};\n\nexport const clearForFile = (filename: string) => {\n  const keys = fileKeys.get(filename) ?? [];\n  if (keys.length === 0) {\n    return;\n  }\n\n  debug('eval-cache:clear-for-file', filename);\n\n  for (const key of keys) {\n    fileHashes.delete(key);\n    evalCache.delete(key);\n  }\n\n  fileKeys.set(filename, []);\n};\n\nexport const has = (\n  [filename, ...exports]: string[],\n  text: string\n): boolean => {\n  const key = toKey(filename, exports);\n  const textHash = memoizedHash(text);\n  debug('eval-cache:has', `${key} ${textHash}`);\n\n  return fileHashes.get(key) === textHash;\n};\n\nexport const get = ([filename, ...exports]: string[], text: string): any => {\n  const key = toKey(filename, exports);\n  const textHash = memoizedHash(text);\n  debug('eval-cache:get', `${key} ${textHash}`);\n\n  if (fileHashes.get(key) !== textHash) {\n    return undefined;\n  }\n\n  return evalCache.get(key);\n};\n\nexport const set = (\n  [filename, ...exports]: string[],\n  text: string,\n  value: any\n): void => {\n  const key = toKey(filename, exports);\n  const textHash = memoizedHash(text);\n  debug('eval-cache:set', `${key} ${textHash}`);\n\n  fileHashes.set(key, textHash);\n  evalCache.set(key, value);\n\n  if (!fileKeys.has(filename)) {\n    fileKeys.set(filename, []);\n  }\n\n  fileKeys.get(filename)!.push(key);\n};\n"],"file":"eval-cache.js"}