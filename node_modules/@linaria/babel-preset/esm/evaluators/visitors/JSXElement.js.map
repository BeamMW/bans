{"version":3,"file":"JSXElement.js","names":["types","t","getFunctionName","path","isClassMethod","isIdentifier","node","key","name","JSXElement","emptyFragment","jsxFragment","jsxOpeningFragment","jsxClosingFragment","scopePath","scope","isFunction","emptyBody","blockStatement","returnStatement","decl","findParent","p","isClassDeclaration","replaceWith","functionDeclaration","id","body","get","Array","isArray","Error","params"],"sources":["../../../src/evaluators/visitors/JSXElement.ts"],"sourcesContent":["import { types as t } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\nimport type {\n  Function as FunctionNode,\n  JSXElement as JSXElementNode,\n} from '@babel/types';\n\nfunction getFunctionName(path: NodePath<FunctionNode>): string | null {\n  if (path.isClassMethod() && t.isIdentifier(path.node.key)) {\n    return path.node.key.name;\n  }\n\n  return null;\n}\n\nexport default function JSXElement(path: NodePath<JSXElementNode>) {\n  // JSX can be safely replaced on an empty fragment because it is unnecessary for styles\n  const emptyFragment = t.jsxFragment(\n    t.jsxOpeningFragment(),\n    t.jsxClosingFragment(),\n    []\n  );\n\n  // We can do even more\n  // If that JSX is a result of a function, we can replace the function body.\n  const scopePath = path.scope.path;\n  if (scopePath.isFunction()) {\n    const emptyBody = t.blockStatement([t.returnStatement(emptyFragment)]);\n\n    // Is it not just a function, but a method `render`?\n    if (getFunctionName(scopePath) === 'render') {\n      const decl = scopePath.findParent((p) => p.isClassDeclaration());\n\n      // Replace the whole component\n      if (decl?.isClassDeclaration()) {\n        decl.replaceWith(t.functionDeclaration(decl.node.id, [], emptyBody));\n\n        return;\n      }\n    }\n\n    const body = scopePath.get('body');\n    if (Array.isArray(body)) {\n      throw new Error(\n        \"A body of a function is expected to be a single element but an array was returned. It's possible if JS syntax has been changed since that code was written.\"\n      );\n    }\n\n    const node: typeof scopePath.node = {\n      ...scopePath.node,\n      body: emptyBody,\n      params: [],\n    };\n\n    scopePath.replaceWith(node);\n  } else {\n    path.replaceWith(emptyFragment);\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,aAA3B;;AAOA,SAASC,eAAT,CAAyBC,IAAzB,EAAsE;EACpE,IAAIA,IAAI,CAACC,aAAL,MAAwBH,CAAC,CAACI,YAAF,CAAeF,IAAI,CAACG,IAAL,CAAUC,GAAzB,CAA5B,EAA2D;IACzD,OAAOJ,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAcC,IAArB;EACD;;EAED,OAAO,IAAP;AACD;;AAED,eAAe,SAASC,UAAT,CAAoBN,IAApB,EAAoD;EACjE;EACA,MAAMO,aAAa,GAAGT,CAAC,CAACU,WAAF,CACpBV,CAAC,CAACW,kBAAF,EADoB,EAEpBX,CAAC,CAACY,kBAAF,EAFoB,EAGpB,EAHoB,CAAtB,CAFiE,CAQjE;EACA;;EACA,MAAMC,SAAS,GAAGX,IAAI,CAACY,KAAL,CAAWZ,IAA7B;;EACA,IAAIW,SAAS,CAACE,UAAV,EAAJ,EAA4B;IAC1B,MAAMC,SAAS,GAAGhB,CAAC,CAACiB,cAAF,CAAiB,CAACjB,CAAC,CAACkB,eAAF,CAAkBT,aAAlB,CAAD,CAAjB,CAAlB,CAD0B,CAG1B;;IACA,IAAIR,eAAe,CAACY,SAAD,CAAf,KAA+B,QAAnC,EAA6C;MAC3C,MAAMM,IAAI,GAAGN,SAAS,CAACO,UAAV,CAAsBC,CAAD,IAAOA,CAAC,CAACC,kBAAF,EAA5B,CAAb,CAD2C,CAG3C;;MACA,IAAIH,IAAI,EAAEG,kBAAN,EAAJ,EAAgC;QAC9BH,IAAI,CAACI,WAAL,CAAiBvB,CAAC,CAACwB,mBAAF,CAAsBL,IAAI,CAACd,IAAL,CAAUoB,EAAhC,EAAoC,EAApC,EAAwCT,SAAxC,CAAjB;QAEA;MACD;IACF;;IAED,MAAMU,IAAI,GAAGb,SAAS,CAACc,GAAV,CAAc,MAAd,CAAb;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;MACvB,MAAM,IAAII,KAAJ,CACJ,6JADI,CAAN;IAGD;;IAED,MAAMzB,IAA2B,GAAG,EAClC,GAAGQ,SAAS,CAACR,IADqB;MAElCqB,IAAI,EAAEV,SAF4B;MAGlCe,MAAM,EAAE;IAH0B,CAApC;IAMAlB,SAAS,CAACU,WAAV,CAAsBlB,IAAtB;EACD,CA7BD,MA6BO;IACLH,IAAI,CAACqB,WAAL,CAAiBd,aAAjB;EACD;AACF"}