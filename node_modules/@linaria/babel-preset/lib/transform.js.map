{"version":3,"file":"transform.js","names":["STYLIS_DECLARATION","posixSep","path","posix","sep","babelPreset","require","resolve","transformUrl","url","outputFilename","sourceFilename","platformPath","relative","dirname","split","join","shouldTransformCode","code","test","extractCssFromAst","babelFileResult","options","metadata","transformedCode","map","linaria","sourceMap","rules","replacements","dependencies","mappings","cssText","preprocessor","selector","text","stylis","use","context","decl","replace","match","p1","p2","p3","p4","filename","Object","keys","forEach","index","push","generated","line","column","original","start","name","source","atom","cssSourceMapText","length","generator","SourceMapGenerator","file","mapping","addMapping","setSourceContent","toString","transform","inputSourceMap","debug","pluginOptions","loadOptions","babelOptions","ast","parseSync","caller","transformFromAstSync","rootMode","presets","babelrc","configFile","sourceMaps","sourceFileName"],"sources":["../src/transform.ts"],"sourcesContent":["/**\n * This file exposes transform function that:\n * - parse the passed code to AST\n * - transforms the AST using Linaria babel preset ('./babel/index.js) and additional config defined in Linaria config file or passed to bundler configuration.\n * - runs generated CSS files through default of user-defined preprocessor\n * - generates source maps for CSS files\n * - return transformed code (without Linaria template literals), generated CSS, source maps and babel metadata from transform step.\n */\n\nimport path from 'path';\n\nimport type { BabelFileMetadata, BabelFileResult } from '@babel/core';\nimport { parseSync, transformFromAstSync } from '@babel/core';\nimport type { Mapping } from 'source-map';\nimport { SourceMapGenerator } from 'source-map';\nimport stylis from 'stylis';\n\nimport { debug } from '@linaria/logger';\n\nimport type { LinariaMetadata, Options, PreprocessorFn, Result } from './types';\nimport loadOptions from './utils/loadOptions';\n\nconst STYLIS_DECLARATION = 1;\nconst posixSep = path.posix.sep;\nconst babelPreset = require.resolve('./index');\n\nexport function transformUrl(\n  url: string,\n  outputFilename: string,\n  sourceFilename: string,\n  platformPath: typeof path = path\n) {\n  // Replace asset path with new path relative to the output CSS\n  const relative = platformPath.relative(\n    platformPath.dirname(outputFilename),\n    // Get the absolute path to the asset from the path relative to the JS file\n    platformPath.resolve(platformPath.dirname(sourceFilename), url)\n  );\n\n  if (platformPath.sep === posixSep) {\n    return relative;\n  }\n\n  return relative.split(platformPath.sep).join(posixSep);\n}\n\nexport function shouldTransformCode(code: string): boolean {\n  return /\\b(styled|css)/.test(code);\n}\n\nexport function extractCssFromAst(\n  babelFileResult: BabelFileResult,\n  code: string,\n  options: Options\n): Result {\n  const { metadata, code: transformedCode, map } = babelFileResult;\n\n  if (\n    !metadata ||\n    !(metadata as BabelFileMetadata & { linaria: LinariaMetadata }).linaria\n  ) {\n    return {\n      code: transformedCode || '', // if there was only unused code we want to return transformed code which will be later removed by the bundler\n      sourceMap: map,\n    };\n  }\n\n  const { rules, replacements, dependencies } = (\n    metadata as BabelFileMetadata & {\n      linaria: LinariaMetadata;\n    }\n  ).linaria;\n  const mappings: Mapping[] = [];\n\n  let cssText = '';\n\n  let preprocessor: PreprocessorFn;\n  if (typeof options.preprocessor === 'function') {\n    // eslint-disable-next-line prefer-destructuring\n    preprocessor = options.preprocessor;\n  } else {\n    switch (options.preprocessor) {\n      case 'none':\n        preprocessor = (selector, text) => `${selector} {${text}}\\n`;\n        break;\n      case 'stylis':\n      default:\n        stylis.use(null)((context, decl) => {\n          const { outputFilename } = options;\n          if (context === STYLIS_DECLARATION && outputFilename) {\n            // When writing to a file, we need to adjust the relative paths inside url(..) expressions\n            // It'll allow css-loader to resolve an imported asset properly\n            return decl.replace(\n              /\\b(url\\(([\"']?))(\\.[^)]+?)(\\2\\))/g,\n              (match, p1, p2, p3, p4) =>\n                p1 + transformUrl(p3, outputFilename, options.filename) + p4\n            );\n          }\n\n          return decl;\n        });\n\n        preprocessor = stylis;\n    }\n  }\n\n  Object.keys(rules).forEach((selector, index) => {\n    mappings.push({\n      generated: {\n        line: index + 1,\n        column: 0,\n      },\n      original: rules[selector].start!,\n      name: selector,\n      source: '',\n    });\n\n    if (rules[selector].atom) {\n      // For atoms, we just directly insert cssText, to give the atomizer full control over the rules\n      cssText += `${rules[selector].cssText}\\n`;\n    } else {\n      // Run each rule through stylis to support nesting\n      cssText += `${preprocessor(selector, rules[selector].cssText)}\\n`;\n    }\n  });\n\n  return {\n    code: transformedCode || '',\n    cssText,\n    rules,\n    replacements,\n    dependencies,\n    sourceMap: map,\n\n    get cssSourceMapText() {\n      if (mappings?.length) {\n        const generator = new SourceMapGenerator({\n          file: options.filename.replace(/\\.js$/, '.css'),\n        });\n\n        mappings.forEach((mapping) =>\n          generator.addMapping({ ...mapping, source: options.filename })\n        );\n\n        generator.setSourceContent(options.filename, code);\n\n        return generator.toString();\n      }\n\n      return '';\n    },\n  };\n}\n\nexport default function transform(code: string, options: Options): Result {\n  // Check if the file contains `css` or `styled` words first\n  // Otherwise we should skip transforming\n  if (!shouldTransformCode(code)) {\n    return {\n      code,\n      sourceMap: options.inputSourceMap,\n    };\n  }\n\n  debug(\n    'transform',\n    `${options.filename} to ${options.outputFilename}\\n${code}`\n  );\n\n  const pluginOptions = loadOptions(options.pluginOptions);\n  const babelOptions = pluginOptions?.babelOptions ?? null;\n\n  // Parse the code first so babel uses user's babel config for parsing\n  // We don't want to use user's config when transforming the code\n  const ast = parseSync(code, {\n    ...babelOptions,\n    filename: options.filename,\n    caller: { name: 'linaria' },\n  });\n\n  const babelFileResult = transformFromAstSync(ast!, code, {\n    ...(babelOptions?.rootMode ? { rootMode: babelOptions.rootMode } : null),\n    filename: options.filename,\n    presets: [[babelPreset, pluginOptions]],\n    babelrc: false,\n    configFile: false,\n    sourceMaps: true,\n    sourceFileName: options.filename,\n    inputSourceMap: options.inputSourceMap,\n  })!;\n\n  return extractCssFromAst(babelFileResult, code, options);\n}\n"],"mappings":"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"}