"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getTemplateProcessor;

var _generator = _interopRequireDefault(require("@babel/generator"));

var _logger = require("@linaria/logger");

var _units = require("../units");

var _isSerializable = _interopRequireDefault(require("../utils/isSerializable"));

var _throwIfInvalid = _interopRequireDefault(require("../utils/throwIfInvalid"));

var _stripLines = _interopRequireDefault(require("../utils/stripLines"));

var _toCSS = _interopRequireDefault(require("../utils/toCSS"));

var _getLinariaComment = _interopRequireDefault(require("../utils/getLinariaComment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file handles transforming template literals to class names or styled components and generates CSS content.
 * It uses CSS code from template literals and evaluated values of lazy dependencies stored in ValueCache.
 */
// Match any valid CSS units followed by a separator such as ;, newline etc.
const unitRegex = new RegExp(`^(${_units.units.join('|')})(;|,|\n| |\\))`);

function hasMeta(value) {
  return value && typeof value === 'object' && value.__linaria;
}

const processedPaths = new WeakSet();

function getTemplateProcessor({
  types: t
}, options) {
  return function process({
    styled,
    path
  }, state, valueCache) {
    if (processedPaths.has(path)) {
      // Do not process an expression
      // if it is referenced in one template more than once
      return;
    }

    processedPaths.add(path);
    const {
      quasi
    } = path.node;
    const interpolations = []; // Check if the variable is referenced anywhere for basic DCE
    // Only works when it's assigned to a variable

    let isReferenced = true;
    const [type, slug, displayName, className] = (0, _getLinariaComment.default)(path);
    const parent = path.findParent(p => t.isObjectProperty(p) || t.isJSXOpeningElement(p) || t.isVariableDeclarator(p));

    if (parent) {
      const parentNode = parent.node;

      if (t.isVariableDeclarator(parentNode) && t.isIdentifier(parentNode.id)) {
        const {
          referencePaths
        } = path.scope.getBinding(parentNode.id.name) || {
          referencePaths: []
        };
        isReferenced = referencePaths.length !== 0;
      }
    } // Serialize the tagged template literal to a string


    let cssText = '';
    const expressions = path.get('quasi').get('expressions');
    quasi.quasis.forEach((el, i, self) => {
      let appended = false;

      if (i !== 0 && el.value.cooked) {
        // Check if previous expression was a CSS variable that we replaced
        // If it has a unit after it, we need to move the unit into the interpolation
        // e.g. `var(--size)px` should actually be `var(--size)`
        // So we check if the current text starts with a unit, and add the unit to the previous interpolation
        // Another approach would be `calc(var(--size) * 1px), but some browsers don't support all units
        // https://bugzilla.mozilla.org/show_bug.cgi?id=956573
        const matches = el.value.cooked.match(unitRegex);

        if (matches) {
          const last = interpolations[interpolations.length - 1];
          const [, unit] = matches;

          if (last && cssText.endsWith(`var(--${last.id})`)) {
            last.unit = unit;
            cssText += el.value.cooked.replace(unitRegex, '$2');
            appended = true;
          }
        }
      }

      if (!appended) {
        cssText += el.value.cooked;
      }

      const ex = expressions[i];

      if (ex && !ex.isExpression()) {
        throw ex.buildCodeFrameError(`The expression '${(0, _generator.default)(ex.node).code}' is not supported.`);
      }

      if (ex) {
        const {
          end
        } = ex.node.loc;
        const result = ex.evaluate();
        const beforeLength = cssText.length; // The location will be end of the current string to start of next string

        const next = self[i + 1];
        const loc = {
          // +1 because the expressions location always shows 1 column before
          start: {
            line: el.loc.end.line,
            column: el.loc.end.column + 1
          },
          end: next ? {
            line: next.loc.start.line,
            column: next.loc.start.column
          } : {
            line: end.line,
            column: end.column + 1
          }
        };

        if (result.confident) {
          (0, _throwIfInvalid.default)(result.value, ex);

          if ((0, _isSerializable.default)(result.value)) {
            // If it's a plain object or an array, convert it to a CSS string
            cssText += (0, _stripLines.default)(loc, (0, _toCSS.default)(result.value));
          } else {
            cssText += (0, _stripLines.default)(loc, result.value);
          }

          state.replacements.push({
            original: loc,
            length: cssText.length - beforeLength
          });
        } else {
          // Try to preval the value
          if (options.evaluate && !(t.isFunctionExpression(ex) || t.isArrowFunctionExpression(ex))) {
            const value = valueCache.get(ex.node);
            (0, _throwIfInvalid.default)(value, ex); // Skip the blank string instead of throw ing an error

            if (value === '') {
              return;
            }

            if (value && typeof value !== 'function') {
              // Only insert text for non functions
              // We don't touch functions because they'll be interpolated at runtime
              if (hasMeta(value)) {
                // If it's an React component wrapped in styled, get the class name
                // Useful for interpolating components
                cssText += `.${value.__linaria.className}`;
              } else if ((0, _isSerializable.default)(value)) {
                cssText += (0, _stripLines.default)(loc, (0, _toCSS.default)(value));
              } else {
                // For anything else, assume it'll be stringified
                cssText += (0, _stripLines.default)(loc, value);
              }

              state.replacements.push({
                original: loc,
                length: cssText.length - beforeLength
              });
              return;
            }
          }

          if (styled) {
            const id = `${slug}-${i}`;
            interpolations.push({
              id,
              node: ex.node,
              source: ex.getSource() || (0, _generator.default)(ex.node).code,
              unit: ''
            });
            cssText += `var(--${id})`;
          } else {
            // CSS custom properties can't be used outside components
            throw ex.buildCodeFrameError(`The CSS cannot contain JavaScript expressions when using the 'css' tag. To evaluate the expressions at build time, pass 'evaluate: true' to the babel plugin.`);
          }
        }
      }
    });
    let selector = `.${className}`;

    if (styled) {
      // If `styled` wraps another component and not a primitive,
      // get its class name to create a more specific selector
      // it'll ensure that styles are overridden properly
      if (options.evaluate && t.isIdentifier(styled.component.node)) {
        let value = valueCache.get(styled.component.node.name);

        while (hasMeta(value)) {
          selector += `.${value.__linaria.className}`;
          value = value.__linaria.extends;
        }
      }

      const props = [];
      props.push(t.objectProperty(t.identifier('name'), t.stringLiteral(displayName)));
      props.push(t.objectProperty(t.identifier('class'), t.stringLiteral(className))); // If we found any interpolations, also pass them so they can be applied

      if (interpolations.length) {
        // De-duplicate interpolations based on the source and unit
        // If two interpolations have the same source code and same unit,
        // we don't need to use 2 custom properties for them, we can use a single one
        const result = {};
        interpolations.forEach(it => {
          const key = it.source + it.unit;

          if (key in result) {
            cssText = cssText.replace(`var(--${it.id})`, `var(--${result[key].id})`);
          } else {
            result[key] = it;
          }
        });
        props.push(t.objectProperty(t.identifier('vars'), t.objectExpression(Object.keys(result).map(key => {
          const {
            id,
            node,
            unit
          } = result[key];
          const items = [node];

          if (unit) {
            items.push(t.stringLiteral(unit));
          }

          return t.objectProperty(t.stringLiteral(id), t.arrayExpression(items));
        }))));
      }

      path.replaceWith(t.callExpression(t.callExpression(t.identifier(state.file.metadata.localName || 'styled'), [styled.component.node]), [t.objectExpression(props)]));
      path.addComment('leading', '#__PURE__');
    } else if (type === 'css') {
      path.replaceWith(t.stringLiteral(className));
    }

    if (!isReferenced && !cssText.includes(':global')) {
      return;
    }

    if (type === 'atomic-css') {
      const {
        atomize
      } = options;

      if (!atomize) {
        throw new Error('The atomic css API was detected, but an atomize function was not passed in the linaria configuration.');
      }

      const atomicRules = atomize(cssText);
      atomicRules.forEach(rule => {
        var _path$parent$loc$star, _path$parent, _path$parent$loc;

        state.rules[`.${rule.className}`] = {
          cssText: rule.cssText,
          start: (_path$parent$loc$star = (_path$parent = path.parent) === null || _path$parent === void 0 ? void 0 : (_path$parent$loc = _path$parent.loc) === null || _path$parent$loc === void 0 ? void 0 : _path$parent$loc.start) !== null && _path$parent$loc$star !== void 0 ? _path$parent$loc$star : null,
          className: className,
          displayName: displayName,
          atom: true
        };
        (0, _logger.debug)('evaluator:template-processor:extracted-atomic-rule', `\n${rule.cssText}`);
      });
      const atomicClassObject = t.objectExpression(atomicRules.map(rule => t.objectProperty(t.stringLiteral(rule.property), t.stringLiteral(rule.className))));
      path.replaceWith(atomicClassObject);
    } else {
      var _path$parent$loc$star2, _path$parent2, _path$parent2$loc;

      (0, _logger.debug)('evaluator:template-processor:extracted-rule', `\n${selector} {${cssText}\n}`);
      state.rules[selector] = {
        cssText,
        className: className,
        displayName: displayName,
        start: (_path$parent$loc$star2 = (_path$parent2 = path.parent) === null || _path$parent2 === void 0 ? void 0 : (_path$parent2$loc = _path$parent2.loc) === null || _path$parent2$loc === void 0 ? void 0 : _path$parent2$loc.start) !== null && _path$parent$loc$star2 !== void 0 ? _path$parent$loc$star2 : null
      };
    }
  };
}
//# sourceMappingURL=templateProcessor.js.map