{"version":3,"file":"templateProcessor.js","names":["unitRegex","RegExp","units","join","hasMeta","value","processedPaths","WeakSet","dedupInterpolations","interpolations","interpolationsObj","replacements","forEach","it","key","source","unit","push","id","Object","values","getTemplateProcessor","options","process","path","quasis","expressions","state","valueCache","has","add","tagProcessor","getTagProcessor","isReferenced","parent","findParent","p","isObjectProperty","isJSXOpeningElement","isVariableDeclarator","get","isIdentifier","referencePaths","scope","getBinding","node","name","length","cssText","queue","i","el","expressionValue","self","appended","cooked","matches","match","last","lastInterpolation","endsWith","replace","ex","originalEx","exNode","unwrapNode","end","loc","beforeLength","next","start","line","column","__linaria","className","isSerializable","stripLines","toCSS","original","expression","addInterpolation","e","Error","buildCodeFrameError","message","uniqInterpolations","s","r","rules","classes","extractRules","replacement","isPure","getRuntimeReplacement","replaceWith","addComment","includes"],"sources":["../../src/evaluators/templateProcessor.ts"],"sourcesContent":["/**\n * This file handles transforming template literals to class names or styled components and generates CSS content.\n * It uses CSS code from template literals and evaluated values of lazy dependencies stored in ValueCache.\n */\n\nimport { NodePath } from '@babel/traverse';\nimport type { TemplateElement } from '@babel/types';\n\nimport type { StyledMeta } from '@linaria/core';\nimport type { IInterpolation } from '@linaria/core/processors/types';\n\nimport type {\n  ExpressionValue,\n  State,\n  StrictOptions,\n  TemplateExpression,\n  ValueCache,\n} from '../types';\nimport { units } from '../units';\nimport getTagProcessor from '../utils/getTagProcessor';\nimport isSerializable from '../utils/isSerializable';\nimport stripLines from '../utils/stripLines';\nimport toCSS from '../utils/toCSS';\nimport unwrapNode from '../utils/unwrapNode';\n\n// Match any valid CSS units followed by a separator such as ;, newline etc.\nconst unitRegex = new RegExp(`^(${units.join('|')})(;|,|\\n| |\\\\))`);\n\nfunction hasMeta(value: unknown): value is StyledMeta {\n  return typeof value === 'object' && value !== null && '__linaria' in value;\n}\n\nconst processedPaths = new WeakSet();\n\n/**\n * De-duplicate interpolations based on the source and unit\n * If two interpolations have the same source code and same unit,\n * we don't need to use 2 custom properties for them, we can use a single one\n * @param interpolations\n */\nfunction dedupInterpolations(\n  interpolations: IInterpolation[]\n): [interpolations: IInterpolation[], replacements: [string, string][]] {\n  const interpolationsObj: Record<string, IInterpolation> = {};\n  const replacements: [string, string][] = [];\n\n  interpolations.forEach((it) => {\n    const key = it.source + it.unit;\n\n    if (key in interpolationsObj) {\n      replacements.push([\n        `var(--${it.id})`,\n        `var(--${interpolationsObj[key].id})`,\n      ]);\n    } else {\n      interpolationsObj[key] = it;\n    }\n  });\n\n  return [Object.values(interpolationsObj), replacements];\n}\n\nexport default function getTemplateProcessor(options: StrictOptions) {\n  return function process(\n    { path, quasis, expressions }: TemplateExpression,\n    state: State,\n    valueCache: ValueCache\n  ) {\n    if (processedPaths.has(path)) {\n      // Do not process an expression\n      // if it is referenced in one template more than once\n      return;\n    }\n\n    processedPaths.add(path);\n\n    const tagProcessor = getTagProcessor(path, state, options);\n    if (!tagProcessor) {\n      return;\n    }\n\n    // Check if the variable is referenced anywhere for basic DCE\n    // Only works when it's assigned to a variable\n    let isReferenced = true;\n\n    const parent = path.findParent(\n      (p) =>\n        p.isObjectProperty() ||\n        p.isJSXOpeningElement() ||\n        p.isVariableDeclarator()\n    );\n\n    if (parent) {\n      if (parent.isVariableDeclarator()) {\n        const id = parent.get('id');\n        if (id.isIdentifier()) {\n          const { referencePaths } = path.scope.getBinding(id.node.name) || {\n            referencePaths: [],\n          };\n\n          isReferenced = referencePaths.length !== 0;\n        }\n      }\n    }\n\n    // Serialize the tagged template literal to a string\n    let cssText = '';\n\n    const { length } = quasis;\n    const queue: [TemplateElement, ExpressionValue | null][] = [];\n    for (let i = 0; i < length; i++) {\n      const value = i < length - 1 ? expressions[i] : null;\n      queue.push([quasis[i].node, value]);\n    }\n\n    queue.forEach(([el, expressionValue], i, self) => {\n      let appended = false;\n\n      if (i !== 0 && el.value.cooked) {\n        // Check if previous expression was a CSS variable that we replaced\n        // If it has a unit after it, we need to move the unit into the interpolation\n        // e.g. `var(--size)px` should actually be `var(--size)`\n        // So we check if the current text starts with a unit, and add the unit to the previous interpolation\n        // Another approach would be `calc(var(--size) * 1px), but some browsers don't support all units\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=956573\n        const matches = el.value.cooked.match(unitRegex);\n\n        if (matches) {\n          const last = tagProcessor.lastInterpolation;\n          const [, unit] = matches;\n\n          if (last && cssText.endsWith(`var(--${last.id})`)) {\n            last.unit = unit;\n            cssText += el.value.cooked.replace(unitRegex, '$2');\n            appended = true;\n          }\n        }\n      }\n\n      if (!appended) {\n        cssText += el.value.cooked;\n      }\n\n      if (expressionValue) {\n        const ex =\n          'originalEx' in expressionValue\n            ? expressionValue.originalEx\n            : expressionValue.ex;\n        const exNode = unwrapNode(ex);\n\n        const { end } = exNode.loc!;\n        const beforeLength = cssText.length;\n\n        // The location will be end of the current string to start of next string\n        const next = self[i + 1]?.[0];\n        const loc = {\n          // +1 because the expressions location always shows 1 column before\n          start: { line: el.loc!.end.line, column: el.loc!.end.column + 1 },\n          end: next\n            ? { line: next.loc!.start.line, column: next.loc!.start.column }\n            : { line: end.line, column: end.column + 1 },\n        };\n\n        const value = valueCache.get(exNode);\n\n        if (value && typeof value !== 'function') {\n          // Skip the blank string instead of throw ing an error\n          if (value === '') {\n            return;\n          }\n\n          if (hasMeta(value)) {\n            // If it's an React component wrapped in styled, get the class name\n            // Useful for interpolating components\n            cssText += `.${value.__linaria.className}`;\n          } else if (isSerializable(value)) {\n            // If it's a plain object or an array, convert it to a CSS string\n            cssText += stripLines(loc, toCSS(value));\n          } else {\n            // For anything else, assume it'll be stringified\n            cssText += stripLines(loc, value);\n          }\n\n          state.replacements.push({\n            original: loc,\n            length: cssText.length - beforeLength,\n          });\n\n          return;\n        }\n\n        try {\n          const { ex: expression } = expressionValue;\n          cssText += tagProcessor.addInterpolation(\n            'node' in expression ? expression.node : expression,\n            expressionValue.source\n          );\n        } catch (e) {\n          if (e instanceof Error && 'buildCodeFrameError' in ex) {\n            throw ex.buildCodeFrameError(e.message);\n          }\n\n          throw e;\n        }\n      }\n    });\n\n    const [uniqInterpolations, replacements] = dedupInterpolations(\n      tagProcessor.interpolations\n    );\n\n    replacements.forEach(([s, r]) => {\n      cssText = cssText.replace(s, r);\n    });\n\n    const [rules, classes] = tagProcessor.extractRules(\n      valueCache,\n      cssText,\n      path.parent?.loc\n    );\n\n    const [replacement, isPure] = tagProcessor.getRuntimeReplacement(\n      classes,\n      uniqInterpolations\n    );\n\n    path.replaceWith(replacement);\n    if (isPure) {\n      path.addComment('leading', '#__PURE__');\n    }\n\n    if (!isReferenced && !cssText.includes(':global')) {\n      return;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    state.rules = {\n      ...state.rules,\n      ...rules,\n    };\n  };\n}\n"],"mappings":"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"}