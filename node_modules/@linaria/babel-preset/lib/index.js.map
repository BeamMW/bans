{"version":3,"file":"index.js","names":["isEnabled","caller","name","evaluate","linaria","babel","options","debug","JSON","stringify","plugins","require","loadOptions"],"sources":["../src/index.ts"],"sourcesContent":["/**\n * File defines babel prest for Linaria.\n * It uses ./extract function that is an entry point for styles extraction.\n * It also bypass babel options defined in Linaria config file with it's defaults (see ./utils/loadOptions).\n */\nimport type { ConfigAPI, TransformCaller } from '@babel/core';\n\nimport { debug } from '@linaria/logger';\n\nimport type { PluginOptions } from './utils/loadOptions';\nimport loadOptions from './utils/loadOptions';\n\nexport { slugify } from '@linaria/utils';\n\nexport * as EvalCache from './eval-cache';\nexport { default as buildOptions } from './evaluators/buildOptions';\nexport { default as JSXElement } from './evaluators/visitors/JSXElement';\nexport { default as replaceTagWithValue } from './utils/replaceTagWithValue';\nexport { default as Module } from './module';\nexport {\n  default as transform,\n  extractCssFromAst,\n  shouldTransformCode,\n  transformUrl,\n} from './transform';\nexport * from './types';\nexport { default as collectExportsAndImports } from './utils/collectExportsAndImports';\nexport type {\n  IImport,\n  IExport,\n  IState,\n} from './utils/collectExportsAndImports';\nexport type { PluginOptions } from './utils/loadOptions';\nexport { default as isNode } from './utils/isNode';\nexport { default as getTagProcessor } from './utils/getTagProcessor';\nexport { default as getVisitorKeys } from './utils/getVisitorKeys';\nexport type { VisitorKeys } from './utils/getVisitorKeys';\nexport { default as peek } from './utils/peek';\nexport { default as processTemplateExpression } from './utils/processTemplateExpression';\n\nfunction isEnabled(caller?: TransformCaller & { evaluate?: true }) {\n  return caller?.name !== 'linaria' || !caller.evaluate;\n}\n\nexport default function linaria(babel: ConfigAPI, options: PluginOptions) {\n  if (!babel.caller(isEnabled)) {\n    return {};\n  }\n  debug('options', JSON.stringify(options));\n  return {\n    // eslint-disable-next-line global-require\n    plugins: [[require('./extract'), loadOptions(options)]],\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;AAGA;;AAEA;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AAMA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AACA;;AAOA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAtCA;AACA;AACA;AACA;AACA;AAoCA,SAASA,SAAT,CAAmBC,MAAnB,EAAmE;EACjE,OAAO,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,IAAR,MAAiB,SAAjB,IAA8B,CAACD,MAAM,CAACE,QAA7C;AACD;;AAEc,SAASC,OAAT,CAAiBC,KAAjB,EAAmCC,OAAnC,EAA2D;EACxE,IAAI,CAACD,KAAK,CAACJ,MAAN,CAAaD,SAAb,CAAL,EAA8B;IAC5B,OAAO,EAAP;EACD;;EACD,IAAAO,aAAA,EAAM,SAAN,EAAiBC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAjB;EACA,OAAO;IACL;IACAI,OAAO,EAAE,CAAC,CAACC,OAAO,CAAC,WAAD,CAAR,EAAuB,IAAAC,oBAAA,EAAYN,OAAZ,CAAvB,CAAD;EAFJ,CAAP;AAID"}