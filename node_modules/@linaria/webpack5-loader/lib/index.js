"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _enhancedResolve = _interopRequireDefault(require("enhanced-resolve"));

var _babelPreset = require("@linaria/babel-preset");

var _logger = require("@linaria/logger");

var _cache = require("./cache");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file contains a Webpack loader for Linaria.
 * It uses the transform.ts function to generate class names from source code,
 * returns transformed code without template literals and attaches generated source maps
 */
const outputCssLoader = require.resolve('./outputCssLoader');

const webpack5Loader = function webpack5LoaderPlugin(content, inputSourceMap) {
  var _this$_compilation, _webpackResolveOption, _result$sourceMap2;

  function convertSourceMap(value, filename) {
    var _value$file, _value$mappings, _value$names, _value$sources, _value$version;

    if (typeof value === 'string' || !value) {
      return undefined;
    }

    return { ...value,
      file: (_value$file = value.file) !== null && _value$file !== void 0 ? _value$file : filename,
      mappings: (_value$mappings = value.mappings) !== null && _value$mappings !== void 0 ? _value$mappings : '',
      names: (_value$names = value.names) !== null && _value$names !== void 0 ? _value$names : [],
      sources: (_value$sources = value.sources) !== null && _value$sources !== void 0 ? _value$sources : [],
      version: (_value$version = value.version) !== null && _value$version !== void 0 ? _value$version : 3
    };
  } // tell Webpack this loader is async


  this.async();
  (0, _logger.debug)('loader', this.resourcePath);

  _babelPreset.EvalCache.clearForFile(this.resourcePath);

  const resolveOptionsDefaults = {
    conditionNames: ['require'],
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json']
  };
  const {
    sourceMap = undefined,
    preprocessor = undefined,
    extension = '.linaria.css',
    cacheProvider,
    resolveOptions = {},
    ...rest
  } = this.getOptions() || {};
  const outputFileName = this.resourcePath.replace(/\.[^.]+$/, extension); // this._compilation is a deprecated API
  // However there seems to be no other way to access webpack's resolver
  // There is this.resolve, but it's asynchronous
  // Another option is to read the webpack.config.js, but it won't work for programmatic usage
  // This API is used by many loaders/plugins, so hope we're safe for a while

  const webpackResolveOptions = (_this$_compilation = this._compilation) === null || _this$_compilation === void 0 ? void 0 : _this$_compilation.options.resolve; // Resolved configuration contains empty list of extensions as a default value
  // https://github.com/callstack/linaria/issues/855

  if ((webpackResolveOptions === null || webpackResolveOptions === void 0 ? void 0 : (_webpackResolveOption = webpackResolveOptions.extensions) === null || _webpackResolveOption === void 0 ? void 0 : _webpackResolveOption.length) === 0) {
    delete webpackResolveOptions.extensions;
  } // Let's try to create a resolver with the webpack config


  let resolveSync = _enhancedResolve.default.create.sync({ ...resolveOptionsDefaults,
    ...(webpackResolveOptions !== null && webpackResolveOptions !== void 0 ? webpackResolveOptions : {}),
    ...resolveOptions,
    mainFields: ['main']
  });

  try {
    // Try to resolve the current file
    resolveSync(__dirname, __filename);
  } catch (e) {
    // Looks like one of the webpack plugins is async and the whole resolver became async
    (0, _logger.notify)('The default webpack configuration cannot be used because some of the plugins are asynchronous. All plugins have been ignored. Please override `resolveOptions.plugins` in the Linaria configuration.'); // Fallback to synchronous resolve

    resolveSync = _enhancedResolve.default.create.sync({ ...resolveOptionsDefaults,
      ...(webpackResolveOptions && {
        alias: webpackResolveOptions.alias,
        modules: webpackResolveOptions.modules
      } || {}),
      ...resolveOptions
    });
  }

  let result;
  const originalResolveFilename = _babelPreset.Module._resolveFilename;

  try {
    // Use webpack's resolution when evaluating modules
    _babelPreset.Module._resolveFilename = (id, {
      filename
    }) => {
      const res = resolveSync(_path.default.dirname(filename), id);

      if (!res) {
        // enhanced-resolve v4 throws a error when dependency is missed
        throw new Error('No result');
      }

      this.addDependency(res);
      return res;
    };

    result = (0, _babelPreset.transform)(content.toString(), {
      filename: _path.default.relative(process.cwd(), this.resourcePath),
      inputSourceMap: convertSourceMap(inputSourceMap, this.resourcePath),
      pluginOptions: rest,
      preprocessor
    });
  } finally {
    // Restore original behaviour
    _babelPreset.Module._resolveFilename = originalResolveFilename;
  }

  if (result.cssText) {
    var _result$dependencies;

    let {
      cssText
    } = result;

    if (sourceMap) {
      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(result.cssSourceMapText || '').toString('base64')}*/`;
    }

    if ((_result$dependencies = result.dependencies) !== null && _result$dependencies !== void 0 && _result$dependencies.length) {
      result.dependencies.forEach(dep => {
        try {
          const f = resolveSync(_path.default.dirname(this.resourcePath), dep);

          if (f) {
            this.addDependency(f);
          } else {
            // eslint-disable-next-line no-console
            console.warn(`[linaria] ${dep} cannot be resolved in ${this.resourcePath}`);
          }
        } catch (e) {
          // eslint-disable-next-line no-console
          console.warn(`[linaria] failed to add dependency for: ${dep}`, e);
        }
      });
    }

    (0, _cache.getCacheInstance)(cacheProvider).then(cacheInstance => cacheInstance.set(this.resourcePath, cssText)).then(() => {
      var _result$sourceMap;

      const request = `${outputFileName}!=!${outputCssLoader}?cacheProvider=${encodeURIComponent(typeof cacheProvider === 'string' ? cacheProvider : '')}!${this.resourcePath}`;
      this.utils.contextify(this.context || this.rootContext, request);
      const stringifiedRequest = JSON.stringify(this.utils.contextify(this.context || this.rootContext, request));
      return this.callback(null, `${result.code}\n\nrequire(${stringifiedRequest});`, (_result$sourceMap = result.sourceMap) !== null && _result$sourceMap !== void 0 ? _result$sourceMap : undefined);
    }).catch(err => this.callback(err));
    return;
  }

  this.callback(null, result.code, (_result$sourceMap2 = result.sourceMap) !== null && _result$sourceMap2 !== void 0 ? _result$sourceMap2 : undefined);
};

var _default = webpack5Loader;
exports.default = _default;
//# sourceMappingURL=index.js.map