import type { NodePath } from '@babel/traverse';
import type { Expression } from '@babel/types';
import type { StyledMeta } from '../StyledMeta';
export declare type JSONValue = string | number | boolean | JSONObject | JSONArray;
export interface JSONObject {
    [x: string]: JSONValue;
}
export declare type JSONArray = Array<JSONValue>;
export declare type Serializable = JSONArray | JSONObject;
export declare type Value = (() => void) | StyledMeta | string | number | Serializable;
export declare type ValueCache = Map<Expression, Value>;
export declare type Location = {
    column: number;
    line: number;
};
export interface ICSSRule {
    atom?: boolean;
    className: string;
    cssText: string;
    displayName: string;
    start: Location | null | undefined;
}
export interface IInterpolation {
    id: string;
    node: Expression;
    source: string;
    unit: string;
}
export declare type WrappedNode = string | {
    node: Expression;
    source: string;
};
export declare type Rules = Record<string, ICSSRule>;
export declare type CallParam = ['call', ...[string, NodePath<Expression>][]];
export declare type MemberParam = ['member', NodePath<Expression>];
export declare type Params = (CallParam | MemberParam)[];
export interface IDependency {
    ex: NodePath<Expression>;
    source: string;
}
