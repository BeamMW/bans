import type { types as t } from '@babel/core';
import type { SourceLocation, Expression } from '@babel/types';
import type { IDependency, IInterpolation, Params, Rules, ValueCache } from './types';
import type { IFileContext, IOptions } from './utils/types';
export { Expression };
export declare type ProcessorParams = ConstructorParameters<typeof BaseProcessor>;
export default abstract class BaseProcessor {
    protected readonly astService: typeof t;
    protected readonly params: Params;
    protected readonly tagExp: Expression;
    readonly displayName: string;
    protected readonly idx: number;
    protected readonly options: IOptions;
    protected readonly context: IFileContext;
    readonly className: string;
    readonly dependencies: IDependency[];
    interpolations: IInterpolation[];
    readonly slug: string;
    constructor(astService: typeof t, params: Params, tagExp: Expression, displayName: string, idx: number, options: IOptions, context: IFileContext);
    get lastInterpolation(): IInterpolation | undefined;
    /**
     * It is called for each resolved expression in a template literal.
     * @param node
     * @param source
     * @return chunk of CSS that should be added to extracted CSS
     */
    abstract addInterpolation(node: Expression, source: string): string;
    abstract extractRules(valueCache: ValueCache, cssText: string, loc?: SourceLocation | null): [rules: Rules, classes: string];
    /**
     * A replacement for the tag in runtime.
     * For example, `css` tag will be replaced with its className,
     * whereas `styled` tag will be replaced with a component.
     * @param classes
     * @param uniqInterpolations
     */
    abstract getRuntimeReplacement(classes: string, uniqInterpolations: IInterpolation[]): [Expression, boolean];
    /**
     * A replacement for tag referenced in a template literal.
     */
    abstract get asSelector(): string;
    protected abstract get tagExpression(): Expression;
    /**
     * A replacement for the tag in evaluation time.
     * For example, `css` tag will be replaced with its className,
     * whereas `styled` tag will be replaced with an object with metadata.
     */
    abstract get valueSource(): string;
}
