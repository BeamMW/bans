{"version":3,"file":"BaseProcessor.js","names":["getClassNameAndSlug","BaseProcessor","dependencies","interpolations","constructor","astService","params","tagExp","displayName","idx","options","context","className","slug","lastInterpolation","length"],"sources":["../../src/processors/BaseProcessor.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\nimport type { types as t } from '@babel/core';\nimport type { SourceLocation, Expression } from '@babel/types';\n\nimport type {\n  IDependency,\n  IInterpolation,\n  Params,\n  Rules,\n  ValueCache,\n} from './types';\nimport getClassNameAndSlug from './utils/getClassNameAndSlug';\nimport type { IFileContext, IOptions } from './utils/types';\n\nexport { Expression };\n\nexport type ProcessorParams = ConstructorParameters<typeof BaseProcessor>;\n\nexport default abstract class BaseProcessor {\n  public readonly className: string;\n\n  public readonly dependencies: IDependency[] = [];\n\n  public interpolations: IInterpolation[] = [];\n\n  public readonly slug: string;\n\n  public constructor(\n    protected readonly astService: typeof t,\n    protected readonly params: Params,\n    protected readonly tagExp: Expression,\n    public readonly displayName: string,\n    protected readonly idx: number,\n    protected readonly options: IOptions,\n    protected readonly context: IFileContext\n  ) {\n    const { className, slug } = getClassNameAndSlug(\n      this.displayName,\n      this.idx,\n      this.options,\n      this.context\n    );\n\n    this.className = className;\n    this.slug = slug;\n  }\n\n  public get lastInterpolation(): IInterpolation | undefined {\n    return this.interpolations[this.interpolations.length - 1];\n  }\n\n  /**\n   * It is called for each resolved expression in a template literal.\n   * @param node\n   * @param source\n   * @return chunk of CSS that should be added to extracted CSS\n   */\n  public abstract addInterpolation(node: Expression, source: string): string;\n\n  public abstract extractRules(\n    valueCache: ValueCache,\n    cssText: string,\n    loc?: SourceLocation | null\n  ): [rules: Rules, classes: string];\n\n  /**\n   * A replacement for the tag in runtime.\n   * For example, `css` tag will be replaced with its className,\n   * whereas `styled` tag will be replaced with a component.\n   * @param classes\n   * @param uniqInterpolations\n   */\n  public abstract getRuntimeReplacement(\n    classes: string,\n    uniqInterpolations: IInterpolation[]\n  ): [Expression, boolean];\n\n  /**\n   * A replacement for tag referenced in a template literal.\n   */\n  public abstract get asSelector(): string;\n\n  protected abstract get tagExpression(): Expression;\n\n  /**\n   * A replacement for the tag in evaluation time.\n   * For example, `css` tag will be replaced with its className,\n   * whereas `styled` tag will be replaced with an object with metadata.\n   */\n  public abstract get valueSource(): string;\n}\n"],"mappings":"AAAA;AAWA,OAAOA,mBAAP,MAAgC,6BAAhC;AAOA,eAAe,MAAeC,aAAf,CAA6B;EAG1BC,YAAY,GAAkB,EAAlB;EAErBC,cAAc,GAAqB,EAArB;;EAIdC,WAAW,CACGC,UADH,EAEGC,MAFH,EAGGC,MAHH,EAIAC,WAJA,EAKGC,GALH,EAMGC,OANH,EAOGC,OAPH,EAQhB;IAAA,KAPmBN,UAOnB,GAPmBA,UAOnB;IAAA,KANmBC,MAMnB,GANmBA,MAMnB;IAAA,KALmBC,MAKnB,GALmBA,MAKnB;IAAA,KAJgBC,WAIhB,GAJgBA,WAIhB;IAAA,KAHmBC,GAGnB,GAHmBA,GAGnB;IAAA,KAFmBC,OAEnB,GAFmBA,OAEnB;IAAA,KADmBC,OACnB,GADmBA,OACnB;IACA,MAAM;MAAEC,SAAF;MAAaC;IAAb,IAAsBb,mBAAmB,CAC7C,KAAKQ,WADwC,EAE7C,KAAKC,GAFwC,EAG7C,KAAKC,OAHwC,EAI7C,KAAKC,OAJwC,CAA/C;IAOA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACD;;EAE2B,IAAjBC,iBAAiB,GAA+B;IACzD,OAAO,KAAKX,cAAL,CAAoB,KAAKA,cAAL,CAAoBY,MAApB,GAA6B,CAAjD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;AAtC4C"}