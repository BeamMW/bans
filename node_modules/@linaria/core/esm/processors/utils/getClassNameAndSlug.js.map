{"version":3,"file":"getClassNameAndSlug.js","names":["basename","dirname","extname","relative","sep","debug","slugify","toValidCSSIdentifier","isSlugVar","key","slugVars","getClassNameAndSlug","displayName","idx","options","context","relativeFilename","root","filename","slug","charAt","toLowerCase","ext","hash","title","file","name","dir","split","pop","className","classNameSlug","Error","optionVariables","match","cnSlug","i","l","length","v","slice","replace"],"sources":["../../../src/processors/utils/getClassNameAndSlug.ts"],"sourcesContent":["import { basename, dirname, extname, relative, sep } from 'path';\n\nimport { debug } from '@linaria/logger';\nimport { slugify } from '@linaria/utils';\n\nimport toValidCSSIdentifier from './toValidCSSIdentifier';\nimport type { ClassNameSlugVars, IFileContext, IOptions } from './types';\n\nconst isSlugVar = (\n  key: string,\n  slugVars: ClassNameSlugVars\n): key is keyof ClassNameSlugVars => key in slugVars;\n\nexport default function getClassNameAndSlug(\n  displayName: string,\n  idx: number,\n  options: IOptions,\n  context: IFileContext\n): { className: string; slug: string } {\n  const relativeFilename = relative(context.root, context.filename);\n  // Custom properties need to start with a letter, so we prefix the slug\n  // Also use append the index of the class to the filename for uniqueness in the file\n  const slug = toValidCSSIdentifier(\n    `${displayName.charAt(0).toLowerCase()}${slugify(\n      `${relativeFilename}:${idx}`\n    )}`\n  );\n\n  // Collect some useful replacement patterns from the filename\n  // Available variables for the square brackets used in `classNameSlug` options\n  const ext = extname(relativeFilename);\n  const slugVars: ClassNameSlugVars = {\n    hash: slug,\n    title: displayName,\n    file: relativeFilename,\n    ext,\n    name: basename(relativeFilename, ext),\n    dir: dirname(relativeFilename).split(sep).pop() as string,\n  };\n\n  let className = options.displayName\n    ? `${toValidCSSIdentifier(displayName!)}_${slug!}`\n    : slug!;\n\n  // The className can be defined by the user either as fn or a string\n  if (typeof options.classNameSlug === 'function') {\n    try {\n      className = toValidCSSIdentifier(\n        options.classNameSlug(slug, displayName, slugVars)\n      );\n    } catch {\n      throw new Error('classNameSlug option must return a string');\n    }\n  }\n\n  if (typeof options.classNameSlug === 'string') {\n    const { classNameSlug } = options;\n\n    // Variables that were used in the config for `classNameSlug`\n    const optionVariables = classNameSlug.match(/\\[.*?]/g) || [];\n    let cnSlug = classNameSlug;\n\n    for (let i = 0, l = optionVariables.length; i < l; i++) {\n      const v = optionVariables[i].slice(1, -1); // Remove the brackets around the variable name\n\n      // Replace the var if it key and value exist otherwise place an empty string\n      cnSlug = cnSlug.replace(\n        `[${v}]`,\n        isSlugVar(v, slugVars) ? slugVars[v] : ''\n      );\n    }\n\n    className = toValidCSSIdentifier(cnSlug);\n  }\n\n  debug(\n    'template-parse:generated-meta',\n    `slug: ${slug}, displayName: ${displayName}, className: ${className}`\n  );\n\n  return { className, slug };\n}\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,GAA/C,QAA0D,MAA1D;AAEA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;;AAGA,MAAMC,SAAS,GAAG,CAChBC,GADgB,EAEhBC,QAFgB,KAGmBD,GAAG,IAAIC,QAH5C;;AAKA,eAAe,SAASC,mBAAT,CACbC,WADa,EAEbC,GAFa,EAGbC,OAHa,EAIbC,OAJa,EAKwB;EACrC,MAAMC,gBAAgB,GAAGb,QAAQ,CAACY,OAAO,CAACE,IAAT,EAAeF,OAAO,CAACG,QAAvB,CAAjC,CADqC,CAErC;EACA;;EACA,MAAMC,IAAI,GAAGZ,oBAAoB,CAC9B,GAAEK,WAAW,CAACQ,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,EAAoC,GAAEf,OAAO,CAC7C,GAAEU,gBAAiB,IAAGH,GAAI,EADmB,CAE9C,EAH6B,CAAjC,CAJqC,CAUrC;EACA;;EACA,MAAMS,GAAG,GAAGpB,OAAO,CAACc,gBAAD,CAAnB;EACA,MAAMN,QAA2B,GAAG;IAClCa,IAAI,EAAEJ,IAD4B;IAElCK,KAAK,EAAEZ,WAF2B;IAGlCa,IAAI,EAAET,gBAH4B;IAIlCM,GAJkC;IAKlCI,IAAI,EAAE1B,QAAQ,CAACgB,gBAAD,EAAmBM,GAAnB,CALoB;IAMlCK,GAAG,EAAE1B,OAAO,CAACe,gBAAD,CAAP,CAA0BY,KAA1B,CAAgCxB,GAAhC,EAAqCyB,GAArC;EAN6B,CAApC;EASA,IAAIC,SAAS,GAAGhB,OAAO,CAACF,WAAR,GACX,GAAEL,oBAAoB,CAACK,WAAD,CAAe,IAAGO,IAAM,EADnC,GAEZA,IAFJ,CAtBqC,CA0BrC;;EACA,IAAI,OAAOL,OAAO,CAACiB,aAAf,KAAiC,UAArC,EAAiD;IAC/C,IAAI;MACFD,SAAS,GAAGvB,oBAAoB,CAC9BO,OAAO,CAACiB,aAAR,CAAsBZ,IAAtB,EAA4BP,WAA5B,EAAyCF,QAAzC,CAD8B,CAAhC;IAGD,CAJD,CAIE,MAAM;MACN,MAAM,IAAIsB,KAAJ,CAAU,2CAAV,CAAN;IACD;EACF;;EAED,IAAI,OAAOlB,OAAO,CAACiB,aAAf,KAAiC,QAArC,EAA+C;IAC7C,MAAM;MAAEA;IAAF,IAAoBjB,OAA1B,CAD6C,CAG7C;;IACA,MAAMmB,eAAe,GAAGF,aAAa,CAACG,KAAd,CAAoB,SAApB,KAAkC,EAA1D;IACA,IAAIC,MAAM,GAAGJ,aAAb;;IAEA,KAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,eAAe,CAACK,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EAAwD;MACtD,MAAMG,CAAC,GAAGN,eAAe,CAACG,CAAD,CAAf,CAAmBI,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAAV,CADsD,CACX;MAE3C;;MACAL,MAAM,GAAGA,MAAM,CAACM,OAAP,CACN,IAAGF,CAAE,GADC,EAEP/B,SAAS,CAAC+B,CAAD,EAAI7B,QAAJ,CAAT,GAAyBA,QAAQ,CAAC6B,CAAD,CAAjC,GAAuC,EAFhC,CAAT;IAID;;IAEDT,SAAS,GAAGvB,oBAAoB,CAAC4B,MAAD,CAAhC;EACD;;EAED9B,KAAK,CACH,+BADG,EAEF,SAAQc,IAAK,kBAAiBP,WAAY,gBAAekB,SAAU,EAFjE,CAAL;EAKA,OAAO;IAAEA,SAAF;IAAaX;EAAb,CAAP;AACD"}