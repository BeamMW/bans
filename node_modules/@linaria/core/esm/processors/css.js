import BaseProcessor from './BaseProcessor';
export default class CssProcessor extends BaseProcessor {
  constructor(...args) {
    super(...args);

    if (this.params.length > 0) {
      throw new Error('Invalid usage of `css` tag');
    }
  } // eslint-disable-next-line class-methods-use-this


  addInterpolation() {
    // CSS custom properties can't be used outside components
    throw new Error("The CSS cannot contain JavaScript expressions when using the 'css' tag. To evaluate the expressions at build time, pass 'evaluate: true' to the babel plugin.");
  }

  extractRules(valueCache, cssText, loc) {
    const rules = {};
    const selector = `.${this.className}`;
    rules[selector] = {
      cssText,
      className: this.className,
      displayName: this.displayName,
      start: loc?.start ?? null
    };
    return [rules, this.className];
  } // eslint-disable-next-line class-methods-use-this


  getRuntimeReplacement(classes) {
    return [this.astService.stringLiteral(classes), false];
  }

  get asSelector() {
    return this.className;
  }

  get tagExpression() {
    return this.tagExp;
  }

  get valueSource() {
    return `"${this.className}"`;
  }

}
//# sourceMappingURL=css.js.map