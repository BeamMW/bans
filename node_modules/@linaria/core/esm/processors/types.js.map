{"version":3,"file":"types.js","names":[],"sources":["../../src/processors/types.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Expression } from '@babel/types';\n\nimport type { StyledMeta } from '../StyledMeta';\n\nexport type JSONValue = string | number | boolean | JSONObject | JSONArray;\n\nexport interface JSONObject {\n  [x: string]: JSONValue;\n}\n\nexport type JSONArray = Array<JSONValue>;\n\nexport type Serializable = JSONArray | JSONObject;\n\nexport type Value = (() => void) | StyledMeta | string | number | Serializable;\n\nexport type ValueCache = Map<Expression, Value>;\n\nexport type Location = {\n  column: number;\n  line: number;\n};\n\nexport interface ICSSRule {\n  atom?: boolean;\n  className: string;\n  cssText: string;\n  displayName: string;\n  start: Location | null | undefined;\n}\n\nexport interface IInterpolation {\n  id: string;\n  node: Expression;\n  source: string;\n  unit: string;\n}\n\nexport type WrappedNode = string | { node: Expression; source: string };\n\nexport type Rules = Record<string, ICSSRule>;\n\nexport type CallParam = ['call', ...[string, NodePath<Expression>][]];\nexport type MemberParam = ['member', NodePath<Expression>];\n\nexport type Params = (CallParam | MemberParam)[];\n\nexport interface IDependency {\n  ex: NodePath<Expression>;\n  source: string;\n}\n"],"mappings":""}