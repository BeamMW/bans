{"version":3,"file":"getClassNameAndSlug.js","names":["isSlugVar","key","slugVars","getClassNameAndSlug","displayName","idx","options","context","relativeFilename","relative","root","filename","slug","toValidCSSIdentifier","charAt","toLowerCase","slugify","ext","extname","hash","title","file","name","basename","dir","dirname","split","sep","pop","className","classNameSlug","Error","optionVariables","match","cnSlug","i","l","length","v","slice","replace","debug"],"sources":["../../../src/processors/utils/getClassNameAndSlug.ts"],"sourcesContent":["import { basename, dirname, extname, relative, sep } from 'path';\n\nimport { debug } from '@linaria/logger';\nimport { slugify } from '@linaria/utils';\n\nimport toValidCSSIdentifier from './toValidCSSIdentifier';\nimport type { ClassNameSlugVars, IFileContext, IOptions } from './types';\n\nconst isSlugVar = (\n  key: string,\n  slugVars: ClassNameSlugVars\n): key is keyof ClassNameSlugVars => key in slugVars;\n\nexport default function getClassNameAndSlug(\n  displayName: string,\n  idx: number,\n  options: IOptions,\n  context: IFileContext\n): { className: string; slug: string } {\n  const relativeFilename = relative(context.root, context.filename);\n  // Custom properties need to start with a letter, so we prefix the slug\n  // Also use append the index of the class to the filename for uniqueness in the file\n  const slug = toValidCSSIdentifier(\n    `${displayName.charAt(0).toLowerCase()}${slugify(\n      `${relativeFilename}:${idx}`\n    )}`\n  );\n\n  // Collect some useful replacement patterns from the filename\n  // Available variables for the square brackets used in `classNameSlug` options\n  const ext = extname(relativeFilename);\n  const slugVars: ClassNameSlugVars = {\n    hash: slug,\n    title: displayName,\n    file: relativeFilename,\n    ext,\n    name: basename(relativeFilename, ext),\n    dir: dirname(relativeFilename).split(sep).pop() as string,\n  };\n\n  let className = options.displayName\n    ? `${toValidCSSIdentifier(displayName!)}_${slug!}`\n    : slug!;\n\n  // The className can be defined by the user either as fn or a string\n  if (typeof options.classNameSlug === 'function') {\n    try {\n      className = toValidCSSIdentifier(\n        options.classNameSlug(slug, displayName, slugVars)\n      );\n    } catch {\n      throw new Error('classNameSlug option must return a string');\n    }\n  }\n\n  if (typeof options.classNameSlug === 'string') {\n    const { classNameSlug } = options;\n\n    // Variables that were used in the config for `classNameSlug`\n    const optionVariables = classNameSlug.match(/\\[.*?]/g) || [];\n    let cnSlug = classNameSlug;\n\n    for (let i = 0, l = optionVariables.length; i < l; i++) {\n      const v = optionVariables[i].slice(1, -1); // Remove the brackets around the variable name\n\n      // Replace the var if it key and value exist otherwise place an empty string\n      cnSlug = cnSlug.replace(\n        `[${v}]`,\n        isSlugVar(v, slugVars) ? slugVars[v] : ''\n      );\n    }\n\n    className = toValidCSSIdentifier(cnSlug);\n  }\n\n  debug(\n    'template-parse:generated-meta',\n    `slug: ${slug}, displayName: ${displayName}, className: ${className}`\n  );\n\n  return { className, slug };\n}\n"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAEA;;;;AAGA,MAAMA,SAAS,GAAG,CAChBC,GADgB,EAEhBC,QAFgB,KAGmBD,GAAG,IAAIC,QAH5C;;AAKe,SAASC,mBAAT,CACbC,WADa,EAEbC,GAFa,EAGbC,OAHa,EAIbC,OAJa,EAKwB;EACrC,MAAMC,gBAAgB,GAAG,IAAAC,cAAA,EAASF,OAAO,CAACG,IAAjB,EAAuBH,OAAO,CAACI,QAA/B,CAAzB,CADqC,CAErC;EACA;;EACA,MAAMC,IAAI,GAAG,IAAAC,6BAAA,EACV,GAAET,WAAW,CAACU,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,EAAoC,GAAE,IAAAC,cAAA,EACtC,GAAER,gBAAiB,IAAGH,GAAI,EADY,CAEvC,EAHS,CAAb,CAJqC,CAUrC;EACA;;EACA,MAAMY,GAAG,GAAG,IAAAC,aAAA,EAAQV,gBAAR,CAAZ;EACA,MAAMN,QAA2B,GAAG;IAClCiB,IAAI,EAAEP,IAD4B;IAElCQ,KAAK,EAAEhB,WAF2B;IAGlCiB,IAAI,EAAEb,gBAH4B;IAIlCS,GAJkC;IAKlCK,IAAI,EAAE,IAAAC,cAAA,EAASf,gBAAT,EAA2BS,GAA3B,CAL4B;IAMlCO,GAAG,EAAE,IAAAC,aAAA,EAAQjB,gBAAR,EAA0BkB,KAA1B,CAAgCC,SAAhC,EAAqCC,GAArC;EAN6B,CAApC;EASA,IAAIC,SAAS,GAAGvB,OAAO,CAACF,WAAR,GACX,GAAE,IAAAS,6BAAA,EAAqBT,WAArB,CAAmC,IAAGQ,IAAM,EADnC,GAEZA,IAFJ,CAtBqC,CA0BrC;;EACA,IAAI,OAAON,OAAO,CAACwB,aAAf,KAAiC,UAArC,EAAiD;IAC/C,IAAI;MACFD,SAAS,GAAG,IAAAhB,6BAAA,EACVP,OAAO,CAACwB,aAAR,CAAsBlB,IAAtB,EAA4BR,WAA5B,EAAyCF,QAAzC,CADU,CAAZ;IAGD,CAJD,CAIE,MAAM;MACN,MAAM,IAAI6B,KAAJ,CAAU,2CAAV,CAAN;IACD;EACF;;EAED,IAAI,OAAOzB,OAAO,CAACwB,aAAf,KAAiC,QAArC,EAA+C;IAC7C,MAAM;MAAEA;IAAF,IAAoBxB,OAA1B,CAD6C,CAG7C;;IACA,MAAM0B,eAAe,GAAGF,aAAa,CAACG,KAAd,CAAoB,SAApB,KAAkC,EAA1D;IACA,IAAIC,MAAM,GAAGJ,aAAb;;IAEA,KAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,eAAe,CAACK,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EAAwD;MACtD,MAAMG,CAAC,GAAGN,eAAe,CAACG,CAAD,CAAf,CAAmBI,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAAV,CADsD,CACX;MAE3C;;MACAL,MAAM,GAAGA,MAAM,CAACM,OAAP,CACN,IAAGF,CAAE,GADC,EAEPtC,SAAS,CAACsC,CAAD,EAAIpC,QAAJ,CAAT,GAAyBA,QAAQ,CAACoC,CAAD,CAAjC,GAAuC,EAFhC,CAAT;IAID;;IAEDT,SAAS,GAAG,IAAAhB,6BAAA,EAAqBqB,MAArB,CAAZ;EACD;;EAED,IAAAO,aAAA,EACE,+BADF,EAEG,SAAQ7B,IAAK,kBAAiBR,WAAY,gBAAeyB,SAAU,EAFtE;EAKA,OAAO;IAAEA,SAAF;IAAajB;EAAb,CAAP;AACD"}