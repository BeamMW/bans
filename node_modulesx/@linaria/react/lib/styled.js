"use strict";

exports.__esModule = true;
exports.default = exports.restOp = void 0;

var _react = _interopRequireDefault(require("react"));

var _isPropValid = _interopRequireDefault(require("@emotion/is-prop-valid"));

var _core = require("@linaria/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file contains an runtime version of `styled` component. Responsibilities of the component are:
 * - returns ReactElement based on HTML tag used with `styled` or custom React Component
 * - injects classNames for the returned component
 * - injects CSS variables used to define dynamic styles based on props
 */
// Workaround for rest operator
var restOp = function restOp(obj, keys) {
  var res = {};
  var key;

  for (key in obj) {
    if (keys.indexOf(key) === -1) {
      res[key] = obj[key];
    }
  }

  return res;
};

exports.restOp = restOp;

var warnIfInvalid = function warnIfInvalid(value, componentName) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof value === 'string' || // eslint-disable-next-line no-self-compare
    typeof value === 'number' && isFinite(value)) {
      return;
    }

    var stringified = typeof value === 'object' ? JSON.stringify(value) : String(value); // eslint-disable-next-line no-console

    console.warn("An interpolation evaluated to '" + stringified + "' in the component '" + componentName + "', which is probably a mistake. You should explicitly cast or transform the value to a string.");
  }
};

function styled(tag) {
  return function (options) {
    if (process.env.NODE_ENV !== 'production') {
      if (Array.isArray(options)) {
        // We received a strings array since it's used as a tag
        throw new Error('Using the "styled" tag in runtime is not supported. Make sure you have set up the Babel plugin correctly. See https://github.com/callstack/linaria#setup');
      }
    }

    var render = function render(props, ref) {
      var _props$as = props.as,
          component = _props$as === void 0 ? tag : _props$as,
          className = props.class;
      var rest = restOp(props, ['as', 'class']);
      var filteredProps; // Check if it's an HTML tag and not a custom element

      if (typeof component === 'string' && component.indexOf('-') === -1) {
        filteredProps = {}; // eslint-disable-next-line guard-for-in

        for (var _key in rest) {
          if (_key === 'as' || (0, _isPropValid.default)(_key)) {
            // Don't pass through invalid attributes to HTML elements
            filteredProps[_key] = rest[_key];
          }
        }
      } else {
        filteredProps = rest;
      }

      filteredProps.ref = ref;
      filteredProps.className = (0, _core.cx)(filteredProps.className || className, options.class);
      var vars = options.vars;

      if (vars) {
        var style = {}; // eslint-disable-next-line guard-for-in

        for (var name in vars) {
          var variable = vars[name];
          var result = variable[0];
          var unit = variable[1] || '';
          var value = typeof result === 'function' ? result(props) : result;
          warnIfInvalid(value, options.name);
          style["--" + name] = "" + value + unit;
        }

        var ownStyle = filteredProps.style || {};

        var _keys = Object.keys(ownStyle);

        if (_keys.length > 0) {
          _keys.forEach(function (key) {
            style[key] = ownStyle[key];
          });
        }

        filteredProps.style = style;
      }

      if (tag.__linaria && tag !== component) {
        // If the underlying tag is a styled component, forward the `as` prop
        // Otherwise the styles from the underlying component will be ignored
        filteredProps.as = component;
        return /*#__PURE__*/_react.default.createElement(tag, filteredProps);
      }

      return /*#__PURE__*/_react.default.createElement(component, filteredProps);
    };

    var Result = _react.default.forwardRef ? /*#__PURE__*/_react.default.forwardRef(render) : // React.forwardRef won't available on older React versions and in Preact
    // Fallback to a innerRef prop in that case
    function (props) {
      var rest = restOp(props, ['innerRef']);
      return render(rest, props.innerRef);
    };
    Result.displayName = options.name; // These properties will be read by the babel plugin for interpolation

    Result.__linaria = {
      className: options.class,
      extends: tag
    };
    return Result;
  };
}

var _default = process.env.NODE_ENV !== 'production' ? new Proxy(styled, {
  get: function get(o, prop) {
    return o(prop);
  }
}) : styled;

exports.default = _default;
//# sourceMappingURL=styled.js.map