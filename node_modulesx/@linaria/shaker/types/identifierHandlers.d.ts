import type { Identifier, Node, VisitorKeys } from '@babel/types';
import GraphBuilderState from './GraphBuilderState';
import type { IdentifierHandlerType, NodeType } from './types';
declare type HandlerFn = <TParent extends Node = Node>(builder: GraphBuilderState, node: Identifier, parent: TParent, parentKey: VisitorKeys[TParent['type']], listIdx: number | null) => void;
declare type Handler = IdentifierHandlerType | HandlerFn;
declare const handlers: {
    [key: string]: Handler;
};
export declare function defineHandler(typeOrAlias: NodeType, field: string, handler: Handler): void;
export declare function batchDefineHandlers(typesAndFields: [NodeType, ...string[]][], handler: IdentifierHandlerType): void;
export default handlers;
