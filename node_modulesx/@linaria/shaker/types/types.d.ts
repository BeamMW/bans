import type { Aliases, Node, VisitorKeys } from '@babel/types';
export declare type NodeOfType<T> = Extract<Node, {
    type: T;
}>;
export declare type NodeType = Node['type'] | keyof Aliases;
export declare type VisitorAction = 'ignore' | void;
export declare type Visitor<TNode extends Node> = <TParent extends Node>(node: TNode, parent: TParent | null, parentKey: VisitorKeys[TParent['type']] | null, listIdx: number | null) => VisitorAction;
export declare type Visitors = {
    [TMethod in NodeType]?: Visitor<NodeOfType<TMethod>>;
};
export declare type IdentifierHandlerType = 'declare' | 'keep' | 'refer';
export declare type IdentifierHandlers = {
    [key in IdentifierHandlerType]: [NodeType, ...string[]][];
};
