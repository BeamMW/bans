import type { Node, VisitorKeys } from '@babel/types';
import ScopeManager from './scope';
import DepsGraph from './DepsGraph';
import { VisitorAction } from './types';
export declare type OnVisitCallback = (n: Node) => void;
export default abstract class GraphBuilderState {
    readonly scope: ScopeManager;
    readonly graph: DepsGraph;
    readonly meta: Map<string, any>;
    protected callbacks: OnVisitCallback[];
    readonly context: Array<'expression' | 'lval'>;
    readonly fnStack: Node[];
    onVisit(callback: OnVisitCallback): () => void;
    abstract baseVisit<TNode extends Node>(node: TNode, ignoreDeps?: boolean): void;
    abstract visit<TNode extends Node, TParent extends Node>(node: TNode, parent: TParent | null, parentKey: VisitorKeys[TParent['type']] | null, listIdx?: number | null): VisitorAction;
}
