{"version":3,"sources":["../src/GraphBuilderState.ts"],"names":["GraphBuilderState","ScopeManager","DepsGraph","scope","Map","onVisit","callback","callbacks","push","filter","c"],"mappings":";;;;;;;AACA;;AACA;;;;;;AAKe,MAAeA,iBAAf,CAAiC;AAAA;AAAA,mCACtB,IAAIC,cAAJ,EADsB;;AAAA,mCAEtB,IAAIC,kBAAJ,CAAc,KAAKC,KAAnB,CAFsB;;AAAA,kCAGvB,IAAIC,GAAJ,EAHuB;;AAAA,uCAKL,EALK;;AAAA,qCAgBU,EAhBV;;AAAA,qCAkBZ,EAlBY;AAAA;;AAoBvCC,EAAAA,OAAO,CAACC,QAAD,EAA4B;AACxC,SAAKC,SAAL,CAAeC,IAAf,CAAoBF,QAApB;AACA,WAAO,MAAM;AACX,WAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeE,MAAf,CAAuBC,CAAD,IAAOA,CAAC,KAAKJ,QAAnC,CAAjB;AACD,KAFD;AAGD;;AAzB6C","sourcesContent":["import type { Node, VisitorKeys } from '@babel/types';\nimport ScopeManager from './scope';\nimport DepsGraph from './DepsGraph';\nimport { VisitorAction } from './types';\n\nexport type OnVisitCallback = (n: Node) => void;\n\nexport default abstract class GraphBuilderState {\n  public readonly scope = new ScopeManager();\n  public readonly graph = new DepsGraph(this.scope);\n  public readonly meta = new Map<string, any>();\n\n  protected callbacks: OnVisitCallback[] = [];\n\n  /*\n   * For expressions like `{ foo: bar }` we need to now context\n   *\n   * const obj = { foo: bar };\n   * Here context is `expression`, `bar` is a variable which depends from its declaration.\n   *\n   * const { foo: bar } = obj;\n   * Here context is `pattern` and `bar` is a variable declaration itself.\n   */\n  public readonly context: Array<'expression' | 'lval'> = [];\n\n  public readonly fnStack: Node[] = [];\n\n  public onVisit(callback: OnVisitCallback) {\n    this.callbacks.push(callback);\n    return () => {\n      this.callbacks = this.callbacks.filter((c) => c !== callback);\n    };\n  }\n\n  abstract baseVisit<TNode extends Node>(\n    node: TNode,\n    ignoreDeps?: boolean\n  ): void;\n\n  abstract visit<TNode extends Node, TParent extends Node>(\n    node: TNode,\n    parent: TParent | null,\n    parentKey: VisitorKeys[TParent['type']] | null,\n    listIdx?: number | null\n  ): VisitorAction;\n}\n"],"file":"GraphBuilderState.js"}