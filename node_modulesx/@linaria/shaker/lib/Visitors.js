"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVisitors = getVisitors;
exports.default = void 0;

var _core = require("@babel/core");

var _logger = require("@linaria/logger");

var _babelPreset = require("@linaria/babel-preset");

var _identifierHandlers = _interopRequireDefault(require("./identifierHandlers"));

var _core2 = require("./langs/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const visitors = {
  Identifier(node, parent, parentKey, listIdx = null) {
    if (!parent || !parentKey) {
      return;
    }

    const handler = _identifierHandlers.default[`${parent.type}:${parentKey}`];

    if (typeof handler === 'function') {
      handler(this, node, parent, parentKey, listIdx);
      return;
    }

    if (handler === 'keep') {
      return;
    }

    if (handler === 'declare') {
      const kindOfDeclaration = this.meta.get('kind-of-declaration');
      this.scope.declare(node, kindOfDeclaration === 'var', null);
      return;
    }

    if (handler === 'refer') {
      const declaration = this.scope.addReference(node); // Let's check that it's not a global variable

      if (declaration) {
        // usage of a variable depends on its declaration
        this.graph.addEdge(node, declaration);
        const context = (0, _babelPreset.peek)(this.context);

        if (context === 'lval') {
          // This is an identifier in the left side of an assignment expression and a variable value depends on that.
          this.graph.addEdge(declaration, node);
        }
      }

      return;
    }
    /*
     * There is an unhandled identifier.
     * This case should be added to ./identifierHandlers.ts
     */


    (0, _logger.warn)('evaluator:shaker', 'Unhandled identifier', node.name, parent.type, parentKey, listIdx);
  },

  ..._core2.visitors
};

const isKeyOfVisitors = type => type in visitors;

function getVisitors(node) {
  const aliases = _core.types.ALIAS_KEYS[node.type] || [];
  const aliasVisitors = aliases.map(type => isKeyOfVisitors(type) ? visitors[type] : null).filter(i => i);
  return [...aliasVisitors, visitors[node.type]].filter(v => v);
}

var _default = visitors;
exports.default = _default;
//# sourceMappingURL=Visitors.js.map