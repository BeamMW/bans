{"version":3,"sources":["../src/graphBuilder.ts"],"names":["types","t","isNode","getVisitorKeys","GraphBuilderState","getVisitors","ScopeManager","isVoid","node","isUnaryExpression","operator","GraphBuilder","build","root","graph","constructor","rootNode","visit","isExportsIdentifier","isIdentifier","scope","getDeclaration","globalExportsIdentifier","isMemberExpression","property","name","object","globalModuleIdentifier","isExportsAssigment","isAssignmentExpression","left","isTSExporterCall","isCallExpression","arguments","length","callee","baseVisit","ignoreDeps","dependencies","isExpression","keys","key","subNode","Array","isArray","i","child","push","forEach","dep","addEdge","callbacks","callback","parent","parentKey","listIdx","addParent","right","isStringLiteral","isObjectExpression","properties","prop","isObjectProperty","value","addExport","nameNode","identifier","isScopable","isFunction","new","isProgram","fnStack","visitors","action","visitor","shift","call","isStatement","pop","dispose"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport type { AssignmentExpression, Node, VisitorKeys } from '@babel/types';\nimport { isNode, getVisitorKeys } from '@linaria/babel-preset';\nimport DepsGraph from './DepsGraph';\nimport GraphBuilderState from './GraphBuilderState';\nimport { getVisitors } from './Visitors';\nimport type { VisitorAction } from './types';\nimport ScopeManager from './scope';\n\nconst isVoid = (node: Node): boolean =>\n  t.isUnaryExpression(node) && node.operator === 'void';\n\nclass GraphBuilder extends GraphBuilderState {\n  static build(root: Node): DepsGraph {\n    return new GraphBuilder(root).graph;\n  }\n\n  constructor(rootNode: Node) {\n    super();\n\n    this.visit(rootNode, null, null, null);\n  }\n\n  private isExportsIdentifier(node: Node) {\n    if (t.isIdentifier(node)) {\n      return (\n        this.scope.getDeclaration(node) === ScopeManager.globalExportsIdentifier\n      );\n    }\n\n    if (t.isMemberExpression(node)) {\n      return (\n        t.isIdentifier(node.property) &&\n        node.property.name === 'exports' &&\n        t.isIdentifier(node.object) &&\n        this.scope.getDeclaration(node.object) ===\n          ScopeManager.globalModuleIdentifier\n      );\n    }\n\n    return false;\n  }\n\n  private isExportsAssigment(node: Node): node is AssignmentExpression {\n    if (\n      node &&\n      t.isAssignmentExpression(node) &&\n      t.isMemberExpression(node.left)\n    ) {\n      if (this.isExportsIdentifier(node.left)) {\n        // This is a default export like `module.exports = 42`\n        return true;\n      }\n\n      if (this.isExportsIdentifier(node.left.object)) {\n        // This is a named export like `module.exports.a = 42` or `exports.a = 42`\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isTSExporterCall(\n    node: Node\n  ): node is t.CallExpression & { arguments: [t.StringLiteral, t.Identifier] } {\n    if (!t.isCallExpression(node) || node.arguments.length !== 2) {\n      return false;\n    }\n\n    // FIXME: more precisely check\n    return !(!t.isIdentifier(node.callee) || node.callee.name !== 'exporter');\n  }\n\n  /*\n   * Implements a default behaviour for AST-nodes:\n   * • visits every child;\n   * • if the current node is an Expression node, adds all its children as dependencies.\n   *\n   * eg. BinaryExpression has children `left` and `right`,\n   * both of them are required for evaluating the value of the expression\n   */\n  baseVisit<TNode extends Node>(node: TNode, ignoreDeps = false) {\n    const dependencies = [];\n    const isExpression = t.isExpression(node);\n    const keys = getVisitorKeys(node);\n    for (const key of keys) {\n      // Ignore all types\n      if (key === 'typeArguments' || key === 'typeParameters') {\n        continue;\n      }\n\n      const subNode = node[key as keyof TNode];\n\n      if (Array.isArray(subNode)) {\n        for (let i = 0; i < subNode.length; i++) {\n          const child = subNode[i];\n          if (child && this.visit(child, node, key, i) !== 'ignore') {\n            dependencies.push(child);\n          }\n        }\n      } else if (\n        isNode(subNode) &&\n        this.visit(subNode, node, key) !== 'ignore'\n      ) {\n        dependencies.push(subNode);\n      }\n    }\n\n    if (isExpression && !ignoreDeps) {\n      dependencies.forEach((dep) => this.graph.addEdge(node, dep));\n    }\n\n    this.callbacks.forEach((callback) => callback(node));\n  }\n\n  visit<TNode extends Node, TParent extends Node>(\n    node: TNode,\n    parent: TParent | null,\n    parentKey: VisitorKeys[TParent['type']] | null,\n    listIdx: number | null = null\n  ): VisitorAction {\n    if (parent) {\n      this.graph.addParent(node, parent);\n    }\n\n    if (\n      this.isExportsAssigment(node) &&\n      !this.isExportsAssigment(node.right) &&\n      !isVoid(node.right)\n    ) {\n      if (\n        t.isMemberExpression(node.left) &&\n        (t.isIdentifier(node.left.property) ||\n          t.isStringLiteral(node.left.property))\n      ) {\n        if (\n          t.isIdentifier(node.left.object) &&\n          node.left.object.name === 'module'\n        ) {\n          // It's a batch or default export\n          if (t.isObjectExpression(node.right)) {\n            // Batch export is a very particular case.\n            // Each property of the assigned object is independent named export.\n            // We also need to specify all dependencies and call `visit` for every value.\n            this.visit(node.left, node, 'left');\n            node.right.properties.forEach((prop) => {\n              if (t.isObjectProperty(prop) && t.isIdentifier(prop.key)) {\n                this.visit(prop.value, prop, 'value');\n                this.graph.addExport(prop.key.name, prop);\n                this.graph.addEdge(prop, node.right);\n                this.graph.addEdge(prop, prop.key);\n                this.graph.addEdge(prop.key, prop.value);\n              }\n            });\n\n            this.graph.addEdge(node.right, node);\n            this.graph.addEdge(node, node.left);\n\n            // We have done all the required work, so stop here\n            return;\n          } else {\n            this.graph.addExport('default', node);\n          }\n        } else {\n          // it can be either `exports.name` or `exports[\"name\"]`\n          const nameNode = node.left.property;\n          this.graph.addExport(\n            t.isStringLiteral(nameNode) ? nameNode.value : nameNode.name,\n            node\n          );\n        }\n      }\n    } else if (this.isTSExporterCall(node)) {\n      const [name, identifier] = node.arguments;\n      this.graph.addExport(name.value, node);\n      this.graph.addEdge(node, identifier);\n    }\n\n    const isScopable = t.isScopable(node);\n    const isFunction = t.isFunction(node);\n\n    if (isScopable) this.scope.new(t.isProgram(node) || t.isFunction(node));\n    if (isFunction) this.fnStack.push(node);\n\n    const visitors = getVisitors(node);\n    let action: VisitorAction;\n    if (visitors.length > 0) {\n      let visitor;\n      while (!action && (visitor = visitors.shift())) {\n        action = visitor.call(this, node, parent, parentKey, listIdx);\n      }\n    } else {\n      this.baseVisit(node);\n    }\n\n    if (parent && action !== 'ignore' && t.isStatement(node)) {\n      // Statement always depends on its parent\n      this.graph.addEdge(node, parent);\n    }\n\n    if (isFunction) this.fnStack.pop();\n    if (isScopable) this.scope.dispose();\n\n    return action;\n  }\n}\n\nexport default GraphBuilder.build;\n"],"file":"graphBuilder.js"}