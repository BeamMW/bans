{"version":3,"sources":["../../src/utils/getLinariaComment.ts"],"names":["pattern","getLinariaComment","path","remove","comments","node","leadingComments","idx","findIndex","comment","test","value","matched","match","filter","_","i","type","split","map"],"mappings":"AAEA,MAAMA,OAAO,GAAG,wCAAhB;AAEA,eAAe,SAASC,iBAAT,CACbC,IADa,EAEbC,MAAe,GAAG,IAFL,EAGmD;AAChE,QAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,eAA3B;;AACA,MAAI,CAACF,QAAL,EAAe;AACb,WAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAP;AACD;;AAED,QAAMG,GAAG,GAAGH,QAAQ,CAACI,SAAT,CAAoBC,OAAD,IAAaT,OAAO,CAACU,IAAR,CAAaD,OAAO,CAACE,KAArB,CAAhC,CAAZ;;AACA,MAAIJ,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAP;AACD;;AAED,QAAMK,OAAO,GAAGR,QAAQ,CAACG,GAAD,CAAR,CAAcI,KAAd,CAAoBE,KAApB,CAA0Bb,OAA1B,CAAhB;;AACA,MAAI,CAACY,OAAL,EAAc;AACZ,WAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAP;AACD;;AAED,MAAIT,MAAJ,EAAY;AACVD,IAAAA,IAAI,CAACG,IAAL,CAAUC,eAAV,GAA4BF,QAAQ,CAACU,MAAT,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKT,GAAhC,CAA5B;AACD;;AAED,MAAIU,IAAqC,GAAG,QAA5C;;AACA,MAAIL,OAAO,CAAC,CAAD,CAAP,KAAe,KAAnB,EAA0B;AACxBK,IAAAA,IAAI,GAAG,KAAP;AACD,GAFD,MAEO,IAAIL,OAAO,CAAC,CAAD,CAAP,KAAe,YAAnB,EAAiC;AACtCK,IAAAA,IAAI,GAAG,YAAP;AACD;;AACD,SAAO,CAACA,IAAD,EAAO,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAWM,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA2BH,CAAD,IAAQA,CAAC,GAAGA,CAAH,GAAO,IAA1C,CAAV,CAAP;AACD","sourcesContent":["import type { Node } from '@babel/types';\n\nconst pattern = /^linaria (atomic-css|css|styled) (.+)$/;\n\nexport default function getLinariaComment(\n  path: { node: Node },\n  remove: boolean = true\n): ['css' | 'atomic-css' | 'styled' | null, ...(string | null)[]] {\n  const comments = path.node.leadingComments;\n  if (!comments) {\n    return [null, null, null, null];\n  }\n\n  const idx = comments.findIndex((comment) => pattern.test(comment.value));\n  if (idx === -1) {\n    return [null, null, null, null];\n  }\n\n  const matched = comments[idx].value.match(pattern);\n  if (!matched) {\n    return [null, null, null, null];\n  }\n\n  if (remove) {\n    path.node.leadingComments = comments.filter((_, i) => i !== idx);\n  }\n\n  let type: 'css' | 'atomic-css' | 'styled' = 'styled';\n  if (matched[1] === 'css') {\n    type = 'css';\n  } else if (matched[1] === 'atomic-css') {\n    type = 'atomic-css';\n  }\n  return [type, ...matched[2].split(' ').map((i) => (i ? i : null))];\n}\n"],"file":"getLinariaComment.js"}