{"version":3,"sources":["../../src/utils/stripLines.ts"],"names":["stripLines","loc","text","result","String","replace","trim","start","line","end","repeat","column"],"mappings":"AAEA;AACA;AACA;AACA,eAAe,SAASA,UAAT,CACbC,GADa,EAEbC,IAFa,EAGb;AACA,MAAIC,MAAM,GAAGC,MAAM,CAACF,IAAD,CAAN,CACVG,OADU,CACF,UADE,EACU,GADV,EAEVC,IAFU,EAAb,CADA,CAKA;;AACA,MAAIL,GAAG,CAACM,KAAJ,CAAUC,IAAV,KAAmBP,GAAG,CAACQ,GAAJ,CAAQD,IAA/B,EAAqC;AACnCL,IAAAA,MAAM,IAAI,KAAKO,MAAL,CAAYT,GAAG,CAACQ,GAAJ,CAAQD,IAAR,GAAeP,GAAG,CAACM,KAAJ,CAAUC,IAArC,CAAV,CADmC,CAGnC;;AACAL,IAAAA,MAAM,IAAI,IAAIO,MAAJ,CAAWT,GAAG,CAACQ,GAAJ,CAAQE,MAAnB,CAAV;AACD;;AAED,SAAOR,MAAP;AACD","sourcesContent":["import type { Location } from '../types';\n\n// Stripping away the new lines ensures that we preserve line numbers\n// This is useful in case of tools such as the stylelint pre-processor\n// This should be safe because strings cannot contain newline: https://www.w3.org/TR/CSS2/syndata.html#strings\nexport default function stripLines(\n  loc: { start: Location; end: Location },\n  text: string | number\n) {\n  let result = String(text)\n    .replace(/[\\r\\n]+/g, ' ')\n    .trim();\n\n  // If the start and end line numbers aren't same, add new lines to span the text across multiple lines\n  if (loc.start.line !== loc.end.line) {\n    result += '\\n'.repeat(loc.end.line - loc.start.line);\n\n    // Add extra spaces to offset the column\n    result += ' '.repeat(loc.end.column);\n  }\n\n  return result;\n}\n"],"file":"stripLines.js"}