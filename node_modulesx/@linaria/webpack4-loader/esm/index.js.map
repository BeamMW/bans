{"version":3,"sources":["../src/index.ts"],"names":["path","loaderUtils","enhancedResolve","EvalCache","Module","transform","debug","notify","addFile","castSourceMap","sourceMap","version","toString","undefined","outputCssLoader","require","resolve","webpack4Loader","content","inputSourceMap","resourcePath","clearForFile","resolveOptionsDefaults","conditionNames","extensions","preprocessor","extension","resolveOptions","rest","getOptions","outputFileName","replace","webpackResolveOptions","_compilation","options","length","resolveSync","create","sync","mainFields","__dirname","__filename","e","alias","modules","result","originalResolveFilename","_resolveFilename","id","filename","dirname","addDependency","relative","process","cwd","pluginOptions","cssText","Buffer","from","cssSourceMapText","dependencies","forEach","dep","f","console","warn","request","stringifiedRequest","stringifyRequest","callback","code"],"mappings":"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","sourcesContent":["/**\n * This file contains a Webpack loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport path from 'path';\nimport loaderUtils from 'loader-utils';\nimport enhancedResolve from 'enhanced-resolve';\nimport type { RawSourceMap } from 'source-map';\nimport { EvalCache, Module, transform } from '@linaria/babel-preset';\nimport { debug, notify } from '@linaria/logger';\nimport { addFile } from './outputCssLoader';\n\ntype LoaderContext = Parameters<typeof loaderUtils.getOptions>[0];\n\nconst castSourceMap = <T extends { version: number } | { version: string }>(\n  sourceMap: T | null | undefined\n) =>\n  sourceMap\n    ? {\n        ...sourceMap,\n        version: sourceMap.version.toString(),\n      }\n    : undefined;\n\nconst outputCssLoader = require.resolve('./outputCssLoader');\n\nexport default function webpack4Loader(\n  this: LoaderContext,\n  content: string,\n  inputSourceMap: RawSourceMap | null\n) {\n  debug('loader', this.resourcePath);\n\n  EvalCache.clearForFile(this.resourcePath);\n\n  const resolveOptionsDefaults = {\n    conditionNames: ['require'],\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  };\n\n  const {\n    sourceMap = undefined,\n    preprocessor = undefined,\n    extension = '.linaria.css',\n    resolveOptions = {},\n    ...rest\n  } = loaderUtils.getOptions(this) || {};\n\n  const outputFileName = this.resourcePath.replace(/\\.[^.]+$/, extension);\n\n  // this._compilation is a deprecated API\n  // However there seems to be no other way to access webpack's resolver\n  // There is this.resolve, but it's asynchronous\n  // Another option is to read the webpack.config.js, but it won't work for programmatic usage\n  // This API is used by many loaders/plugins, so hope we're safe for a while\n  const webpackResolveOptions = this._compilation?.options.resolve;\n\n  // Resolved configuration contains empty list of extensions as a default value\n  // https://github.com/callstack/linaria/issues/855\n  if (webpackResolveOptions.extensions?.length === 0) {\n    delete webpackResolveOptions.extensions;\n  }\n\n  // Let's try to create a resolver with the webpack config\n  let resolveSync = enhancedResolve.create.sync({\n    ...resolveOptionsDefaults,\n    ...(this._compilation?.options.resolve ?? {}),\n    ...resolveOptions,\n    mainFields: ['main'],\n  });\n\n  try {\n    // Try to resolve the current file\n    resolveSync(__dirname, __filename);\n  } catch (e) {\n    // Looks like one of the webpack plugins is async and the whole resolver became async\n    notify(\n      'The default webpack configuration cannot be used because some of the plugins are asynchronous. All plugins have been ignored. Please override `resolveOptions.plugins` in the Linaria configuration.'\n    );\n\n    // Fallback to synchronous resolve\n    resolveSync = enhancedResolve.create.sync({\n      ...resolveOptionsDefaults,\n      ...((webpackResolveOptions && {\n        alias: webpackResolveOptions.alias,\n        modules: webpackResolveOptions.modules,\n      }) ||\n        {}),\n      ...resolveOptions,\n    });\n  }\n\n  let result;\n\n  const originalResolveFilename = Module._resolveFilename;\n\n  try {\n    // Use webpack's resolution when evaluating modules\n    Module._resolveFilename = (id, { filename }) => {\n      const result = resolveSync(path.dirname(filename), id);\n      this.addDependency(result);\n      return result;\n    };\n\n    result = transform(content, {\n      filename: path.relative(process.cwd(), this.resourcePath),\n      inputSourceMap: inputSourceMap ?? undefined,\n      pluginOptions: rest,\n      preprocessor,\n    });\n  } finally {\n    // Restore original behaviour\n    Module._resolveFilename = originalResolveFilename;\n  }\n\n  if (result.cssText) {\n    let { cssText } = result;\n\n    if (sourceMap) {\n      cssText += `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(\n        result.cssSourceMapText || ''\n      ).toString('base64')}*/`;\n    }\n\n    if (result.dependencies?.length) {\n      result.dependencies.forEach((dep) => {\n        try {\n          const f = resolveSync(path.dirname(this.resourcePath), dep);\n\n          this.addDependency(f);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.warn(`[linaria] failed to add dependency for: ${dep}`, e);\n        }\n      });\n    }\n\n    addFile(this.resourcePath, cssText);\n\n    const request = `${outputFileName}!=!${outputCssLoader}!${this.resourcePath}`;\n    const stringifiedRequest = loaderUtils.stringifyRequest(this, request);\n\n    this.callback(\n      null,\n      `${result.code}\\n\\nrequire(${stringifiedRequest});`,\n      castSourceMap(result.sourceMap)\n    );\n    return;\n  }\n\n  this.callback(null, result.code, castSourceMap(result.sourceMap));\n}\n"],"file":"index.js"}